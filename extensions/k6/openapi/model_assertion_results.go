/*
TraceTest

OpenAPI definition for TraceTest endpoint and resources

API version: 0.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AssertionResults struct for AssertionResults
type AssertionResults struct {
	AllPassed *bool                     `json:"allPassed,omitempty"`
	Results   []AssertionResultsResults `json:"results,omitempty"`
}

// NewAssertionResults instantiates a new AssertionResults object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssertionResults() *AssertionResults {
	this := AssertionResults{}
	return &this
}

// NewAssertionResultsWithDefaults instantiates a new AssertionResults object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssertionResultsWithDefaults() *AssertionResults {
	this := AssertionResults{}
	return &this
}

// GetAllPassed returns the AllPassed field value if set, zero value otherwise.
func (o *AssertionResults) GetAllPassed() bool {
	if o == nil || o.AllPassed == nil {
		var ret bool
		return ret
	}
	return *o.AllPassed
}

// GetAllPassedOk returns a tuple with the AllPassed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssertionResults) GetAllPassedOk() (*bool, bool) {
	if o == nil || o.AllPassed == nil {
		return nil, false
	}
	return o.AllPassed, true
}

// HasAllPassed returns a boolean if a field has been set.
func (o *AssertionResults) HasAllPassed() bool {
	if o != nil && o.AllPassed != nil {
		return true
	}

	return false
}

// SetAllPassed gets a reference to the given bool and assigns it to the AllPassed field.
func (o *AssertionResults) SetAllPassed(v bool) {
	o.AllPassed = &v
}

// GetResults returns the Results field value if set, zero value otherwise.
func (o *AssertionResults) GetResults() []AssertionResultsResults {
	if o == nil || o.Results == nil {
		var ret []AssertionResultsResults
		return ret
	}
	return o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssertionResults) GetResultsOk() ([]AssertionResultsResults, bool) {
	if o == nil || o.Results == nil {
		return nil, false
	}
	return o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *AssertionResults) HasResults() bool {
	if o != nil && o.Results != nil {
		return true
	}

	return false
}

// SetResults gets a reference to the given []AssertionResultsResults and assigns it to the Results field.
func (o *AssertionResults) SetResults(v []AssertionResultsResults) {
	o.Results = v
}

func (o AssertionResults) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AllPassed != nil {
		toSerialize["allPassed"] = o.AllPassed
	}
	if o.Results != nil {
		toSerialize["results"] = o.Results
	}
	return json.Marshal(toSerialize)
}

type NullableAssertionResults struct {
	value *AssertionResults
	isSet bool
}

func (v NullableAssertionResults) Get() *AssertionResults {
	return v.value
}

func (v *NullableAssertionResults) Set(val *AssertionResults) {
	v.value = val
	v.isSet = true
}

func (v NullableAssertionResults) IsSet() bool {
	return v.isSet
}

func (v *NullableAssertionResults) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssertionResults(val *AssertionResults) *NullableAssertionResults {
	return &NullableAssertionResults{value: val, isSet: true}
}

func (v NullableAssertionResults) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssertionResults) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
