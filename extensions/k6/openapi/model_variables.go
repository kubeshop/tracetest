/*
TraceTest

OpenAPI definition for TraceTest endpoint and resources

API version: 0.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Variables struct for Variables
type Variables struct {
	Environment []string           `json:"environment,omitempty"`
	Variables   []string           `json:"variables,omitempty"`
	Missing     []MissingVariables `json:"missing,omitempty"`
}

// NewVariables instantiates a new Variables object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVariables() *Variables {
	this := Variables{}
	return &this
}

// NewVariablesWithDefaults instantiates a new Variables object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVariablesWithDefaults() *Variables {
	this := Variables{}
	return &this
}

// GetEnvironment returns the Environment field value if set, zero value otherwise.
func (o *Variables) GetEnvironment() []string {
	if o == nil || o.Environment == nil {
		var ret []string
		return ret
	}
	return o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Variables) GetEnvironmentOk() ([]string, bool) {
	if o == nil || o.Environment == nil {
		return nil, false
	}
	return o.Environment, true
}

// HasEnvironment returns a boolean if a field has been set.
func (o *Variables) HasEnvironment() bool {
	if o != nil && o.Environment != nil {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given []string and assigns it to the Environment field.
func (o *Variables) SetEnvironment(v []string) {
	o.Environment = v
}

// GetVariables returns the Variables field value if set, zero value otherwise.
func (o *Variables) GetVariables() []string {
	if o == nil || o.Variables == nil {
		var ret []string
		return ret
	}
	return o.Variables
}

// GetVariablesOk returns a tuple with the Variables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Variables) GetVariablesOk() ([]string, bool) {
	if o == nil || o.Variables == nil {
		return nil, false
	}
	return o.Variables, true
}

// HasVariables returns a boolean if a field has been set.
func (o *Variables) HasVariables() bool {
	if o != nil && o.Variables != nil {
		return true
	}

	return false
}

// SetVariables gets a reference to the given []string and assigns it to the Variables field.
func (o *Variables) SetVariables(v []string) {
	o.Variables = v
}

// GetMissing returns the Missing field value if set, zero value otherwise.
func (o *Variables) GetMissing() []MissingVariables {
	if o == nil || o.Missing == nil {
		var ret []MissingVariables
		return ret
	}
	return o.Missing
}

// GetMissingOk returns a tuple with the Missing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Variables) GetMissingOk() ([]MissingVariables, bool) {
	if o == nil || o.Missing == nil {
		return nil, false
	}
	return o.Missing, true
}

// HasMissing returns a boolean if a field has been set.
func (o *Variables) HasMissing() bool {
	if o != nil && o.Missing != nil {
		return true
	}

	return false
}

// SetMissing gets a reference to the given []MissingVariables and assigns it to the Missing field.
func (o *Variables) SetMissing(v []MissingVariables) {
	o.Missing = v
}

func (o Variables) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Environment != nil {
		toSerialize["environment"] = o.Environment
	}
	if o.Variables != nil {
		toSerialize["variables"] = o.Variables
	}
	if o.Missing != nil {
		toSerialize["missing"] = o.Missing
	}
	return json.Marshal(toSerialize)
}

type NullableVariables struct {
	value *Variables
	isSet bool
}

func (v NullableVariables) Get() *Variables {
	return v.value
}

func (v *NullableVariables) Set(val *Variables) {
	v.value = val
	v.isSet = true
}

func (v NullableVariables) IsSet() bool {
	return v.isSet
}

func (v *NullableVariables) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVariables(val *Variables) *NullableVariables {
	return &NullableVariables{value: val, isSet: true}
}

func (v NullableVariables) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVariables) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
