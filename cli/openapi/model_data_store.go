/*
TraceTest

OpenAPI definition for TraceTest endpoint and resources

API version: 0.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the DataStore type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataStore{}

// DataStore struct for DataStore
type DataStore struct {
	Id         *string             `json:"id,omitempty"`
	Name       string              `json:"name"`
	Type       SupportedDataStores `json:"type"`
	IsDefault  *bool               `json:"isDefault,omitempty"`
	Jaeger     *GRPCClientSettings `json:"jaeger,omitempty"`
	Tempo      *BaseClient         `json:"tempo,omitempty"`
	OpenSearch *ElasticSearch      `json:"openSearch,omitempty"`
	ElasticApm *ElasticSearch      `json:"elasticApm,omitempty"`
	SignalFx   *SignalFX           `json:"signalFx,omitempty"`
	CreatedAt  *time.Time          `json:"createdAt,omitempty"`
}

// NewDataStore instantiates a new DataStore object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataStore(name string, type_ SupportedDataStores) *DataStore {
	this := DataStore{}
	this.Name = name
	this.Type = type_
	return &this
}

// NewDataStoreWithDefaults instantiates a new DataStore object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataStoreWithDefaults() *DataStore {
	this := DataStore{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DataStore) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataStore) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DataStore) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DataStore) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *DataStore) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DataStore) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DataStore) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *DataStore) GetType() SupportedDataStores {
	if o == nil {
		var ret SupportedDataStores
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *DataStore) GetTypeOk() (*SupportedDataStores, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *DataStore) SetType(v SupportedDataStores) {
	o.Type = v
}

// GetIsDefault returns the IsDefault field value if set, zero value otherwise.
func (o *DataStore) GetIsDefault() bool {
	if o == nil || isNil(o.IsDefault) {
		var ret bool
		return ret
	}
	return *o.IsDefault
}

// GetIsDefaultOk returns a tuple with the IsDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataStore) GetIsDefaultOk() (*bool, bool) {
	if o == nil || isNil(o.IsDefault) {
		return nil, false
	}
	return o.IsDefault, true
}

// HasIsDefault returns a boolean if a field has been set.
func (o *DataStore) HasIsDefault() bool {
	if o != nil && !isNil(o.IsDefault) {
		return true
	}

	return false
}

// SetIsDefault gets a reference to the given bool and assigns it to the IsDefault field.
func (o *DataStore) SetIsDefault(v bool) {
	o.IsDefault = &v
}

// GetJaeger returns the Jaeger field value if set, zero value otherwise.
func (o *DataStore) GetJaeger() GRPCClientSettings {
	if o == nil || isNil(o.Jaeger) {
		var ret GRPCClientSettings
		return ret
	}
	return *o.Jaeger
}

// GetJaegerOk returns a tuple with the Jaeger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataStore) GetJaegerOk() (*GRPCClientSettings, bool) {
	if o == nil || isNil(o.Jaeger) {
		return nil, false
	}
	return o.Jaeger, true
}

// HasJaeger returns a boolean if a field has been set.
func (o *DataStore) HasJaeger() bool {
	if o != nil && !isNil(o.Jaeger) {
		return true
	}

	return false
}

// SetJaeger gets a reference to the given GRPCClientSettings and assigns it to the Jaeger field.
func (o *DataStore) SetJaeger(v GRPCClientSettings) {
	o.Jaeger = &v
}

// GetTempo returns the Tempo field value if set, zero value otherwise.
func (o *DataStore) GetTempo() BaseClient {
	if o == nil || isNil(o.Tempo) {
		var ret BaseClient
		return ret
	}
	return *o.Tempo
}

// GetTempoOk returns a tuple with the Tempo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataStore) GetTempoOk() (*BaseClient, bool) {
	if o == nil || isNil(o.Tempo) {
		return nil, false
	}
	return o.Tempo, true
}

// HasTempo returns a boolean if a field has been set.
func (o *DataStore) HasTempo() bool {
	if o != nil && !isNil(o.Tempo) {
		return true
	}

	return false
}

// SetTempo gets a reference to the given BaseClient and assigns it to the Tempo field.
func (o *DataStore) SetTempo(v BaseClient) {
	o.Tempo = &v
}

// GetOpenSearch returns the OpenSearch field value if set, zero value otherwise.
func (o *DataStore) GetOpenSearch() ElasticSearch {
	if o == nil || isNil(o.OpenSearch) {
		var ret ElasticSearch
		return ret
	}
	return *o.OpenSearch
}

// GetOpenSearchOk returns a tuple with the OpenSearch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataStore) GetOpenSearchOk() (*ElasticSearch, bool) {
	if o == nil || isNil(o.OpenSearch) {
		return nil, false
	}
	return o.OpenSearch, true
}

// HasOpenSearch returns a boolean if a field has been set.
func (o *DataStore) HasOpenSearch() bool {
	if o != nil && !isNil(o.OpenSearch) {
		return true
	}

	return false
}

// SetOpenSearch gets a reference to the given ElasticSearch and assigns it to the OpenSearch field.
func (o *DataStore) SetOpenSearch(v ElasticSearch) {
	o.OpenSearch = &v
}

// GetElasticApm returns the ElasticApm field value if set, zero value otherwise.
func (o *DataStore) GetElasticApm() ElasticSearch {
	if o == nil || isNil(o.ElasticApm) {
		var ret ElasticSearch
		return ret
	}
	return *o.ElasticApm
}

// GetElasticApmOk returns a tuple with the ElasticApm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataStore) GetElasticApmOk() (*ElasticSearch, bool) {
	if o == nil || isNil(o.ElasticApm) {
		return nil, false
	}
	return o.ElasticApm, true
}

// HasElasticApm returns a boolean if a field has been set.
func (o *DataStore) HasElasticApm() bool {
	if o != nil && !isNil(o.ElasticApm) {
		return true
	}

	return false
}

// SetElasticApm gets a reference to the given ElasticSearch and assigns it to the ElasticApm field.
func (o *DataStore) SetElasticApm(v ElasticSearch) {
	o.ElasticApm = &v
}

// GetSignalFx returns the SignalFx field value if set, zero value otherwise.
func (o *DataStore) GetSignalFx() SignalFX {
	if o == nil || isNil(o.SignalFx) {
		var ret SignalFX
		return ret
	}
	return *o.SignalFx
}

// GetSignalFxOk returns a tuple with the SignalFx field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataStore) GetSignalFxOk() (*SignalFX, bool) {
	if o == nil || isNil(o.SignalFx) {
		return nil, false
	}
	return o.SignalFx, true
}

// HasSignalFx returns a boolean if a field has been set.
func (o *DataStore) HasSignalFx() bool {
	if o != nil && !isNil(o.SignalFx) {
		return true
	}

	return false
}

// SetSignalFx gets a reference to the given SignalFX and assigns it to the SignalFx field.
func (o *DataStore) SetSignalFx(v SignalFX) {
	o.SignalFx = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *DataStore) GetCreatedAt() time.Time {
	if o == nil || isNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataStore) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || isNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *DataStore) HasCreatedAt() bool {
	if o != nil && !isNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *DataStore) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

func (o DataStore) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataStore) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: id is readOnly
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type
	if !isNil(o.IsDefault) {
		toSerialize["isDefault"] = o.IsDefault
	}
	if !isNil(o.Jaeger) {
		toSerialize["jaeger"] = o.Jaeger
	}
	if !isNil(o.Tempo) {
		toSerialize["tempo"] = o.Tempo
	}
	if !isNil(o.OpenSearch) {
		toSerialize["openSearch"] = o.OpenSearch
	}
	if !isNil(o.ElasticApm) {
		toSerialize["elasticApm"] = o.ElasticApm
	}
	if !isNil(o.SignalFx) {
		toSerialize["signalFx"] = o.SignalFx
	}
	if !isNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	return toSerialize, nil
}

type NullableDataStore struct {
	value *DataStore
	isSet bool
}

func (v NullableDataStore) Get() *DataStore {
	return v.value
}

func (v *NullableDataStore) Set(val *DataStore) {
	v.value = val
	v.isSet = true
}

func (v NullableDataStore) IsSet() bool {
	return v.isSet
}

func (v *NullableDataStore) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataStore(val *DataStore) *NullableDataStore {
	return &NullableDataStore{value: val, isSet: true}
}

func (v NullableDataStore) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataStore) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
