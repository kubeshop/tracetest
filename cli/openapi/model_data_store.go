/*
TraceTest

OpenAPI definition for TraceTest endpoint and resources

API version: 0.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the DataStore type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataStore{}

// DataStore struct for DataStore
type DataStore struct {
	Id               *string             `json:"id,omitempty"`
	Name             string              `json:"name"`
	Type             SupportedDataStores `json:"type"`
	Default          *bool               `json:"default,omitempty"`
	Jaeger           *GRPCClientSettings `json:"jaeger,omitempty"`
	Tempo            *BaseClient         `json:"tempo,omitempty"`
	Opensearch       *ElasticSearch      `json:"opensearch,omitempty"`
	Elasticapm       *ElasticSearch      `json:"elasticapm,omitempty"`
	Signalfx         *SignalFX           `json:"signalfx,omitempty"`
	Awsxray          *AwsXRay            `json:"awsxray,omitempty"`
	Azureappinsights *AzureAppInsights   `json:"azureappinsights,omitempty"`
	Sumologic        *SumoLogic          `json:"sumologic,omitempty"`
	CreatedAt        *time.Time          `json:"createdAt,omitempty"`
}

// NewDataStore instantiates a new DataStore object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataStore(name string, type_ SupportedDataStores) *DataStore {
	this := DataStore{}
	this.Name = name
	this.Type = type_
	return &this
}

// NewDataStoreWithDefaults instantiates a new DataStore object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataStoreWithDefaults() *DataStore {
	this := DataStore{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DataStore) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataStore) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DataStore) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DataStore) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *DataStore) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DataStore) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DataStore) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *DataStore) GetType() SupportedDataStores {
	if o == nil {
		var ret SupportedDataStores
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *DataStore) GetTypeOk() (*SupportedDataStores, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *DataStore) SetType(v SupportedDataStores) {
	o.Type = v
}

// GetDefault returns the Default field value if set, zero value otherwise.
func (o *DataStore) GetDefault() bool {
	if o == nil || isNil(o.Default) {
		var ret bool
		return ret
	}
	return *o.Default
}

// GetDefaultOk returns a tuple with the Default field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataStore) GetDefaultOk() (*bool, bool) {
	if o == nil || isNil(o.Default) {
		return nil, false
	}
	return o.Default, true
}

// HasDefault returns a boolean if a field has been set.
func (o *DataStore) HasDefault() bool {
	if o != nil && !isNil(o.Default) {
		return true
	}

	return false
}

// SetDefault gets a reference to the given bool and assigns it to the Default field.
func (o *DataStore) SetDefault(v bool) {
	o.Default = &v
}

// GetJaeger returns the Jaeger field value if set, zero value otherwise.
func (o *DataStore) GetJaeger() GRPCClientSettings {
	if o == nil || isNil(o.Jaeger) {
		var ret GRPCClientSettings
		return ret
	}
	return *o.Jaeger
}

// GetJaegerOk returns a tuple with the Jaeger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataStore) GetJaegerOk() (*GRPCClientSettings, bool) {
	if o == nil || isNil(o.Jaeger) {
		return nil, false
	}
	return o.Jaeger, true
}

// HasJaeger returns a boolean if a field has been set.
func (o *DataStore) HasJaeger() bool {
	if o != nil && !isNil(o.Jaeger) {
		return true
	}

	return false
}

// SetJaeger gets a reference to the given GRPCClientSettings and assigns it to the Jaeger field.
func (o *DataStore) SetJaeger(v GRPCClientSettings) {
	o.Jaeger = &v
}

// GetTempo returns the Tempo field value if set, zero value otherwise.
func (o *DataStore) GetTempo() BaseClient {
	if o == nil || isNil(o.Tempo) {
		var ret BaseClient
		return ret
	}
	return *o.Tempo
}

// GetTempoOk returns a tuple with the Tempo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataStore) GetTempoOk() (*BaseClient, bool) {
	if o == nil || isNil(o.Tempo) {
		return nil, false
	}
	return o.Tempo, true
}

// HasTempo returns a boolean if a field has been set.
func (o *DataStore) HasTempo() bool {
	if o != nil && !isNil(o.Tempo) {
		return true
	}

	return false
}

// SetTempo gets a reference to the given BaseClient and assigns it to the Tempo field.
func (o *DataStore) SetTempo(v BaseClient) {
	o.Tempo = &v
}

// GetOpensearch returns the Opensearch field value if set, zero value otherwise.
func (o *DataStore) GetOpensearch() ElasticSearch {
	if o == nil || isNil(o.Opensearch) {
		var ret ElasticSearch
		return ret
	}
	return *o.Opensearch
}

// GetOpensearchOk returns a tuple with the Opensearch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataStore) GetOpensearchOk() (*ElasticSearch, bool) {
	if o == nil || isNil(o.Opensearch) {
		return nil, false
	}
	return o.Opensearch, true
}

// HasOpensearch returns a boolean if a field has been set.
func (o *DataStore) HasOpensearch() bool {
	if o != nil && !isNil(o.Opensearch) {
		return true
	}

	return false
}

// SetOpensearch gets a reference to the given ElasticSearch and assigns it to the Opensearch field.
func (o *DataStore) SetOpensearch(v ElasticSearch) {
	o.Opensearch = &v
}

// GetElasticapm returns the Elasticapm field value if set, zero value otherwise.
func (o *DataStore) GetElasticapm() ElasticSearch {
	if o == nil || isNil(o.Elasticapm) {
		var ret ElasticSearch
		return ret
	}
	return *o.Elasticapm
}

// GetElasticapmOk returns a tuple with the Elasticapm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataStore) GetElasticapmOk() (*ElasticSearch, bool) {
	if o == nil || isNil(o.Elasticapm) {
		return nil, false
	}
	return o.Elasticapm, true
}

// HasElasticapm returns a boolean if a field has been set.
func (o *DataStore) HasElasticapm() bool {
	if o != nil && !isNil(o.Elasticapm) {
		return true
	}

	return false
}

// SetElasticapm gets a reference to the given ElasticSearch and assigns it to the Elasticapm field.
func (o *DataStore) SetElasticapm(v ElasticSearch) {
	o.Elasticapm = &v
}

// GetSignalfx returns the Signalfx field value if set, zero value otherwise.
func (o *DataStore) GetSignalfx() SignalFX {
	if o == nil || isNil(o.Signalfx) {
		var ret SignalFX
		return ret
	}
	return *o.Signalfx
}

// GetSignalfxOk returns a tuple with the Signalfx field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataStore) GetSignalfxOk() (*SignalFX, bool) {
	if o == nil || isNil(o.Signalfx) {
		return nil, false
	}
	return o.Signalfx, true
}

// HasSignalfx returns a boolean if a field has been set.
func (o *DataStore) HasSignalfx() bool {
	if o != nil && !isNil(o.Signalfx) {
		return true
	}

	return false
}

// SetSignalfx gets a reference to the given SignalFX and assigns it to the Signalfx field.
func (o *DataStore) SetSignalfx(v SignalFX) {
	o.Signalfx = &v
}

// GetAwsxray returns the Awsxray field value if set, zero value otherwise.
func (o *DataStore) GetAwsxray() AwsXRay {
	if o == nil || isNil(o.Awsxray) {
		var ret AwsXRay
		return ret
	}
	return *o.Awsxray
}

// GetAwsxrayOk returns a tuple with the Awsxray field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataStore) GetAwsxrayOk() (*AwsXRay, bool) {
	if o == nil || isNil(o.Awsxray) {
		return nil, false
	}
	return o.Awsxray, true
}

// HasAwsxray returns a boolean if a field has been set.
func (o *DataStore) HasAwsxray() bool {
	if o != nil && !isNil(o.Awsxray) {
		return true
	}

	return false
}

// SetAwsxray gets a reference to the given AwsXRay and assigns it to the Awsxray field.
func (o *DataStore) SetAwsxray(v AwsXRay) {
	o.Awsxray = &v
}

// GetAzureappinsights returns the Azureappinsights field value if set, zero value otherwise.
func (o *DataStore) GetAzureappinsights() AzureAppInsights {
	if o == nil || isNil(o.Azureappinsights) {
		var ret AzureAppInsights
		return ret
	}
	return *o.Azureappinsights
}

// GetAzureappinsightsOk returns a tuple with the Azureappinsights field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataStore) GetAzureappinsightsOk() (*AzureAppInsights, bool) {
	if o == nil || isNil(o.Azureappinsights) {
		return nil, false
	}
	return o.Azureappinsights, true
}

// HasAzureappinsights returns a boolean if a field has been set.
func (o *DataStore) HasAzureappinsights() bool {
	if o != nil && !isNil(o.Azureappinsights) {
		return true
	}

	return false
}

// SetAzureappinsights gets a reference to the given AzureAppInsights and assigns it to the Azureappinsights field.
func (o *DataStore) SetAzureappinsights(v AzureAppInsights) {
	o.Azureappinsights = &v
}

// GetSumologic returns the Sumologic field value if set, zero value otherwise.
func (o *DataStore) GetSumologic() SumoLogic {
	if o == nil || isNil(o.Sumologic) {
		var ret SumoLogic
		return ret
	}
	return *o.Sumologic
}

// GetSumologicOk returns a tuple with the Sumologic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataStore) GetSumologicOk() (*SumoLogic, bool) {
	if o == nil || isNil(o.Sumologic) {
		return nil, false
	}
	return o.Sumologic, true
}

// HasSumologic returns a boolean if a field has been set.
func (o *DataStore) HasSumologic() bool {
	if o != nil && !isNil(o.Sumologic) {
		return true
	}

	return false
}

// SetSumologic gets a reference to the given SumoLogic and assigns it to the Sumologic field.
func (o *DataStore) SetSumologic(v SumoLogic) {
	o.Sumologic = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *DataStore) GetCreatedAt() time.Time {
	if o == nil || isNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataStore) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || isNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *DataStore) HasCreatedAt() bool {
	if o != nil && !isNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *DataStore) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

func (o DataStore) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataStore) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: id is readOnly
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type
	if !isNil(o.Default) {
		toSerialize["default"] = o.Default
	}
	if !isNil(o.Jaeger) {
		toSerialize["jaeger"] = o.Jaeger
	}
	if !isNil(o.Tempo) {
		toSerialize["tempo"] = o.Tempo
	}
	if !isNil(o.Opensearch) {
		toSerialize["opensearch"] = o.Opensearch
	}
	if !isNil(o.Elasticapm) {
		toSerialize["elasticapm"] = o.Elasticapm
	}
	if !isNil(o.Signalfx) {
		toSerialize["signalfx"] = o.Signalfx
	}
	if !isNil(o.Awsxray) {
		toSerialize["awsxray"] = o.Awsxray
	}
	if !isNil(o.Azureappinsights) {
		toSerialize["azureappinsights"] = o.Azureappinsights
	}
	if !isNil(o.Sumologic) {
		toSerialize["sumologic"] = o.Sumologic
	}
	if !isNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	return toSerialize, nil
}

type NullableDataStore struct {
	value *DataStore
	isSet bool
}

func (v NullableDataStore) Get() *DataStore {
	return v.value
}

func (v *NullableDataStore) Set(val *DataStore) {
	v.value = val
	v.isSet = true
}

func (v NullableDataStore) IsSet() bool {
	return v.isSet
}

func (v *NullableDataStore) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataStore(val *DataStore) *NullableDataStore {
	return &NullableDataStore{value: val, isSet: true}
}

func (v NullableDataStore) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataStore) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
