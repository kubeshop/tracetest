/*
TraceTest

OpenAPI definition for TraceTest endpoint and resources

API version: 0.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TextDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TextDefinition{}

// TextDefinition struct for TextDefinition
type TextDefinition struct {
	RunInformation *RunInformation `json:"runInformation,omitempty"`
	Content        *string         `json:"content,omitempty"`
}

// NewTextDefinition instantiates a new TextDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTextDefinition() *TextDefinition {
	this := TextDefinition{}
	return &this
}

// NewTextDefinitionWithDefaults instantiates a new TextDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTextDefinitionWithDefaults() *TextDefinition {
	this := TextDefinition{}
	return &this
}

// GetRunInformation returns the RunInformation field value if set, zero value otherwise.
func (o *TextDefinition) GetRunInformation() RunInformation {
	if o == nil || isNil(o.RunInformation) {
		var ret RunInformation
		return ret
	}
	return *o.RunInformation
}

// GetRunInformationOk returns a tuple with the RunInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TextDefinition) GetRunInformationOk() (*RunInformation, bool) {
	if o == nil || isNil(o.RunInformation) {
		return nil, false
	}
	return o.RunInformation, true
}

// HasRunInformation returns a boolean if a field has been set.
func (o *TextDefinition) HasRunInformation() bool {
	if o != nil && !isNil(o.RunInformation) {
		return true
	}

	return false
}

// SetRunInformation gets a reference to the given RunInformation and assigns it to the RunInformation field.
func (o *TextDefinition) SetRunInformation(v RunInformation) {
	o.RunInformation = &v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *TextDefinition) GetContent() string {
	if o == nil || isNil(o.Content) {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TextDefinition) GetContentOk() (*string, bool) {
	if o == nil || isNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *TextDefinition) HasContent() bool {
	if o != nil && !isNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *TextDefinition) SetContent(v string) {
	o.Content = &v
}

func (o TextDefinition) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TextDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.RunInformation) {
		toSerialize["runInformation"] = o.RunInformation
	}
	if !isNil(o.Content) {
		toSerialize["content"] = o.Content
	}
	return toSerialize, nil
}

type NullableTextDefinition struct {
	value *TextDefinition
	isSet bool
}

func (v NullableTextDefinition) Get() *TextDefinition {
	return v.value
}

func (v *NullableTextDefinition) Set(val *TextDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableTextDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableTextDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTextDefinition(val *TextDefinition) *NullableTextDefinition {
	return &NullableTextDefinition{value: val, isSet: true}
}

func (v NullableTextDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTextDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
