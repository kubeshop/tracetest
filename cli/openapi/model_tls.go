/*
TraceTest

OpenAPI definition for TraceTest endpoint and resources

API version: 0.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TLS struct for TLS
type TLS struct {
	Insecure           *bool   `json:"insecure,omitempty"`
	InsecureSkipVerify *bool   `json:"insecureSkipVerify,omitempty"`
	ServerName         *string `json:"serverName,omitempty"`
	CAFile             *string `json:"cAFile,omitempty"`
	CertFile           *string `json:"certFile,omitempty"`
	KeyFile            *string `json:"keyFile,omitempty"`
	MinVersion         *string `json:"minVersion,omitempty"`
	MaxVersion         *string `json:"maxVersion,omitempty"`
}

// NewTLS instantiates a new TLS object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTLS() *TLS {
	this := TLS{}
	return &this
}

// NewTLSWithDefaults instantiates a new TLS object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTLSWithDefaults() *TLS {
	this := TLS{}
	return &this
}

// GetInsecure returns the Insecure field value if set, zero value otherwise.
func (o *TLS) GetInsecure() bool {
	if o == nil || o.Insecure == nil {
		var ret bool
		return ret
	}
	return *o.Insecure
}

// GetInsecureOk returns a tuple with the Insecure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TLS) GetInsecureOk() (*bool, bool) {
	if o == nil || o.Insecure == nil {
		return nil, false
	}
	return o.Insecure, true
}

// HasInsecure returns a boolean if a field has been set.
func (o *TLS) HasInsecure() bool {
	if o != nil && o.Insecure != nil {
		return true
	}

	return false
}

// SetInsecure gets a reference to the given bool and assigns it to the Insecure field.
func (o *TLS) SetInsecure(v bool) {
	o.Insecure = &v
}

// GetInsecureSkipVerify returns the InsecureSkipVerify field value if set, zero value otherwise.
func (o *TLS) GetInsecureSkipVerify() bool {
	if o == nil || o.InsecureSkipVerify == nil {
		var ret bool
		return ret
	}
	return *o.InsecureSkipVerify
}

// GetInsecureSkipVerifyOk returns a tuple with the InsecureSkipVerify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TLS) GetInsecureSkipVerifyOk() (*bool, bool) {
	if o == nil || o.InsecureSkipVerify == nil {
		return nil, false
	}
	return o.InsecureSkipVerify, true
}

// HasInsecureSkipVerify returns a boolean if a field has been set.
func (o *TLS) HasInsecureSkipVerify() bool {
	if o != nil && o.InsecureSkipVerify != nil {
		return true
	}

	return false
}

// SetInsecureSkipVerify gets a reference to the given bool and assigns it to the InsecureSkipVerify field.
func (o *TLS) SetInsecureSkipVerify(v bool) {
	o.InsecureSkipVerify = &v
}

// GetServerName returns the ServerName field value if set, zero value otherwise.
func (o *TLS) GetServerName() string {
	if o == nil || o.ServerName == nil {
		var ret string
		return ret
	}
	return *o.ServerName
}

// GetServerNameOk returns a tuple with the ServerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TLS) GetServerNameOk() (*string, bool) {
	if o == nil || o.ServerName == nil {
		return nil, false
	}
	return o.ServerName, true
}

// HasServerName returns a boolean if a field has been set.
func (o *TLS) HasServerName() bool {
	if o != nil && o.ServerName != nil {
		return true
	}

	return false
}

// SetServerName gets a reference to the given string and assigns it to the ServerName field.
func (o *TLS) SetServerName(v string) {
	o.ServerName = &v
}

// GetCAFile returns the CAFile field value if set, zero value otherwise.
func (o *TLS) GetCAFile() string {
	if o == nil || o.CAFile == nil {
		var ret string
		return ret
	}
	return *o.CAFile
}

// GetCAFileOk returns a tuple with the CAFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TLS) GetCAFileOk() (*string, bool) {
	if o == nil || o.CAFile == nil {
		return nil, false
	}
	return o.CAFile, true
}

// HasCAFile returns a boolean if a field has been set.
func (o *TLS) HasCAFile() bool {
	if o != nil && o.CAFile != nil {
		return true
	}

	return false
}

// SetCAFile gets a reference to the given string and assigns it to the CAFile field.
func (o *TLS) SetCAFile(v string) {
	o.CAFile = &v
}

// GetCertFile returns the CertFile field value if set, zero value otherwise.
func (o *TLS) GetCertFile() string {
	if o == nil || o.CertFile == nil {
		var ret string
		return ret
	}
	return *o.CertFile
}

// GetCertFileOk returns a tuple with the CertFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TLS) GetCertFileOk() (*string, bool) {
	if o == nil || o.CertFile == nil {
		return nil, false
	}
	return o.CertFile, true
}

// HasCertFile returns a boolean if a field has been set.
func (o *TLS) HasCertFile() bool {
	if o != nil && o.CertFile != nil {
		return true
	}

	return false
}

// SetCertFile gets a reference to the given string and assigns it to the CertFile field.
func (o *TLS) SetCertFile(v string) {
	o.CertFile = &v
}

// GetKeyFile returns the KeyFile field value if set, zero value otherwise.
func (o *TLS) GetKeyFile() string {
	if o == nil || o.KeyFile == nil {
		var ret string
		return ret
	}
	return *o.KeyFile
}

// GetKeyFileOk returns a tuple with the KeyFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TLS) GetKeyFileOk() (*string, bool) {
	if o == nil || o.KeyFile == nil {
		return nil, false
	}
	return o.KeyFile, true
}

// HasKeyFile returns a boolean if a field has been set.
func (o *TLS) HasKeyFile() bool {
	if o != nil && o.KeyFile != nil {
		return true
	}

	return false
}

// SetKeyFile gets a reference to the given string and assigns it to the KeyFile field.
func (o *TLS) SetKeyFile(v string) {
	o.KeyFile = &v
}

// GetMinVersion returns the MinVersion field value if set, zero value otherwise.
func (o *TLS) GetMinVersion() string {
	if o == nil || o.MinVersion == nil {
		var ret string
		return ret
	}
	return *o.MinVersion
}

// GetMinVersionOk returns a tuple with the MinVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TLS) GetMinVersionOk() (*string, bool) {
	if o == nil || o.MinVersion == nil {
		return nil, false
	}
	return o.MinVersion, true
}

// HasMinVersion returns a boolean if a field has been set.
func (o *TLS) HasMinVersion() bool {
	if o != nil && o.MinVersion != nil {
		return true
	}

	return false
}

// SetMinVersion gets a reference to the given string and assigns it to the MinVersion field.
func (o *TLS) SetMinVersion(v string) {
	o.MinVersion = &v
}

// GetMaxVersion returns the MaxVersion field value if set, zero value otherwise.
func (o *TLS) GetMaxVersion() string {
	if o == nil || o.MaxVersion == nil {
		var ret string
		return ret
	}
	return *o.MaxVersion
}

// GetMaxVersionOk returns a tuple with the MaxVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TLS) GetMaxVersionOk() (*string, bool) {
	if o == nil || o.MaxVersion == nil {
		return nil, false
	}
	return o.MaxVersion, true
}

// HasMaxVersion returns a boolean if a field has been set.
func (o *TLS) HasMaxVersion() bool {
	if o != nil && o.MaxVersion != nil {
		return true
	}

	return false
}

// SetMaxVersion gets a reference to the given string and assigns it to the MaxVersion field.
func (o *TLS) SetMaxVersion(v string) {
	o.MaxVersion = &v
}

func (o TLS) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Insecure != nil {
		toSerialize["insecure"] = o.Insecure
	}
	if o.InsecureSkipVerify != nil {
		toSerialize["insecureSkipVerify"] = o.InsecureSkipVerify
	}
	if o.ServerName != nil {
		toSerialize["serverName"] = o.ServerName
	}
	if o.CAFile != nil {
		toSerialize["cAFile"] = o.CAFile
	}
	if o.CertFile != nil {
		toSerialize["certFile"] = o.CertFile
	}
	if o.KeyFile != nil {
		toSerialize["keyFile"] = o.KeyFile
	}
	if o.MinVersion != nil {
		toSerialize["minVersion"] = o.MinVersion
	}
	if o.MaxVersion != nil {
		toSerialize["maxVersion"] = o.MaxVersion
	}
	return json.Marshal(toSerialize)
}

type NullableTLS struct {
	value *TLS
	isSet bool
}

func (v NullableTLS) Get() *TLS {
	return v.value
}

func (v *NullableTLS) Set(val *TLS) {
	v.value = val
	v.isSet = true
}

func (v NullableTLS) IsSet() bool {
	return v.isSet
}

func (v *NullableTLS) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTLS(val *TLS) *NullableTLS {
	return &NullableTLS{value: val, isSet: true}
}

func (v NullableTLS) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTLS) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
