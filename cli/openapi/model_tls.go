/*
TraceTest

OpenAPI definition for TraceTest endpoint and resources

API version: 0.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TLS struct for TLS
type TLS struct {
	Insecure           *bool       `json:"insecure,omitempty"`
	InsecureSkipVerify *bool       `json:"insecureSkipVerify,omitempty"`
	ServerName         *string     `json:"serverName,omitempty"`
	Settings           *TLSSetting `json:"settings,omitempty"`
}

// NewTLS instantiates a new TLS object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTLS() *TLS {
	this := TLS{}
	return &this
}

// NewTLSWithDefaults instantiates a new TLS object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTLSWithDefaults() *TLS {
	this := TLS{}
	return &this
}

// GetInsecure returns the Insecure field value if set, zero value otherwise.
func (o *TLS) GetInsecure() bool {
	if o == nil || o.Insecure == nil {
		var ret bool
		return ret
	}
	return *o.Insecure
}

// GetInsecureOk returns a tuple with the Insecure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TLS) GetInsecureOk() (*bool, bool) {
	if o == nil || o.Insecure == nil {
		return nil, false
	}
	return o.Insecure, true
}

// HasInsecure returns a boolean if a field has been set.
func (o *TLS) HasInsecure() bool {
	if o != nil && o.Insecure != nil {
		return true
	}

	return false
}

// SetInsecure gets a reference to the given bool and assigns it to the Insecure field.
func (o *TLS) SetInsecure(v bool) {
	o.Insecure = &v
}

// GetInsecureSkipVerify returns the InsecureSkipVerify field value if set, zero value otherwise.
func (o *TLS) GetInsecureSkipVerify() bool {
	if o == nil || o.InsecureSkipVerify == nil {
		var ret bool
		return ret
	}
	return *o.InsecureSkipVerify
}

// GetInsecureSkipVerifyOk returns a tuple with the InsecureSkipVerify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TLS) GetInsecureSkipVerifyOk() (*bool, bool) {
	if o == nil || o.InsecureSkipVerify == nil {
		return nil, false
	}
	return o.InsecureSkipVerify, true
}

// HasInsecureSkipVerify returns a boolean if a field has been set.
func (o *TLS) HasInsecureSkipVerify() bool {
	if o != nil && o.InsecureSkipVerify != nil {
		return true
	}

	return false
}

// SetInsecureSkipVerify gets a reference to the given bool and assigns it to the InsecureSkipVerify field.
func (o *TLS) SetInsecureSkipVerify(v bool) {
	o.InsecureSkipVerify = &v
}

// GetServerName returns the ServerName field value if set, zero value otherwise.
func (o *TLS) GetServerName() string {
	if o == nil || o.ServerName == nil {
		var ret string
		return ret
	}
	return *o.ServerName
}

// GetServerNameOk returns a tuple with the ServerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TLS) GetServerNameOk() (*string, bool) {
	if o == nil || o.ServerName == nil {
		return nil, false
	}
	return o.ServerName, true
}

// HasServerName returns a boolean if a field has been set.
func (o *TLS) HasServerName() bool {
	if o != nil && o.ServerName != nil {
		return true
	}

	return false
}

// SetServerName gets a reference to the given string and assigns it to the ServerName field.
func (o *TLS) SetServerName(v string) {
	o.ServerName = &v
}

// GetSettings returns the Settings field value if set, zero value otherwise.
func (o *TLS) GetSettings() TLSSetting {
	if o == nil || o.Settings == nil {
		var ret TLSSetting
		return ret
	}
	return *o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TLS) GetSettingsOk() (*TLSSetting, bool) {
	if o == nil || o.Settings == nil {
		return nil, false
	}
	return o.Settings, true
}

// HasSettings returns a boolean if a field has been set.
func (o *TLS) HasSettings() bool {
	if o != nil && o.Settings != nil {
		return true
	}

	return false
}

// SetSettings gets a reference to the given TLSSetting and assigns it to the Settings field.
func (o *TLS) SetSettings(v TLSSetting) {
	o.Settings = &v
}

func (o TLS) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Insecure != nil {
		toSerialize["insecure"] = o.Insecure
	}
	if o.InsecureSkipVerify != nil {
		toSerialize["insecureSkipVerify"] = o.InsecureSkipVerify
	}
	if o.ServerName != nil {
		toSerialize["serverName"] = o.ServerName
	}
	if o.Settings != nil {
		toSerialize["settings"] = o.Settings
	}
	return json.Marshal(toSerialize)
}

type NullableTLS struct {
	value *TLS
	isSet bool
}

func (v NullableTLS) Get() *TLS {
	return v.value
}

func (v *NullableTLS) Set(val *TLS) {
	v.value = val
	v.isSet = true
}

func (v NullableTLS) IsSet() bool {
	return v.isSet
}

func (v *NullableTLS) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTLS(val *TLS) *NullableTLS {
	return &NullableTLS{value: val, isSet: true}
}

func (v NullableTLS) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTLS) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
