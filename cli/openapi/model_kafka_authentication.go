/*
TraceTest

OpenAPI definition for TraceTest endpoint and resources

API version: 0.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the KafkaAuthentication type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KafkaAuthentication{}

// KafkaAuthentication struct for KafkaAuthentication
type KafkaAuthentication struct {
	Type  *string        `json:"type,omitempty"`
	Plain *HTTPAuthBasic `json:"plain,omitempty"`
}

// NewKafkaAuthentication instantiates a new KafkaAuthentication object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKafkaAuthentication() *KafkaAuthentication {
	this := KafkaAuthentication{}
	return &this
}

// NewKafkaAuthenticationWithDefaults instantiates a new KafkaAuthentication object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKafkaAuthenticationWithDefaults() *KafkaAuthentication {
	this := KafkaAuthentication{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *KafkaAuthentication) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KafkaAuthentication) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *KafkaAuthentication) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *KafkaAuthentication) SetType(v string) {
	o.Type = &v
}

// GetPlain returns the Plain field value if set, zero value otherwise.
func (o *KafkaAuthentication) GetPlain() HTTPAuthBasic {
	if o == nil || isNil(o.Plain) {
		var ret HTTPAuthBasic
		return ret
	}
	return *o.Plain
}

// GetPlainOk returns a tuple with the Plain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KafkaAuthentication) GetPlainOk() (*HTTPAuthBasic, bool) {
	if o == nil || isNil(o.Plain) {
		return nil, false
	}
	return o.Plain, true
}

// HasPlain returns a boolean if a field has been set.
func (o *KafkaAuthentication) HasPlain() bool {
	if o != nil && !isNil(o.Plain) {
		return true
	}

	return false
}

// SetPlain gets a reference to the given HTTPAuthBasic and assigns it to the Plain field.
func (o *KafkaAuthentication) SetPlain(v HTTPAuthBasic) {
	o.Plain = &v
}

func (o KafkaAuthentication) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KafkaAuthentication) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !isNil(o.Plain) {
		toSerialize["plain"] = o.Plain
	}
	return toSerialize, nil
}

type NullableKafkaAuthentication struct {
	value *KafkaAuthentication
	isSet bool
}

func (v NullableKafkaAuthentication) Get() *KafkaAuthentication {
	return v.value
}

func (v *NullableKafkaAuthentication) Set(val *KafkaAuthentication) {
	v.value = val
	v.isSet = true
}

func (v NullableKafkaAuthentication) IsSet() bool {
	return v.isSet
}

func (v *NullableKafkaAuthentication) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKafkaAuthentication(val *KafkaAuthentication) *NullableKafkaAuthentication {
	return &NullableKafkaAuthentication{value: val, isSet: true}
}

func (v NullableKafkaAuthentication) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKafkaAuthentication) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
