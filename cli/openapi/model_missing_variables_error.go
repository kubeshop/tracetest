/*
TraceTest

OpenAPI definition for TraceTest endpoint and resources

API version: 0.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MissingVariablesError struct for MissingVariablesError
type MissingVariablesError struct {
	MissingVariables []MissingVariable `json:"missingVariables,omitempty"`
}

// NewMissingVariablesError instantiates a new MissingVariablesError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMissingVariablesError() *MissingVariablesError {
	this := MissingVariablesError{}
	return &this
}

// NewMissingVariablesErrorWithDefaults instantiates a new MissingVariablesError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMissingVariablesErrorWithDefaults() *MissingVariablesError {
	this := MissingVariablesError{}
	return &this
}

// GetMissingVariables returns the MissingVariables field value if set, zero value otherwise.
func (o *MissingVariablesError) GetMissingVariables() []MissingVariable {
	if o == nil || o.MissingVariables == nil {
		var ret []MissingVariable
		return ret
	}
	return o.MissingVariables
}

// GetMissingVariablesOk returns a tuple with the MissingVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MissingVariablesError) GetMissingVariablesOk() ([]MissingVariable, bool) {
	if o == nil || o.MissingVariables == nil {
		return nil, false
	}
	return o.MissingVariables, true
}

// HasMissingVariables returns a boolean if a field has been set.
func (o *MissingVariablesError) HasMissingVariables() bool {
	if o != nil && o.MissingVariables != nil {
		return true
	}

	return false
}

// SetMissingVariables gets a reference to the given []MissingVariable and assigns it to the MissingVariables field.
func (o *MissingVariablesError) SetMissingVariables(v []MissingVariable) {
	o.MissingVariables = v
}

func (o MissingVariablesError) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MissingVariables != nil {
		toSerialize["missingVariables"] = o.MissingVariables
	}
	return json.Marshal(toSerialize)
}

type NullableMissingVariablesError struct {
	value *MissingVariablesError
	isSet bool
}

func (v NullableMissingVariablesError) Get() *MissingVariablesError {
	return v.value
}

func (v *NullableMissingVariablesError) Set(val *MissingVariablesError) {
	v.value = val
	v.isSet = true
}

func (v NullableMissingVariablesError) IsSet() bool {
	return v.isSet
}

func (v *NullableMissingVariablesError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMissingVariablesError(val *MissingVariablesError) *NullableMissingVariablesError {
	return &NullableMissingVariablesError{value: val, isSet: true}
}

func (v NullableMissingVariablesError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMissingVariablesError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
