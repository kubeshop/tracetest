/*
TraceTest

OpenAPI definition for TraceTest endpoint and resources

API version: 0.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SearchSpansResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchSpansResult{}

// SearchSpansResult struct for SearchSpansResult
type SearchSpansResult struct {
	SpansIds []string `json:"spansIds,omitempty"`
}

// NewSearchSpansResult instantiates a new SearchSpansResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchSpansResult() *SearchSpansResult {
	this := SearchSpansResult{}
	return &this
}

// NewSearchSpansResultWithDefaults instantiates a new SearchSpansResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchSpansResultWithDefaults() *SearchSpansResult {
	this := SearchSpansResult{}
	return &this
}

// GetSpansIds returns the SpansIds field value if set, zero value otherwise.
func (o *SearchSpansResult) GetSpansIds() []string {
	if o == nil || isNil(o.SpansIds) {
		var ret []string
		return ret
	}
	return o.SpansIds
}

// GetSpansIdsOk returns a tuple with the SpansIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchSpansResult) GetSpansIdsOk() ([]string, bool) {
	if o == nil || isNil(o.SpansIds) {
		return nil, false
	}
	return o.SpansIds, true
}

// HasSpansIds returns a boolean if a field has been set.
func (o *SearchSpansResult) HasSpansIds() bool {
	if o != nil && !isNil(o.SpansIds) {
		return true
	}

	return false
}

// SetSpansIds gets a reference to the given []string and assigns it to the SpansIds field.
func (o *SearchSpansResult) SetSpansIds(v []string) {
	o.SpansIds = v
}

func (o SearchSpansResult) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchSpansResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.SpansIds) {
		toSerialize["spansIds"] = o.SpansIds
	}
	return toSerialize, nil
}

type NullableSearchSpansResult struct {
	value *SearchSpansResult
	isSet bool
}

func (v NullableSearchSpansResult) Get() *SearchSpansResult {
	return v.value
}

func (v *NullableSearchSpansResult) Set(val *SearchSpansResult) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchSpansResult) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchSpansResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchSpansResult(val *SearchSpansResult) *NullableSearchSpansResult {
	return &NullableSearchSpansResult{value: val, isSet: true}
}

func (v NullableSearchSpansResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchSpansResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
