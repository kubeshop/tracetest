/*
TraceTest

OpenAPI definition for TraceTest endpoint and resources

API version: 0.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the LinternResourceSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LinternResourceSpec{}

// LinternResourceSpec struct for LinternResourceSpec
type LinternResourceSpec struct {
	Enabled      *bool                   `json:"enabled,omitempty"`
	MinimumScore *int32                  `json:"minimumScore,omitempty"`
	Plugins      []LinternResourcePlugin `json:"plugins,omitempty"`
}

// NewLinternResourceSpec instantiates a new LinternResourceSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLinternResourceSpec() *LinternResourceSpec {
	this := LinternResourceSpec{}
	return &this
}

// NewLinternResourceSpecWithDefaults instantiates a new LinternResourceSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLinternResourceSpecWithDefaults() *LinternResourceSpec {
	this := LinternResourceSpec{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *LinternResourceSpec) GetEnabled() bool {
	if o == nil || isNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinternResourceSpec) GetEnabledOk() (*bool, bool) {
	if o == nil || isNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *LinternResourceSpec) HasEnabled() bool {
	if o != nil && !isNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *LinternResourceSpec) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetMinimumScore returns the MinimumScore field value if set, zero value otherwise.
func (o *LinternResourceSpec) GetMinimumScore() int32 {
	if o == nil || isNil(o.MinimumScore) {
		var ret int32
		return ret
	}
	return *o.MinimumScore
}

// GetMinimumScoreOk returns a tuple with the MinimumScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinternResourceSpec) GetMinimumScoreOk() (*int32, bool) {
	if o == nil || isNil(o.MinimumScore) {
		return nil, false
	}
	return o.MinimumScore, true
}

// HasMinimumScore returns a boolean if a field has been set.
func (o *LinternResourceSpec) HasMinimumScore() bool {
	if o != nil && !isNil(o.MinimumScore) {
		return true
	}

	return false
}

// SetMinimumScore gets a reference to the given int32 and assigns it to the MinimumScore field.
func (o *LinternResourceSpec) SetMinimumScore(v int32) {
	o.MinimumScore = &v
}

// GetPlugins returns the Plugins field value if set, zero value otherwise.
func (o *LinternResourceSpec) GetPlugins() []LinternResourcePlugin {
	if o == nil || isNil(o.Plugins) {
		var ret []LinternResourcePlugin
		return ret
	}
	return o.Plugins
}

// GetPluginsOk returns a tuple with the Plugins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinternResourceSpec) GetPluginsOk() ([]LinternResourcePlugin, bool) {
	if o == nil || isNil(o.Plugins) {
		return nil, false
	}
	return o.Plugins, true
}

// HasPlugins returns a boolean if a field has been set.
func (o *LinternResourceSpec) HasPlugins() bool {
	if o != nil && !isNil(o.Plugins) {
		return true
	}

	return false
}

// SetPlugins gets a reference to the given []LinternResourcePlugin and assigns it to the Plugins field.
func (o *LinternResourceSpec) SetPlugins(v []LinternResourcePlugin) {
	o.Plugins = v
}

func (o LinternResourceSpec) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LinternResourceSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !isNil(o.MinimumScore) {
		toSerialize["minimumScore"] = o.MinimumScore
	}
	if !isNil(o.Plugins) {
		toSerialize["plugins"] = o.Plugins
	}
	return toSerialize, nil
}

type NullableLinternResourceSpec struct {
	value *LinternResourceSpec
	isSet bool
}

func (v NullableLinternResourceSpec) Get() *LinternResourceSpec {
	return v.value
}

func (v *NullableLinternResourceSpec) Set(val *LinternResourceSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableLinternResourceSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableLinternResourceSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinternResourceSpec(val *LinternResourceSpec) *NullableLinternResourceSpec {
	return &NullableLinternResourceSpec{value: val, isSet: true}
}

func (v NullableLinternResourceSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinternResourceSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
