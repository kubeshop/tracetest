/*
TraceTest

OpenAPI definition for TraceTest endpoint and resources

API version: 0.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Test1 struct for Test1
type Test1 struct {
	Name           *string           `json:"name,omitempty"`
	Trigger        *TestTrigger      `json:"trigger,omitempty"`
	TestDefinition []TestDefinition1 `json:"testDefinition,omitempty"`
}

// NewTest1 instantiates a new Test1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTest1() *Test1 {
	this := Test1{}
	return &this
}

// NewTest1WithDefaults instantiates a new Test1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTest1WithDefaults() *Test1 {
	this := Test1{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Test1) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Test1) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Test1) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Test1) SetName(v string) {
	o.Name = &v
}

// GetTrigger returns the Trigger field value if set, zero value otherwise.
func (o *Test1) GetTrigger() TestTrigger {
	if o == nil || o.Trigger == nil {
		var ret TestTrigger
		return ret
	}
	return *o.Trigger
}

// GetTriggerOk returns a tuple with the Trigger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Test1) GetTriggerOk() (*TestTrigger, bool) {
	if o == nil || o.Trigger == nil {
		return nil, false
	}
	return o.Trigger, true
}

// HasTrigger returns a boolean if a field has been set.
func (o *Test1) HasTrigger() bool {
	if o != nil && o.Trigger != nil {
		return true
	}

	return false
}

// SetTrigger gets a reference to the given TestTrigger and assigns it to the Trigger field.
func (o *Test1) SetTrigger(v TestTrigger) {
	o.Trigger = &v
}

// GetTestDefinition returns the TestDefinition field value if set, zero value otherwise.
func (o *Test1) GetTestDefinition() []TestDefinition1 {
	if o == nil || o.TestDefinition == nil {
		var ret []TestDefinition1
		return ret
	}
	return o.TestDefinition
}

// GetTestDefinitionOk returns a tuple with the TestDefinition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Test1) GetTestDefinitionOk() ([]TestDefinition1, bool) {
	if o == nil || o.TestDefinition == nil {
		return nil, false
	}
	return o.TestDefinition, true
}

// HasTestDefinition returns a boolean if a field has been set.
func (o *Test1) HasTestDefinition() bool {
	if o != nil && o.TestDefinition != nil {
		return true
	}

	return false
}

// SetTestDefinition gets a reference to the given []TestDefinition1 and assigns it to the TestDefinition field.
func (o *Test1) SetTestDefinition(v []TestDefinition1) {
	o.TestDefinition = v
}

func (o Test1) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Trigger != nil {
		toSerialize["trigger"] = o.Trigger
	}
	if o.TestDefinition != nil {
		toSerialize["testDefinition"] = o.TestDefinition
	}
	return json.Marshal(toSerialize)
}

type NullableTest1 struct {
	value *Test1
	isSet bool
}

func (v NullableTest1) Get() *Test1 {
	return v.value
}

func (v *NullableTest1) Set(val *Test1) {
	v.value = val
	v.isSet = true
}

func (v NullableTest1) IsSet() bool {
	return v.isSet
}

func (v *NullableTest1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTest1(val *Test1) *NullableTest1 {
	return &NullableTest1{value: val, isSet: true}
}

func (v NullableTest1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTest1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
