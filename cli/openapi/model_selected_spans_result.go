/*
TraceTest

OpenAPI definition for TraceTest endpoint and resources

API version: 0.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SelectedSpansResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SelectedSpansResult{}

// SelectedSpansResult struct for SelectedSpansResult
type SelectedSpansResult struct {
	Selector *Selector `json:"selector,omitempty"`
	SpanIds  []string  `json:"spanIds,omitempty"`
}

// NewSelectedSpansResult instantiates a new SelectedSpansResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSelectedSpansResult() *SelectedSpansResult {
	this := SelectedSpansResult{}
	return &this
}

// NewSelectedSpansResultWithDefaults instantiates a new SelectedSpansResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSelectedSpansResultWithDefaults() *SelectedSpansResult {
	this := SelectedSpansResult{}
	return &this
}

// GetSelector returns the Selector field value if set, zero value otherwise.
func (o *SelectedSpansResult) GetSelector() Selector {
	if o == nil || isNil(o.Selector) {
		var ret Selector
		return ret
	}
	return *o.Selector
}

// GetSelectorOk returns a tuple with the Selector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SelectedSpansResult) GetSelectorOk() (*Selector, bool) {
	if o == nil || isNil(o.Selector) {
		return nil, false
	}
	return o.Selector, true
}

// HasSelector returns a boolean if a field has been set.
func (o *SelectedSpansResult) HasSelector() bool {
	if o != nil && !isNil(o.Selector) {
		return true
	}

	return false
}

// SetSelector gets a reference to the given Selector and assigns it to the Selector field.
func (o *SelectedSpansResult) SetSelector(v Selector) {
	o.Selector = &v
}

// GetSpanIds returns the SpanIds field value if set, zero value otherwise.
func (o *SelectedSpansResult) GetSpanIds() []string {
	if o == nil || isNil(o.SpanIds) {
		var ret []string
		return ret
	}
	return o.SpanIds
}

// GetSpanIdsOk returns a tuple with the SpanIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SelectedSpansResult) GetSpanIdsOk() ([]string, bool) {
	if o == nil || isNil(o.SpanIds) {
		return nil, false
	}
	return o.SpanIds, true
}

// HasSpanIds returns a boolean if a field has been set.
func (o *SelectedSpansResult) HasSpanIds() bool {
	if o != nil && !isNil(o.SpanIds) {
		return true
	}

	return false
}

// SetSpanIds gets a reference to the given []string and assigns it to the SpanIds field.
func (o *SelectedSpansResult) SetSpanIds(v []string) {
	o.SpanIds = v
}

func (o SelectedSpansResult) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SelectedSpansResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Selector) {
		toSerialize["selector"] = o.Selector
	}
	if !isNil(o.SpanIds) {
		toSerialize["spanIds"] = o.SpanIds
	}
	return toSerialize, nil
}

type NullableSelectedSpansResult struct {
	value *SelectedSpansResult
	isSet bool
}

func (v NullableSelectedSpansResult) Get() *SelectedSpansResult {
	return v.value
}

func (v *NullableSelectedSpansResult) Set(val *SelectedSpansResult) {
	v.value = val
	v.isSet = true
}

func (v NullableSelectedSpansResult) IsSet() bool {
	return v.isSet
}

func (v *NullableSelectedSpansResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSelectedSpansResult(val *SelectedSpansResult) *NullableSelectedSpansResult {
	return &NullableSelectedSpansResult{value: val, isSet: true}
}

func (v NullableSelectedSpansResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSelectedSpansResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
