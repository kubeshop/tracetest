/*
TraceTest

OpenAPI definition for TraceTest endpoint and resources

API version: 0.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ElasticSearch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ElasticSearch{}

// ElasticSearch struct for ElasticSearch
type ElasticSearch struct {
	Addresses          []string `json:"addresses,omitempty"`
	Username           *string  `json:"username,omitempty"`
	Password           *string  `json:"password,omitempty"`
	Index              *string  `json:"index,omitempty"`
	Certificate        *string  `json:"certificate,omitempty"`
	InsecureSkipVerify *bool    `json:"insecureSkipVerify,omitempty"`
}

// NewElasticSearch instantiates a new ElasticSearch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewElasticSearch() *ElasticSearch {
	this := ElasticSearch{}
	return &this
}

// NewElasticSearchWithDefaults instantiates a new ElasticSearch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewElasticSearchWithDefaults() *ElasticSearch {
	this := ElasticSearch{}
	return &this
}

// GetAddresses returns the Addresses field value if set, zero value otherwise.
func (o *ElasticSearch) GetAddresses() []string {
	if o == nil || isNil(o.Addresses) {
		var ret []string
		return ret
	}
	return o.Addresses
}

// GetAddressesOk returns a tuple with the Addresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElasticSearch) GetAddressesOk() ([]string, bool) {
	if o == nil || isNil(o.Addresses) {
		return nil, false
	}
	return o.Addresses, true
}

// HasAddresses returns a boolean if a field has been set.
func (o *ElasticSearch) HasAddresses() bool {
	if o != nil && !isNil(o.Addresses) {
		return true
	}

	return false
}

// SetAddresses gets a reference to the given []string and assigns it to the Addresses field.
func (o *ElasticSearch) SetAddresses(v []string) {
	o.Addresses = v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *ElasticSearch) GetUsername() string {
	if o == nil || isNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElasticSearch) GetUsernameOk() (*string, bool) {
	if o == nil || isNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *ElasticSearch) HasUsername() bool {
	if o != nil && !isNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *ElasticSearch) SetUsername(v string) {
	o.Username = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *ElasticSearch) GetPassword() string {
	if o == nil || isNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElasticSearch) GetPasswordOk() (*string, bool) {
	if o == nil || isNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *ElasticSearch) HasPassword() bool {
	if o != nil && !isNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *ElasticSearch) SetPassword(v string) {
	o.Password = &v
}

// GetIndex returns the Index field value if set, zero value otherwise.
func (o *ElasticSearch) GetIndex() string {
	if o == nil || isNil(o.Index) {
		var ret string
		return ret
	}
	return *o.Index
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElasticSearch) GetIndexOk() (*string, bool) {
	if o == nil || isNil(o.Index) {
		return nil, false
	}
	return o.Index, true
}

// HasIndex returns a boolean if a field has been set.
func (o *ElasticSearch) HasIndex() bool {
	if o != nil && !isNil(o.Index) {
		return true
	}

	return false
}

// SetIndex gets a reference to the given string and assigns it to the Index field.
func (o *ElasticSearch) SetIndex(v string) {
	o.Index = &v
}

// GetCertificate returns the Certificate field value if set, zero value otherwise.
func (o *ElasticSearch) GetCertificate() string {
	if o == nil || isNil(o.Certificate) {
		var ret string
		return ret
	}
	return *o.Certificate
}

// GetCertificateOk returns a tuple with the Certificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElasticSearch) GetCertificateOk() (*string, bool) {
	if o == nil || isNil(o.Certificate) {
		return nil, false
	}
	return o.Certificate, true
}

// HasCertificate returns a boolean if a field has been set.
func (o *ElasticSearch) HasCertificate() bool {
	if o != nil && !isNil(o.Certificate) {
		return true
	}

	return false
}

// SetCertificate gets a reference to the given string and assigns it to the Certificate field.
func (o *ElasticSearch) SetCertificate(v string) {
	o.Certificate = &v
}

// GetInsecureSkipVerify returns the InsecureSkipVerify field value if set, zero value otherwise.
func (o *ElasticSearch) GetInsecureSkipVerify() bool {
	if o == nil || isNil(o.InsecureSkipVerify) {
		var ret bool
		return ret
	}
	return *o.InsecureSkipVerify
}

// GetInsecureSkipVerifyOk returns a tuple with the InsecureSkipVerify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElasticSearch) GetInsecureSkipVerifyOk() (*bool, bool) {
	if o == nil || isNil(o.InsecureSkipVerify) {
		return nil, false
	}
	return o.InsecureSkipVerify, true
}

// HasInsecureSkipVerify returns a boolean if a field has been set.
func (o *ElasticSearch) HasInsecureSkipVerify() bool {
	if o != nil && !isNil(o.InsecureSkipVerify) {
		return true
	}

	return false
}

// SetInsecureSkipVerify gets a reference to the given bool and assigns it to the InsecureSkipVerify field.
func (o *ElasticSearch) SetInsecureSkipVerify(v bool) {
	o.InsecureSkipVerify = &v
}

func (o ElasticSearch) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ElasticSearch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Addresses) {
		toSerialize["addresses"] = o.Addresses
	}
	if !isNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !isNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !isNil(o.Index) {
		toSerialize["index"] = o.Index
	}
	if !isNil(o.Certificate) {
		toSerialize["certificate"] = o.Certificate
	}
	if !isNil(o.InsecureSkipVerify) {
		toSerialize["insecureSkipVerify"] = o.InsecureSkipVerify
	}
	return toSerialize, nil
}

type NullableElasticSearch struct {
	value *ElasticSearch
	isSet bool
}

func (v NullableElasticSearch) Get() *ElasticSearch {
	return v.value
}

func (v *NullableElasticSearch) Set(val *ElasticSearch) {
	v.value = val
	v.isSet = true
}

func (v NullableElasticSearch) IsSet() bool {
	return v.isSet
}

func (v *NullableElasticSearch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableElasticSearch(val *ElasticSearch) *NullableElasticSearch {
	return &NullableElasticSearch{value: val, isSet: true}
}

func (v NullableElasticSearch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableElasticSearch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
