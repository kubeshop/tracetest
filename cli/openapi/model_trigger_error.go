/*
TraceTest

OpenAPI definition for TraceTest endpoint and resources

API version: 0.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TriggerError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TriggerError{}

// TriggerError struct for TriggerError
type TriggerError struct {
	ConnectionError    *bool   `json:"connectionError,omitempty"`
	RunningOnContainer *bool   `json:"runningOnContainer,omitempty"`
	TargetsLocalhost   *bool   `json:"targetsLocalhost,omitempty"`
	Message            *string `json:"message,omitempty"`
}

// NewTriggerError instantiates a new TriggerError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTriggerError() *TriggerError {
	this := TriggerError{}
	return &this
}

// NewTriggerErrorWithDefaults instantiates a new TriggerError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTriggerErrorWithDefaults() *TriggerError {
	this := TriggerError{}
	return &this
}

// GetConnectionError returns the ConnectionError field value if set, zero value otherwise.
func (o *TriggerError) GetConnectionError() bool {
	if o == nil || isNil(o.ConnectionError) {
		var ret bool
		return ret
	}
	return *o.ConnectionError
}

// GetConnectionErrorOk returns a tuple with the ConnectionError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TriggerError) GetConnectionErrorOk() (*bool, bool) {
	if o == nil || isNil(o.ConnectionError) {
		return nil, false
	}
	return o.ConnectionError, true
}

// HasConnectionError returns a boolean if a field has been set.
func (o *TriggerError) HasConnectionError() bool {
	if o != nil && !isNil(o.ConnectionError) {
		return true
	}

	return false
}

// SetConnectionError gets a reference to the given bool and assigns it to the ConnectionError field.
func (o *TriggerError) SetConnectionError(v bool) {
	o.ConnectionError = &v
}

// GetRunningOnContainer returns the RunningOnContainer field value if set, zero value otherwise.
func (o *TriggerError) GetRunningOnContainer() bool {
	if o == nil || isNil(o.RunningOnContainer) {
		var ret bool
		return ret
	}
	return *o.RunningOnContainer
}

// GetRunningOnContainerOk returns a tuple with the RunningOnContainer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TriggerError) GetRunningOnContainerOk() (*bool, bool) {
	if o == nil || isNil(o.RunningOnContainer) {
		return nil, false
	}
	return o.RunningOnContainer, true
}

// HasRunningOnContainer returns a boolean if a field has been set.
func (o *TriggerError) HasRunningOnContainer() bool {
	if o != nil && !isNil(o.RunningOnContainer) {
		return true
	}

	return false
}

// SetRunningOnContainer gets a reference to the given bool and assigns it to the RunningOnContainer field.
func (o *TriggerError) SetRunningOnContainer(v bool) {
	o.RunningOnContainer = &v
}

// GetTargetsLocalhost returns the TargetsLocalhost field value if set, zero value otherwise.
func (o *TriggerError) GetTargetsLocalhost() bool {
	if o == nil || isNil(o.TargetsLocalhost) {
		var ret bool
		return ret
	}
	return *o.TargetsLocalhost
}

// GetTargetsLocalhostOk returns a tuple with the TargetsLocalhost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TriggerError) GetTargetsLocalhostOk() (*bool, bool) {
	if o == nil || isNil(o.TargetsLocalhost) {
		return nil, false
	}
	return o.TargetsLocalhost, true
}

// HasTargetsLocalhost returns a boolean if a field has been set.
func (o *TriggerError) HasTargetsLocalhost() bool {
	if o != nil && !isNil(o.TargetsLocalhost) {
		return true
	}

	return false
}

// SetTargetsLocalhost gets a reference to the given bool and assigns it to the TargetsLocalhost field.
func (o *TriggerError) SetTargetsLocalhost(v bool) {
	o.TargetsLocalhost = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *TriggerError) GetMessage() string {
	if o == nil || isNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TriggerError) GetMessageOk() (*string, bool) {
	if o == nil || isNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *TriggerError) HasMessage() bool {
	if o != nil && !isNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *TriggerError) SetMessage(v string) {
	o.Message = &v
}

func (o TriggerError) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TriggerError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ConnectionError) {
		toSerialize["connectionError"] = o.ConnectionError
	}
	if !isNil(o.RunningOnContainer) {
		toSerialize["runningOnContainer"] = o.RunningOnContainer
	}
	if !isNil(o.TargetsLocalhost) {
		toSerialize["targetsLocalhost"] = o.TargetsLocalhost
	}
	if !isNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	return toSerialize, nil
}

type NullableTriggerError struct {
	value *TriggerError
	isSet bool
}

func (v NullableTriggerError) Get() *TriggerError {
	return v.value
}

func (v *NullableTriggerError) Set(val *TriggerError) {
	v.value = val
	v.isSet = true
}

func (v NullableTriggerError) IsSet() bool {
	return v.isSet
}

func (v *NullableTriggerError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTriggerError(val *TriggerError) *NullableTriggerError {
	return &NullableTriggerError{value: val, isSet: true}
}

func (v NullableTriggerError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTriggerError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
