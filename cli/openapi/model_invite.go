/*
TraceTest

OpenAPI definition for TraceTest endpoint and resources

API version: 0.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the Invite type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Invite{}

// Invite struct for Invite
type Invite struct {
	Id           string              `json:"id"`
	Role         Role                `json:"role"`
	To           string              `json:"to"`
	CreatedAt    *time.Time          `json:"createdAt,omitempty"`
	SentAt       *time.Time          `json:"sentAt,omitempty"`
	Type         *string             `json:"type,omitempty"`
	Status       *string             `json:"status,omitempty"`
	ReturnTo     *string             `json:"returnTo,omitempty"`
	Environments []InviteEnvironment `json:"environments,omitempty"`
}

// NewInvite instantiates a new Invite object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvite(id string, role Role, to string) *Invite {
	this := Invite{}
	this.Id = id
	this.Role = role
	this.To = to
	var type_ string = "email"
	this.Type = &type_
	var status string = "pending"
	this.Status = &status
	return &this
}

// NewInviteWithDefaults instantiates a new Invite object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInviteWithDefaults() *Invite {
	this := Invite{}
	var type_ string = "email"
	this.Type = &type_
	var status string = "pending"
	this.Status = &status
	return &this
}

// GetId returns the Id field value
func (o *Invite) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Invite) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Invite) SetId(v string) {
	o.Id = v
}

// GetRole returns the Role field value
func (o *Invite) GetRole() Role {
	if o == nil {
		var ret Role
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *Invite) GetRoleOk() (*Role, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *Invite) SetRole(v Role) {
	o.Role = v
}

// GetTo returns the To field value
func (o *Invite) GetTo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.To
}

// GetToOk returns a tuple with the To field value
// and a boolean to check if the value has been set.
func (o *Invite) GetToOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.To, true
}

// SetTo sets field value
func (o *Invite) SetTo(v string) {
	o.To = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Invite) GetCreatedAt() time.Time {
	if o == nil || isNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invite) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || isNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Invite) HasCreatedAt() bool {
	if o != nil && !isNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *Invite) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetSentAt returns the SentAt field value if set, zero value otherwise.
func (o *Invite) GetSentAt() time.Time {
	if o == nil || isNil(o.SentAt) {
		var ret time.Time
		return ret
	}
	return *o.SentAt
}

// GetSentAtOk returns a tuple with the SentAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invite) GetSentAtOk() (*time.Time, bool) {
	if o == nil || isNil(o.SentAt) {
		return nil, false
	}
	return o.SentAt, true
}

// HasSentAt returns a boolean if a field has been set.
func (o *Invite) HasSentAt() bool {
	if o != nil && !isNil(o.SentAt) {
		return true
	}

	return false
}

// SetSentAt gets a reference to the given time.Time and assigns it to the SentAt field.
func (o *Invite) SetSentAt(v time.Time) {
	o.SentAt = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Invite) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invite) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Invite) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Invite) SetType(v string) {
	o.Type = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Invite) GetStatus() string {
	if o == nil || isNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invite) GetStatusOk() (*string, bool) {
	if o == nil || isNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Invite) HasStatus() bool {
	if o != nil && !isNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Invite) SetStatus(v string) {
	o.Status = &v
}

// GetReturnTo returns the ReturnTo field value if set, zero value otherwise.
func (o *Invite) GetReturnTo() string {
	if o == nil || isNil(o.ReturnTo) {
		var ret string
		return ret
	}
	return *o.ReturnTo
}

// GetReturnToOk returns a tuple with the ReturnTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invite) GetReturnToOk() (*string, bool) {
	if o == nil || isNil(o.ReturnTo) {
		return nil, false
	}
	return o.ReturnTo, true
}

// HasReturnTo returns a boolean if a field has been set.
func (o *Invite) HasReturnTo() bool {
	if o != nil && !isNil(o.ReturnTo) {
		return true
	}

	return false
}

// SetReturnTo gets a reference to the given string and assigns it to the ReturnTo field.
func (o *Invite) SetReturnTo(v string) {
	o.ReturnTo = &v
}

// GetEnvironments returns the Environments field value if set, zero value otherwise.
func (o *Invite) GetEnvironments() []InviteEnvironment {
	if o == nil || isNil(o.Environments) {
		var ret []InviteEnvironment
		return ret
	}
	return o.Environments
}

// GetEnvironmentsOk returns a tuple with the Environments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invite) GetEnvironmentsOk() ([]InviteEnvironment, bool) {
	if o == nil || isNil(o.Environments) {
		return nil, false
	}
	return o.Environments, true
}

// HasEnvironments returns a boolean if a field has been set.
func (o *Invite) HasEnvironments() bool {
	if o != nil && !isNil(o.Environments) {
		return true
	}

	return false
}

// SetEnvironments gets a reference to the given []InviteEnvironment and assigns it to the Environments field.
func (o *Invite) SetEnvironments(v []InviteEnvironment) {
	o.Environments = v
}

func (o Invite) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Invite) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["role"] = o.Role
	toSerialize["to"] = o.To
	if !isNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !isNil(o.SentAt) {
		toSerialize["sentAt"] = o.SentAt
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !isNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !isNil(o.ReturnTo) {
		toSerialize["returnTo"] = o.ReturnTo
	}
	if !isNil(o.Environments) {
		toSerialize["environments"] = o.Environments
	}
	return toSerialize, nil
}

type NullableInvite struct {
	value *Invite
	isSet bool
}

func (v NullableInvite) Get() *Invite {
	return v.value
}

func (v *NullableInvite) Set(val *Invite) {
	v.value = val
	v.isSet = true
}

func (v NullableInvite) IsSet() bool {
	return v.isSet
}

func (v *NullableInvite) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvite(val *Invite) *NullableInvite {
	return &NullableInvite{value: val, isSet: true}
}

func (v NullableInvite) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvite) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
