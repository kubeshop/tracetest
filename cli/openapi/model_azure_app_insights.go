/*
TraceTest

OpenAPI definition for TraceTest endpoint and resources

API version: 0.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AzureAppInsights type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AzureAppInsights{}

// AzureAppInsights struct for AzureAppInsights
type AzureAppInsights struct {
	UseAzureActiveDirectoryAuth *bool                     `json:"useAzureActiveDirectoryAuth,omitempty"`
	AccessToken                 *string                   `json:"accessToken,omitempty"`
	ConnectionType              *SupportedConnectionTypes `json:"connectionType,omitempty"`
	ResourceArmId               *string                   `json:"resourceArmId,omitempty"`
}

// NewAzureAppInsights instantiates a new AzureAppInsights object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAzureAppInsights() *AzureAppInsights {
	this := AzureAppInsights{}
	return &this
}

// NewAzureAppInsightsWithDefaults instantiates a new AzureAppInsights object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzureAppInsightsWithDefaults() *AzureAppInsights {
	this := AzureAppInsights{}
	return &this
}

// GetUseAzureActiveDirectoryAuth returns the UseAzureActiveDirectoryAuth field value if set, zero value otherwise.
func (o *AzureAppInsights) GetUseAzureActiveDirectoryAuth() bool {
	if o == nil || isNil(o.UseAzureActiveDirectoryAuth) {
		var ret bool
		return ret
	}
	return *o.UseAzureActiveDirectoryAuth
}

// GetUseAzureActiveDirectoryAuthOk returns a tuple with the UseAzureActiveDirectoryAuth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureAppInsights) GetUseAzureActiveDirectoryAuthOk() (*bool, bool) {
	if o == nil || isNil(o.UseAzureActiveDirectoryAuth) {
		return nil, false
	}
	return o.UseAzureActiveDirectoryAuth, true
}

// HasUseAzureActiveDirectoryAuth returns a boolean if a field has been set.
func (o *AzureAppInsights) HasUseAzureActiveDirectoryAuth() bool {
	if o != nil && !isNil(o.UseAzureActiveDirectoryAuth) {
		return true
	}

	return false
}

// SetUseAzureActiveDirectoryAuth gets a reference to the given bool and assigns it to the UseAzureActiveDirectoryAuth field.
func (o *AzureAppInsights) SetUseAzureActiveDirectoryAuth(v bool) {
	o.UseAzureActiveDirectoryAuth = &v
}

// GetAccessToken returns the AccessToken field value if set, zero value otherwise.
func (o *AzureAppInsights) GetAccessToken() string {
	if o == nil || isNil(o.AccessToken) {
		var ret string
		return ret
	}
	return *o.AccessToken
}

// GetAccessTokenOk returns a tuple with the AccessToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureAppInsights) GetAccessTokenOk() (*string, bool) {
	if o == nil || isNil(o.AccessToken) {
		return nil, false
	}
	return o.AccessToken, true
}

// HasAccessToken returns a boolean if a field has been set.
func (o *AzureAppInsights) HasAccessToken() bool {
	if o != nil && !isNil(o.AccessToken) {
		return true
	}

	return false
}

// SetAccessToken gets a reference to the given string and assigns it to the AccessToken field.
func (o *AzureAppInsights) SetAccessToken(v string) {
	o.AccessToken = &v
}

// GetConnectionType returns the ConnectionType field value if set, zero value otherwise.
func (o *AzureAppInsights) GetConnectionType() SupportedConnectionTypes {
	if o == nil || isNil(o.ConnectionType) {
		var ret SupportedConnectionTypes
		return ret
	}
	return *o.ConnectionType
}

// GetConnectionTypeOk returns a tuple with the ConnectionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureAppInsights) GetConnectionTypeOk() (*SupportedConnectionTypes, bool) {
	if o == nil || isNil(o.ConnectionType) {
		return nil, false
	}
	return o.ConnectionType, true
}

// HasConnectionType returns a boolean if a field has been set.
func (o *AzureAppInsights) HasConnectionType() bool {
	if o != nil && !isNil(o.ConnectionType) {
		return true
	}

	return false
}

// SetConnectionType gets a reference to the given SupportedConnectionTypes and assigns it to the ConnectionType field.
func (o *AzureAppInsights) SetConnectionType(v SupportedConnectionTypes) {
	o.ConnectionType = &v
}

// GetResourceArmId returns the ResourceArmId field value if set, zero value otherwise.
func (o *AzureAppInsights) GetResourceArmId() string {
	if o == nil || isNil(o.ResourceArmId) {
		var ret string
		return ret
	}
	return *o.ResourceArmId
}

// GetResourceArmIdOk returns a tuple with the ResourceArmId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureAppInsights) GetResourceArmIdOk() (*string, bool) {
	if o == nil || isNil(o.ResourceArmId) {
		return nil, false
	}
	return o.ResourceArmId, true
}

// HasResourceArmId returns a boolean if a field has been set.
func (o *AzureAppInsights) HasResourceArmId() bool {
	if o != nil && !isNil(o.ResourceArmId) {
		return true
	}

	return false
}

// SetResourceArmId gets a reference to the given string and assigns it to the ResourceArmId field.
func (o *AzureAppInsights) SetResourceArmId(v string) {
	o.ResourceArmId = &v
}

func (o AzureAppInsights) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AzureAppInsights) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.UseAzureActiveDirectoryAuth) {
		toSerialize["useAzureActiveDirectoryAuth"] = o.UseAzureActiveDirectoryAuth
	}
	if !isNil(o.AccessToken) {
		toSerialize["accessToken"] = o.AccessToken
	}
	if !isNil(o.ConnectionType) {
		toSerialize["connectionType"] = o.ConnectionType
	}
	if !isNil(o.ResourceArmId) {
		toSerialize["resourceArmId"] = o.ResourceArmId
	}
	return toSerialize, nil
}

type NullableAzureAppInsights struct {
	value *AzureAppInsights
	isSet bool
}

func (v NullableAzureAppInsights) Get() *AzureAppInsights {
	return v.value
}

func (v *NullableAzureAppInsights) Set(val *AzureAppInsights) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureAppInsights) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureAppInsights) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureAppInsights(val *AzureAppInsights) *NullableAzureAppInsights {
	return &NullableAzureAppInsights{value: val, isSet: true}
}

func (v NullableAzureAppInsights) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureAppInsights) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
