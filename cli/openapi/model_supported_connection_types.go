/*
TraceTest

OpenAPI definition for TraceTest endpoint and resources

API version: 0.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// SupportedConnectionTypes the model 'SupportedConnectionTypes'
type SupportedConnectionTypes string

// List of SupportedConnectionTypes
const (
	DIRECT    SupportedConnectionTypes = "direct"
	COLLECTOR SupportedConnectionTypes = "collector"
)

// All allowed values of SupportedConnectionTypes enum
var AllowedSupportedConnectionTypesEnumValues = []SupportedConnectionTypes{
	"direct",
	"collector",
}

func (v *SupportedConnectionTypes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SupportedConnectionTypes(value)
	for _, existing := range AllowedSupportedConnectionTypesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SupportedConnectionTypes", value)
}

// NewSupportedConnectionTypesFromValue returns a pointer to a valid SupportedConnectionTypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSupportedConnectionTypesFromValue(v string) (*SupportedConnectionTypes, error) {
	ev := SupportedConnectionTypes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SupportedConnectionTypes: valid values are %v", v, AllowedSupportedConnectionTypesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SupportedConnectionTypes) IsValid() bool {
	for _, existing := range AllowedSupportedConnectionTypesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SupportedConnectionTypes value
func (v SupportedConnectionTypes) Ptr() *SupportedConnectionTypes {
	return &v
}

type NullableSupportedConnectionTypes struct {
	value *SupportedConnectionTypes
	isSet bool
}

func (v NullableSupportedConnectionTypes) Get() *SupportedConnectionTypes {
	return v.value
}

func (v *NullableSupportedConnectionTypes) Set(val *SupportedConnectionTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableSupportedConnectionTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableSupportedConnectionTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSupportedConnectionTypes(val *SupportedConnectionTypes) *NullableSupportedConnectionTypes {
	return &NullableSupportedConnectionTypes{value: val, isSet: true}
}

func (v NullableSupportedConnectionTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSupportedConnectionTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
