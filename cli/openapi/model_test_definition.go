/*
TraceTest

OpenAPI definition for TraceTest endpoint and resources

API version: 0.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TestDefinition struct for TestDefinition
type TestDefinition struct {
	Definitions []TestDefinitionDefinitions `json:"definitions,omitempty"`
}

// NewTestDefinition instantiates a new TestDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestDefinition() *TestDefinition {
	this := TestDefinition{}
	return &this
}

// NewTestDefinitionWithDefaults instantiates a new TestDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestDefinitionWithDefaults() *TestDefinition {
	this := TestDefinition{}
	return &this
}

// GetDefinitions returns the Definitions field value if set, zero value otherwise.
func (o *TestDefinition) GetDefinitions() []TestDefinitionDefinitions {
	if o == nil || o.Definitions == nil {
		var ret []TestDefinitionDefinitions
		return ret
	}
	return o.Definitions
}

// GetDefinitionsOk returns a tuple with the Definitions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestDefinition) GetDefinitionsOk() ([]TestDefinitionDefinitions, bool) {
	if o == nil || o.Definitions == nil {
		return nil, false
	}
	return o.Definitions, true
}

// HasDefinitions returns a boolean if a field has been set.
func (o *TestDefinition) HasDefinitions() bool {
	if o != nil && o.Definitions != nil {
		return true
	}

	return false
}

// SetDefinitions gets a reference to the given []TestDefinitionDefinitions and assigns it to the Definitions field.
func (o *TestDefinition) SetDefinitions(v []TestDefinitionDefinitions) {
	o.Definitions = v
}

func (o TestDefinition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Definitions != nil {
		toSerialize["definitions"] = o.Definitions
	}
	return json.Marshal(toSerialize)
}

type NullableTestDefinition struct {
	value *TestDefinition
	isSet bool
}

func (v NullableTestDefinition) Get() *TestDefinition {
	return v.value
}

func (v *NullableTestDefinition) Set(val *TestDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableTestDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableTestDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestDefinition(val *TestDefinition) *NullableTestDefinition {
	return &NullableTestDefinition{value: val, isSet: true}
}

func (v NullableTestDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
