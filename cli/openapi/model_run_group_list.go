/*
TraceTest

OpenAPI definition for TraceTest endpoint and resources

API version: 0.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RunGroupList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RunGroupList{}

// RunGroupList struct for RunGroupList
type RunGroupList struct {
	Items []RunGroup `json:"items,omitempty"`
}

// NewRunGroupList instantiates a new RunGroupList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRunGroupList() *RunGroupList {
	this := RunGroupList{}
	return &this
}

// NewRunGroupListWithDefaults instantiates a new RunGroupList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunGroupListWithDefaults() *RunGroupList {
	this := RunGroupList{}
	return &this
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *RunGroupList) GetItems() []RunGroup {
	if o == nil || isNil(o.Items) {
		var ret []RunGroup
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunGroupList) GetItemsOk() ([]RunGroup, bool) {
	if o == nil || isNil(o.Items) {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *RunGroupList) HasItems() bool {
	if o != nil && !isNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []RunGroup and assigns it to the Items field.
func (o *RunGroupList) SetItems(v []RunGroup) {
	o.Items = v
}

func (o RunGroupList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RunGroupList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Items) {
		toSerialize["items"] = o.Items
	}
	return toSerialize, nil
}

type NullableRunGroupList struct {
	value *RunGroupList
	isSet bool
}

func (v NullableRunGroupList) Get() *RunGroupList {
	return v.value
}

func (v *NullableRunGroupList) Set(val *RunGroupList) {
	v.value = val
	v.isSet = true
}

func (v NullableRunGroupList) IsSet() bool {
	return v.isSet
}

func (v *NullableRunGroupList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunGroupList(val *RunGroupList) *NullableRunGroupList {
	return &NullableRunGroupList{value: val, isSet: true}
}

func (v NullableRunGroupList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunGroupList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
