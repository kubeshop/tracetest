/*
TraceTest

OpenAPI definition for TraceTest endpoint and resources

API version: 0.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TestRunOutputs struct for TestRunOutputs
type TestRunOutputs struct {
	Name   *string `json:"name,omitempty"`
	SpanId *string `json:"spanId,omitempty"`
	Value  *string `json:"value,omitempty"`
}

// NewTestRunOutputs instantiates a new TestRunOutputs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestRunOutputs() *TestRunOutputs {
	this := TestRunOutputs{}
	return &this
}

// NewTestRunOutputsWithDefaults instantiates a new TestRunOutputs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestRunOutputsWithDefaults() *TestRunOutputs {
	this := TestRunOutputs{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TestRunOutputs) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestRunOutputs) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TestRunOutputs) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TestRunOutputs) SetName(v string) {
	o.Name = &v
}

// GetSpanId returns the SpanId field value if set, zero value otherwise.
func (o *TestRunOutputs) GetSpanId() string {
	if o == nil || o.SpanId == nil {
		var ret string
		return ret
	}
	return *o.SpanId
}

// GetSpanIdOk returns a tuple with the SpanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestRunOutputs) GetSpanIdOk() (*string, bool) {
	if o == nil || o.SpanId == nil {
		return nil, false
	}
	return o.SpanId, true
}

// HasSpanId returns a boolean if a field has been set.
func (o *TestRunOutputs) HasSpanId() bool {
	if o != nil && o.SpanId != nil {
		return true
	}

	return false
}

// SetSpanId gets a reference to the given string and assigns it to the SpanId field.
func (o *TestRunOutputs) SetSpanId(v string) {
	o.SpanId = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *TestRunOutputs) GetValue() string {
	if o == nil || o.Value == nil {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestRunOutputs) GetValueOk() (*string, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *TestRunOutputs) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *TestRunOutputs) SetValue(v string) {
	o.Value = &v
}

func (o TestRunOutputs) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.SpanId != nil {
		toSerialize["spanId"] = o.SpanId
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableTestRunOutputs struct {
	value *TestRunOutputs
	isSet bool
}

func (v NullableTestRunOutputs) Get() *TestRunOutputs {
	return v.value
}

func (v *NullableTestRunOutputs) Set(val *TestRunOutputs) {
	v.value = val
	v.isSet = true
}

func (v NullableTestRunOutputs) IsSet() bool {
	return v.isSet
}

func (v *NullableTestRunOutputs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestRunOutputs(val *TestRunOutputs) *NullableTestRunOutputs {
	return &NullableTestRunOutputs{value: val, isSet: true}
}

func (v NullableTestRunOutputs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestRunOutputs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
