/*
TraceTest

OpenAPI definition for TraceTest endpoint and resources

API version: 0.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RunGroups type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RunGroups{}

// RunGroups struct for RunGroups
type RunGroups struct {
	Items []RunGroup `json:"items,omitempty"`
}

// NewRunGroups instantiates a new RunGroups object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRunGroups() *RunGroups {
	this := RunGroups{}
	return &this
}

// NewRunGroupsWithDefaults instantiates a new RunGroups object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunGroupsWithDefaults() *RunGroups {
	this := RunGroups{}
	return &this
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *RunGroups) GetItems() []RunGroup {
	if o == nil || isNil(o.Items) {
		var ret []RunGroup
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunGroups) GetItemsOk() ([]RunGroup, bool) {
	if o == nil || isNil(o.Items) {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *RunGroups) HasItems() bool {
	if o != nil && !isNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []RunGroup and assigns it to the Items field.
func (o *RunGroups) SetItems(v []RunGroup) {
	o.Items = v
}

func (o RunGroups) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RunGroups) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Items) {
		toSerialize["items"] = o.Items
	}
	return toSerialize, nil
}

type NullableRunGroups struct {
	value *RunGroups
	isSet bool
}

func (v NullableRunGroups) Get() *RunGroups {
	return v.value
}

func (v *NullableRunGroups) Set(val *RunGroups) {
	v.value = val
	v.isSet = true
}

func (v NullableRunGroups) IsSet() bool {
	return v.isSet
}

func (v *NullableRunGroups) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunGroups(val *RunGroups) *NullableRunGroups {
	return &NullableRunGroups{value: val, isSet: true}
}

func (v NullableRunGroups) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunGroups) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
