/*
TraceTest

OpenAPI definition for TraceTest endpoint and resources

API version: 0.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the LinternResourcePlugin type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LinternResourcePlugin{}

// LinternResourcePlugin struct for LinternResourcePlugin
type LinternResourcePlugin struct {
	Name     *string `json:"name,omitempty"`
	Enabled  *bool   `json:"enabled,omitempty"`
	Required *bool   `json:"required,omitempty"`
}

// NewLinternResourcePlugin instantiates a new LinternResourcePlugin object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLinternResourcePlugin() *LinternResourcePlugin {
	this := LinternResourcePlugin{}
	return &this
}

// NewLinternResourcePluginWithDefaults instantiates a new LinternResourcePlugin object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLinternResourcePluginWithDefaults() *LinternResourcePlugin {
	this := LinternResourcePlugin{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *LinternResourcePlugin) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinternResourcePlugin) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *LinternResourcePlugin) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *LinternResourcePlugin) SetName(v string) {
	o.Name = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *LinternResourcePlugin) GetEnabled() bool {
	if o == nil || isNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinternResourcePlugin) GetEnabledOk() (*bool, bool) {
	if o == nil || isNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *LinternResourcePlugin) HasEnabled() bool {
	if o != nil && !isNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *LinternResourcePlugin) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *LinternResourcePlugin) GetRequired() bool {
	if o == nil || isNil(o.Required) {
		var ret bool
		return ret
	}
	return *o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinternResourcePlugin) GetRequiredOk() (*bool, bool) {
	if o == nil || isNil(o.Required) {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *LinternResourcePlugin) HasRequired() bool {
	if o != nil && !isNil(o.Required) {
		return true
	}

	return false
}

// SetRequired gets a reference to the given bool and assigns it to the Required field.
func (o *LinternResourcePlugin) SetRequired(v bool) {
	o.Required = &v
}

func (o LinternResourcePlugin) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LinternResourcePlugin) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !isNil(o.Required) {
		toSerialize["required"] = o.Required
	}
	return toSerialize, nil
}

type NullableLinternResourcePlugin struct {
	value *LinternResourcePlugin
	isSet bool
}

func (v NullableLinternResourcePlugin) Get() *LinternResourcePlugin {
	return v.value
}

func (v *NullableLinternResourcePlugin) Set(val *LinternResourcePlugin) {
	v.value = val
	v.isSet = true
}

func (v NullableLinternResourcePlugin) IsSet() bool {
	return v.isSet
}

func (v *NullableLinternResourcePlugin) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinternResourcePlugin(val *LinternResourcePlugin) *NullableLinternResourcePlugin {
	return &NullableLinternResourcePlugin{value: val, isSet: true}
}

func (v NullableLinternResourcePlugin) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinternResourcePlugin) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
