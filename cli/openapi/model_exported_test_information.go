/*
TraceTest

OpenAPI definition for TraceTest endpoint and resources

API version: 0.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ExportedTestInformation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExportedTestInformation{}

// ExportedTestInformation struct for ExportedTestInformation
type ExportedTestInformation struct {
	Test Test    `json:"test"`
	Run  TestRun `json:"run"`
}

// NewExportedTestInformation instantiates a new ExportedTestInformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExportedTestInformation(test Test, run TestRun) *ExportedTestInformation {
	this := ExportedTestInformation{}
	this.Test = test
	this.Run = run
	return &this
}

// NewExportedTestInformationWithDefaults instantiates a new ExportedTestInformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExportedTestInformationWithDefaults() *ExportedTestInformation {
	this := ExportedTestInformation{}
	return &this
}

// GetTest returns the Test field value
func (o *ExportedTestInformation) GetTest() Test {
	if o == nil {
		var ret Test
		return ret
	}

	return o.Test
}

// GetTestOk returns a tuple with the Test field value
// and a boolean to check if the value has been set.
func (o *ExportedTestInformation) GetTestOk() (*Test, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Test, true
}

// SetTest sets field value
func (o *ExportedTestInformation) SetTest(v Test) {
	o.Test = v
}

// GetRun returns the Run field value
func (o *ExportedTestInformation) GetRun() TestRun {
	if o == nil {
		var ret TestRun
		return ret
	}

	return o.Run
}

// GetRunOk returns a tuple with the Run field value
// and a boolean to check if the value has been set.
func (o *ExportedTestInformation) GetRunOk() (*TestRun, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Run, true
}

// SetRun sets field value
func (o *ExportedTestInformation) SetRun(v TestRun) {
	o.Run = v
}

func (o ExportedTestInformation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExportedTestInformation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["test"] = o.Test
	toSerialize["run"] = o.Run
	return toSerialize, nil
}

type NullableExportedTestInformation struct {
	value *ExportedTestInformation
	isSet bool
}

func (v NullableExportedTestInformation) Get() *ExportedTestInformation {
	return v.value
}

func (v *NullableExportedTestInformation) Set(val *ExportedTestInformation) {
	v.value = val
	v.isSet = true
}

func (v NullableExportedTestInformation) IsSet() bool {
	return v.isSet
}

func (v *NullableExportedTestInformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportedTestInformation(val *ExportedTestInformation) *NullableExportedTestInformation {
	return &NullableExportedTestInformation{value: val, isSet: true}
}

func (v NullableExportedTestInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportedTestInformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
