/*
TraceTest

OpenAPI definition for TraceTest endpoint and resources

API version: 0.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AssertionResultsResultsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AssertionResultsResultsInner{}

// AssertionResultsResultsInner struct for AssertionResultsResultsInner
type AssertionResultsResultsInner struct {
	Selector *Selector         `json:"selector,omitempty"`
	Results  []AssertionResult `json:"results,omitempty"`
}

// NewAssertionResultsResultsInner instantiates a new AssertionResultsResultsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssertionResultsResultsInner() *AssertionResultsResultsInner {
	this := AssertionResultsResultsInner{}
	return &this
}

// NewAssertionResultsResultsInnerWithDefaults instantiates a new AssertionResultsResultsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssertionResultsResultsInnerWithDefaults() *AssertionResultsResultsInner {
	this := AssertionResultsResultsInner{}
	return &this
}

// GetSelector returns the Selector field value if set, zero value otherwise.
func (o *AssertionResultsResultsInner) GetSelector() Selector {
	if o == nil || isNil(o.Selector) {
		var ret Selector
		return ret
	}
	return *o.Selector
}

// GetSelectorOk returns a tuple with the Selector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssertionResultsResultsInner) GetSelectorOk() (*Selector, bool) {
	if o == nil || isNil(o.Selector) {
		return nil, false
	}
	return o.Selector, true
}

// HasSelector returns a boolean if a field has been set.
func (o *AssertionResultsResultsInner) HasSelector() bool {
	if o != nil && !isNil(o.Selector) {
		return true
	}

	return false
}

// SetSelector gets a reference to the given Selector and assigns it to the Selector field.
func (o *AssertionResultsResultsInner) SetSelector(v Selector) {
	o.Selector = &v
}

// GetResults returns the Results field value if set, zero value otherwise.
func (o *AssertionResultsResultsInner) GetResults() []AssertionResult {
	if o == nil || isNil(o.Results) {
		var ret []AssertionResult
		return ret
	}
	return o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssertionResultsResultsInner) GetResultsOk() ([]AssertionResult, bool) {
	if o == nil || isNil(o.Results) {
		return nil, false
	}
	return o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *AssertionResultsResultsInner) HasResults() bool {
	if o != nil && !isNil(o.Results) {
		return true
	}

	return false
}

// SetResults gets a reference to the given []AssertionResult and assigns it to the Results field.
func (o *AssertionResultsResultsInner) SetResults(v []AssertionResult) {
	o.Results = v
}

func (o AssertionResultsResultsInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AssertionResultsResultsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Selector) {
		toSerialize["selector"] = o.Selector
	}
	if !isNil(o.Results) {
		toSerialize["results"] = o.Results
	}
	return toSerialize, nil
}

type NullableAssertionResultsResultsInner struct {
	value *AssertionResultsResultsInner
	isSet bool
}

func (v NullableAssertionResultsResultsInner) Get() *AssertionResultsResultsInner {
	return v.value
}

func (v *NullableAssertionResultsResultsInner) Set(val *AssertionResultsResultsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableAssertionResultsResultsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableAssertionResultsResultsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssertionResultsResultsInner(val *AssertionResultsResultsInner) *NullableAssertionResultsResultsInner {
	return &NullableAssertionResultsResultsInner{value: val, isSet: true}
}

func (v NullableAssertionResultsResultsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssertionResultsResultsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
