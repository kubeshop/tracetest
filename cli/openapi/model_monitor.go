/*
TraceTest

OpenAPI definition for TraceTest endpoint and resources

API version: 0.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the Monitor type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Monitor{}

// Monitor struct for Monitor
type Monitor struct {
	Id        *string    `json:"id,omitempty"`
	Version   *int32     `json:"version,omitempty"`
	Name      *string    `json:"name,omitempty"`
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	DeletedAt *time.Time `json:"deletedAt,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	Enabled   *bool      `json:"enabled,omitempty"`
	// list of steps of the Monitor containing just each test id
	Tests []string `json:"tests,omitempty"`
	// list of steps of the Monitor containing just each test suite id
	TestSuites []string `json:"testSuites,omitempty"`
	// list of steps of the Monitor containing the whole test object
	FullTests []Test `json:"fullTests,omitempty"`
	// list of steps of the Monitor containing the whole test suite object
	FullTestSuites []TestSuite `json:"fullTestSuites,omitempty"`
	VariableSetId  *string     `json:"variableSetId,omitempty"`
	TokenId        *string     `json:"tokenId,omitempty"`
	Schedule       *Schedule   `json:"schedule,omitempty"`
	Alerts         []Alert     `json:"alerts,omitempty"`
	Summary        *Summary    `json:"summary,omitempty"`
}

// NewMonitor instantiates a new Monitor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonitor() *Monitor {
	this := Monitor{}
	return &this
}

// NewMonitorWithDefaults instantiates a new Monitor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonitorWithDefaults() *Monitor {
	this := Monitor{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Monitor) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Monitor) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Monitor) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Monitor) SetId(v string) {
	o.Id = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *Monitor) GetVersion() int32 {
	if o == nil || isNil(o.Version) {
		var ret int32
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Monitor) GetVersionOk() (*int32, bool) {
	if o == nil || isNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *Monitor) HasVersion() bool {
	if o != nil && !isNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int32 and assigns it to the Version field.
func (o *Monitor) SetVersion(v int32) {
	o.Version = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Monitor) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Monitor) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Monitor) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Monitor) SetName(v string) {
	o.Name = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Monitor) GetCreatedAt() time.Time {
	if o == nil || isNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Monitor) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || isNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Monitor) HasCreatedAt() bool {
	if o != nil && !isNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *Monitor) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetDeletedAt returns the DeletedAt field value if set, zero value otherwise.
func (o *Monitor) GetDeletedAt() time.Time {
	if o == nil || isNil(o.DeletedAt) {
		var ret time.Time
		return ret
	}
	return *o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Monitor) GetDeletedAtOk() (*time.Time, bool) {
	if o == nil || isNil(o.DeletedAt) {
		return nil, false
	}
	return o.DeletedAt, true
}

// HasDeletedAt returns a boolean if a field has been set.
func (o *Monitor) HasDeletedAt() bool {
	if o != nil && !isNil(o.DeletedAt) {
		return true
	}

	return false
}

// SetDeletedAt gets a reference to the given time.Time and assigns it to the DeletedAt field.
func (o *Monitor) SetDeletedAt(v time.Time) {
	o.DeletedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *Monitor) GetUpdatedAt() time.Time {
	if o == nil || isNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Monitor) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || isNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *Monitor) HasUpdatedAt() bool {
	if o != nil && !isNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *Monitor) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *Monitor) GetEnabled() bool {
	if o == nil || isNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Monitor) GetEnabledOk() (*bool, bool) {
	if o == nil || isNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *Monitor) HasEnabled() bool {
	if o != nil && !isNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *Monitor) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetTests returns the Tests field value if set, zero value otherwise.
func (o *Monitor) GetTests() []string {
	if o == nil || isNil(o.Tests) {
		var ret []string
		return ret
	}
	return o.Tests
}

// GetTestsOk returns a tuple with the Tests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Monitor) GetTestsOk() ([]string, bool) {
	if o == nil || isNil(o.Tests) {
		return nil, false
	}
	return o.Tests, true
}

// HasTests returns a boolean if a field has been set.
func (o *Monitor) HasTests() bool {
	if o != nil && !isNil(o.Tests) {
		return true
	}

	return false
}

// SetTests gets a reference to the given []string and assigns it to the Tests field.
func (o *Monitor) SetTests(v []string) {
	o.Tests = v
}

// GetTestSuites returns the TestSuites field value if set, zero value otherwise.
func (o *Monitor) GetTestSuites() []string {
	if o == nil || isNil(o.TestSuites) {
		var ret []string
		return ret
	}
	return o.TestSuites
}

// GetTestSuitesOk returns a tuple with the TestSuites field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Monitor) GetTestSuitesOk() ([]string, bool) {
	if o == nil || isNil(o.TestSuites) {
		return nil, false
	}
	return o.TestSuites, true
}

// HasTestSuites returns a boolean if a field has been set.
func (o *Monitor) HasTestSuites() bool {
	if o != nil && !isNil(o.TestSuites) {
		return true
	}

	return false
}

// SetTestSuites gets a reference to the given []string and assigns it to the TestSuites field.
func (o *Monitor) SetTestSuites(v []string) {
	o.TestSuites = v
}

// GetFullTests returns the FullTests field value if set, zero value otherwise.
func (o *Monitor) GetFullTests() []Test {
	if o == nil || isNil(o.FullTests) {
		var ret []Test
		return ret
	}
	return o.FullTests
}

// GetFullTestsOk returns a tuple with the FullTests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Monitor) GetFullTestsOk() ([]Test, bool) {
	if o == nil || isNil(o.FullTests) {
		return nil, false
	}
	return o.FullTests, true
}

// HasFullTests returns a boolean if a field has been set.
func (o *Monitor) HasFullTests() bool {
	if o != nil && !isNil(o.FullTests) {
		return true
	}

	return false
}

// SetFullTests gets a reference to the given []Test and assigns it to the FullTests field.
func (o *Monitor) SetFullTests(v []Test) {
	o.FullTests = v
}

// GetFullTestSuites returns the FullTestSuites field value if set, zero value otherwise.
func (o *Monitor) GetFullTestSuites() []TestSuite {
	if o == nil || isNil(o.FullTestSuites) {
		var ret []TestSuite
		return ret
	}
	return o.FullTestSuites
}

// GetFullTestSuitesOk returns a tuple with the FullTestSuites field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Monitor) GetFullTestSuitesOk() ([]TestSuite, bool) {
	if o == nil || isNil(o.FullTestSuites) {
		return nil, false
	}
	return o.FullTestSuites, true
}

// HasFullTestSuites returns a boolean if a field has been set.
func (o *Monitor) HasFullTestSuites() bool {
	if o != nil && !isNil(o.FullTestSuites) {
		return true
	}

	return false
}

// SetFullTestSuites gets a reference to the given []TestSuite and assigns it to the FullTestSuites field.
func (o *Monitor) SetFullTestSuites(v []TestSuite) {
	o.FullTestSuites = v
}

// GetVariableSetId returns the VariableSetId field value if set, zero value otherwise.
func (o *Monitor) GetVariableSetId() string {
	if o == nil || isNil(o.VariableSetId) {
		var ret string
		return ret
	}
	return *o.VariableSetId
}

// GetVariableSetIdOk returns a tuple with the VariableSetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Monitor) GetVariableSetIdOk() (*string, bool) {
	if o == nil || isNil(o.VariableSetId) {
		return nil, false
	}
	return o.VariableSetId, true
}

// HasVariableSetId returns a boolean if a field has been set.
func (o *Monitor) HasVariableSetId() bool {
	if o != nil && !isNil(o.VariableSetId) {
		return true
	}

	return false
}

// SetVariableSetId gets a reference to the given string and assigns it to the VariableSetId field.
func (o *Monitor) SetVariableSetId(v string) {
	o.VariableSetId = &v
}

// GetTokenId returns the TokenId field value if set, zero value otherwise.
func (o *Monitor) GetTokenId() string {
	if o == nil || isNil(o.TokenId) {
		var ret string
		return ret
	}
	return *o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Monitor) GetTokenIdOk() (*string, bool) {
	if o == nil || isNil(o.TokenId) {
		return nil, false
	}
	return o.TokenId, true
}

// HasTokenId returns a boolean if a field has been set.
func (o *Monitor) HasTokenId() bool {
	if o != nil && !isNil(o.TokenId) {
		return true
	}

	return false
}

// SetTokenId gets a reference to the given string and assigns it to the TokenId field.
func (o *Monitor) SetTokenId(v string) {
	o.TokenId = &v
}

// GetSchedule returns the Schedule field value if set, zero value otherwise.
func (o *Monitor) GetSchedule() Schedule {
	if o == nil || isNil(o.Schedule) {
		var ret Schedule
		return ret
	}
	return *o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Monitor) GetScheduleOk() (*Schedule, bool) {
	if o == nil || isNil(o.Schedule) {
		return nil, false
	}
	return o.Schedule, true
}

// HasSchedule returns a boolean if a field has been set.
func (o *Monitor) HasSchedule() bool {
	if o != nil && !isNil(o.Schedule) {
		return true
	}

	return false
}

// SetSchedule gets a reference to the given Schedule and assigns it to the Schedule field.
func (o *Monitor) SetSchedule(v Schedule) {
	o.Schedule = &v
}

// GetAlerts returns the Alerts field value if set, zero value otherwise.
func (o *Monitor) GetAlerts() []Alert {
	if o == nil || isNil(o.Alerts) {
		var ret []Alert
		return ret
	}
	return o.Alerts
}

// GetAlertsOk returns a tuple with the Alerts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Monitor) GetAlertsOk() ([]Alert, bool) {
	if o == nil || isNil(o.Alerts) {
		return nil, false
	}
	return o.Alerts, true
}

// HasAlerts returns a boolean if a field has been set.
func (o *Monitor) HasAlerts() bool {
	if o != nil && !isNil(o.Alerts) {
		return true
	}

	return false
}

// SetAlerts gets a reference to the given []Alert and assigns it to the Alerts field.
func (o *Monitor) SetAlerts(v []Alert) {
	o.Alerts = v
}

// GetSummary returns the Summary field value if set, zero value otherwise.
func (o *Monitor) GetSummary() Summary {
	if o == nil || isNil(o.Summary) {
		var ret Summary
		return ret
	}
	return *o.Summary
}

// GetSummaryOk returns a tuple with the Summary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Monitor) GetSummaryOk() (*Summary, bool) {
	if o == nil || isNil(o.Summary) {
		return nil, false
	}
	return o.Summary, true
}

// HasSummary returns a boolean if a field has been set.
func (o *Monitor) HasSummary() bool {
	if o != nil && !isNil(o.Summary) {
		return true
	}

	return false
}

// SetSummary gets a reference to the given Summary and assigns it to the Summary field.
func (o *Monitor) SetSummary(v Summary) {
	o.Summary = &v
}

func (o Monitor) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Monitor) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !isNil(o.DeletedAt) {
		toSerialize["deletedAt"] = o.DeletedAt
	}
	if !isNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if !isNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !isNil(o.Tests) {
		toSerialize["tests"] = o.Tests
	}
	if !isNil(o.TestSuites) {
		toSerialize["testSuites"] = o.TestSuites
	}
	if !isNil(o.FullTests) {
		toSerialize["fullTests"] = o.FullTests
	}
	if !isNil(o.FullTestSuites) {
		toSerialize["fullTestSuites"] = o.FullTestSuites
	}
	if !isNil(o.VariableSetId) {
		toSerialize["variableSetId"] = o.VariableSetId
	}
	if !isNil(o.TokenId) {
		toSerialize["tokenId"] = o.TokenId
	}
	if !isNil(o.Schedule) {
		toSerialize["schedule"] = o.Schedule
	}
	if !isNil(o.Alerts) {
		toSerialize["alerts"] = o.Alerts
	}
	if !isNil(o.Summary) {
		toSerialize["summary"] = o.Summary
	}
	return toSerialize, nil
}

type NullableMonitor struct {
	value *Monitor
	isSet bool
}

func (v NullableMonitor) Get() *Monitor {
	return v.value
}

func (v *NullableMonitor) Set(val *Monitor) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitor) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitor(val *Monitor) *NullableMonitor {
	return &NullableMonitor{value: val, isSet: true}
}

func (v NullableMonitor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
