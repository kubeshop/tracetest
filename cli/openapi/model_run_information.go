/*
TraceTest

OpenAPI definition for TraceTest endpoint and resources

API version: 0.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RunInformation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RunInformation{}

// RunInformation struct for RunInformation
type RunInformation struct {
	Metadata      map[string]string  `json:"metadata,omitempty"`
	VariableSetId *string            `json:"variableSetId,omitempty"`
	RunGroupId    *string            `json:"runGroupId,omitempty"`
	Variables     []VariableSetValue `json:"variables,omitempty"`
	RequiredGates []SupportedGates   `json:"requiredGates,omitempty"`
}

// NewRunInformation instantiates a new RunInformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRunInformation() *RunInformation {
	this := RunInformation{}
	return &this
}

// NewRunInformationWithDefaults instantiates a new RunInformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunInformationWithDefaults() *RunInformation {
	this := RunInformation{}
	return &this
}

// GetMetadata returns the Metadata field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RunInformation) GetMetadata() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RunInformation) GetMetadataOk() (*map[string]string, bool) {
	if o == nil || isNil(o.Metadata) {
		return nil, false
	}
	return &o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *RunInformation) HasMetadata() bool {
	if o != nil && isNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]string and assigns it to the Metadata field.
func (o *RunInformation) SetMetadata(v map[string]string) {
	o.Metadata = v
}

// GetVariableSetId returns the VariableSetId field value if set, zero value otherwise.
func (o *RunInformation) GetVariableSetId() string {
	if o == nil || isNil(o.VariableSetId) {
		var ret string
		return ret
	}
	return *o.VariableSetId
}

// GetVariableSetIdOk returns a tuple with the VariableSetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunInformation) GetVariableSetIdOk() (*string, bool) {
	if o == nil || isNil(o.VariableSetId) {
		return nil, false
	}
	return o.VariableSetId, true
}

// HasVariableSetId returns a boolean if a field has been set.
func (o *RunInformation) HasVariableSetId() bool {
	if o != nil && !isNil(o.VariableSetId) {
		return true
	}

	return false
}

// SetVariableSetId gets a reference to the given string and assigns it to the VariableSetId field.
func (o *RunInformation) SetVariableSetId(v string) {
	o.VariableSetId = &v
}

// GetRunGroupId returns the RunGroupId field value if set, zero value otherwise.
func (o *RunInformation) GetRunGroupId() string {
	if o == nil || isNil(o.RunGroupId) {
		var ret string
		return ret
	}
	return *o.RunGroupId
}

// GetRunGroupIdOk returns a tuple with the RunGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunInformation) GetRunGroupIdOk() (*string, bool) {
	if o == nil || isNil(o.RunGroupId) {
		return nil, false
	}
	return o.RunGroupId, true
}

// HasRunGroupId returns a boolean if a field has been set.
func (o *RunInformation) HasRunGroupId() bool {
	if o != nil && !isNil(o.RunGroupId) {
		return true
	}

	return false
}

// SetRunGroupId gets a reference to the given string and assigns it to the RunGroupId field.
func (o *RunInformation) SetRunGroupId(v string) {
	o.RunGroupId = &v
}

// GetVariables returns the Variables field value if set, zero value otherwise.
func (o *RunInformation) GetVariables() []VariableSetValue {
	if o == nil || isNil(o.Variables) {
		var ret []VariableSetValue
		return ret
	}
	return o.Variables
}

// GetVariablesOk returns a tuple with the Variables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunInformation) GetVariablesOk() ([]VariableSetValue, bool) {
	if o == nil || isNil(o.Variables) {
		return nil, false
	}
	return o.Variables, true
}

// HasVariables returns a boolean if a field has been set.
func (o *RunInformation) HasVariables() bool {
	if o != nil && !isNil(o.Variables) {
		return true
	}

	return false
}

// SetVariables gets a reference to the given []VariableSetValue and assigns it to the Variables field.
func (o *RunInformation) SetVariables(v []VariableSetValue) {
	o.Variables = v
}

// GetRequiredGates returns the RequiredGates field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RunInformation) GetRequiredGates() []SupportedGates {
	if o == nil {
		var ret []SupportedGates
		return ret
	}
	return o.RequiredGates
}

// GetRequiredGatesOk returns a tuple with the RequiredGates field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RunInformation) GetRequiredGatesOk() ([]SupportedGates, bool) {
	if o == nil || isNil(o.RequiredGates) {
		return nil, false
	}
	return o.RequiredGates, true
}

// HasRequiredGates returns a boolean if a field has been set.
func (o *RunInformation) HasRequiredGates() bool {
	if o != nil && isNil(o.RequiredGates) {
		return true
	}

	return false
}

// SetRequiredGates gets a reference to the given []SupportedGates and assigns it to the RequiredGates field.
func (o *RunInformation) SetRequiredGates(v []SupportedGates) {
	o.RequiredGates = v
}

func (o RunInformation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RunInformation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if !isNil(o.VariableSetId) {
		toSerialize["variableSetId"] = o.VariableSetId
	}
	if !isNil(o.RunGroupId) {
		toSerialize["runGroupId"] = o.RunGroupId
	}
	if !isNil(o.Variables) {
		toSerialize["variables"] = o.Variables
	}
	if o.RequiredGates != nil {
		toSerialize["requiredGates"] = o.RequiredGates
	}
	return toSerialize, nil
}

type NullableRunInformation struct {
	value *RunInformation
	isSet bool
}

func (v NullableRunInformation) Get() *RunInformation {
	return v.value
}

func (v *NullableRunInformation) Set(val *RunInformation) {
	v.value = val
	v.isSet = true
}

func (v NullableRunInformation) IsSet() bool {
	return v.isSet
}

func (v *NullableRunInformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunInformation(val *RunInformation) *NullableRunInformation {
	return &NullableRunInformation{value: val, isSet: true}
}

func (v NullableRunInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunInformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
