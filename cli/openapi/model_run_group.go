/*
TraceTest

OpenAPI definition for TraceTest endpoint and resources

API version: 0.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the RunGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RunGroup{}

// RunGroup struct for RunGroup
type RunGroup struct {
	Id        string             `json:"id"`
	CreatedAt *time.Time         `json:"createdAt,omitempty"`
	Status    *string            `json:"status,omitempty"`
	Summary   *RunGroupSummary   `json:"summary,omitempty"`
	Metadata  *map[string]string `json:"metadata,omitempty"`
}

// NewRunGroup instantiates a new RunGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRunGroup(id string) *RunGroup {
	this := RunGroup{}
	this.Id = id
	return &this
}

// NewRunGroupWithDefaults instantiates a new RunGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunGroupWithDefaults() *RunGroup {
	this := RunGroup{}
	return &this
}

// GetId returns the Id field value
func (o *RunGroup) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *RunGroup) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *RunGroup) SetId(v string) {
	o.Id = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *RunGroup) GetCreatedAt() time.Time {
	if o == nil || isNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunGroup) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || isNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *RunGroup) HasCreatedAt() bool {
	if o != nil && !isNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *RunGroup) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *RunGroup) GetStatus() string {
	if o == nil || isNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunGroup) GetStatusOk() (*string, bool) {
	if o == nil || isNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *RunGroup) HasStatus() bool {
	if o != nil && !isNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *RunGroup) SetStatus(v string) {
	o.Status = &v
}

// GetSummary returns the Summary field value if set, zero value otherwise.
func (o *RunGroup) GetSummary() RunGroupSummary {
	if o == nil || isNil(o.Summary) {
		var ret RunGroupSummary
		return ret
	}
	return *o.Summary
}

// GetSummaryOk returns a tuple with the Summary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunGroup) GetSummaryOk() (*RunGroupSummary, bool) {
	if o == nil || isNil(o.Summary) {
		return nil, false
	}
	return o.Summary, true
}

// HasSummary returns a boolean if a field has been set.
func (o *RunGroup) HasSummary() bool {
	if o != nil && !isNil(o.Summary) {
		return true
	}

	return false
}

// SetSummary gets a reference to the given RunGroupSummary and assigns it to the Summary field.
func (o *RunGroup) SetSummary(v RunGroupSummary) {
	o.Summary = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *RunGroup) GetMetadata() map[string]string {
	if o == nil || isNil(o.Metadata) {
		var ret map[string]string
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunGroup) GetMetadataOk() (*map[string]string, bool) {
	if o == nil || isNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *RunGroup) HasMetadata() bool {
	if o != nil && !isNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]string and assigns it to the Metadata field.
func (o *RunGroup) SetMetadata(v map[string]string) {
	o.Metadata = &v
}

func (o RunGroup) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RunGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	// skip: createdAt is readOnly
	// skip: status is readOnly
	if !isNil(o.Summary) {
		toSerialize["summary"] = o.Summary
	}
	if !isNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	return toSerialize, nil
}

type NullableRunGroup struct {
	value *RunGroup
	isSet bool
}

func (v NullableRunGroup) Get() *RunGroup {
	return v.value
}

func (v *NullableRunGroup) Set(val *RunGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableRunGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableRunGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunGroup(val *RunGroup) *NullableRunGroup {
	return &NullableRunGroup{value: val, isSet: true}
}

func (v NullableRunGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
