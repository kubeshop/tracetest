/*
TraceTest

OpenAPI definition for TraceTest endpoint and resources

API version: 0.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the LinternResultPluginRuleResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LinternResultPluginRuleResult{}

// LinternResultPluginRuleResult struct for LinternResultPluginRuleResult
type LinternResultPluginRuleResult struct {
	SpanId   *string `json:"spanId,omitempty"`
	Error    *string `json:"error,omitempty"`
	Passed   *bool   `json:"passed,omitempty"`
	Severity *string `json:"severity,omitempty"`
}

// NewLinternResultPluginRuleResult instantiates a new LinternResultPluginRuleResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLinternResultPluginRuleResult() *LinternResultPluginRuleResult {
	this := LinternResultPluginRuleResult{}
	return &this
}

// NewLinternResultPluginRuleResultWithDefaults instantiates a new LinternResultPluginRuleResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLinternResultPluginRuleResultWithDefaults() *LinternResultPluginRuleResult {
	this := LinternResultPluginRuleResult{}
	return &this
}

// GetSpanId returns the SpanId field value if set, zero value otherwise.
func (o *LinternResultPluginRuleResult) GetSpanId() string {
	if o == nil || isNil(o.SpanId) {
		var ret string
		return ret
	}
	return *o.SpanId
}

// GetSpanIdOk returns a tuple with the SpanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinternResultPluginRuleResult) GetSpanIdOk() (*string, bool) {
	if o == nil || isNil(o.SpanId) {
		return nil, false
	}
	return o.SpanId, true
}

// HasSpanId returns a boolean if a field has been set.
func (o *LinternResultPluginRuleResult) HasSpanId() bool {
	if o != nil && !isNil(o.SpanId) {
		return true
	}

	return false
}

// SetSpanId gets a reference to the given string and assigns it to the SpanId field.
func (o *LinternResultPluginRuleResult) SetSpanId(v string) {
	o.SpanId = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *LinternResultPluginRuleResult) GetError() string {
	if o == nil || isNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinternResultPluginRuleResult) GetErrorOk() (*string, bool) {
	if o == nil || isNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *LinternResultPluginRuleResult) HasError() bool {
	if o != nil && !isNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *LinternResultPluginRuleResult) SetError(v string) {
	o.Error = &v
}

// GetPassed returns the Passed field value if set, zero value otherwise.
func (o *LinternResultPluginRuleResult) GetPassed() bool {
	if o == nil || isNil(o.Passed) {
		var ret bool
		return ret
	}
	return *o.Passed
}

// GetPassedOk returns a tuple with the Passed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinternResultPluginRuleResult) GetPassedOk() (*bool, bool) {
	if o == nil || isNil(o.Passed) {
		return nil, false
	}
	return o.Passed, true
}

// HasPassed returns a boolean if a field has been set.
func (o *LinternResultPluginRuleResult) HasPassed() bool {
	if o != nil && !isNil(o.Passed) {
		return true
	}

	return false
}

// SetPassed gets a reference to the given bool and assigns it to the Passed field.
func (o *LinternResultPluginRuleResult) SetPassed(v bool) {
	o.Passed = &v
}

// GetSeverity returns the Severity field value if set, zero value otherwise.
func (o *LinternResultPluginRuleResult) GetSeverity() string {
	if o == nil || isNil(o.Severity) {
		var ret string
		return ret
	}
	return *o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinternResultPluginRuleResult) GetSeverityOk() (*string, bool) {
	if o == nil || isNil(o.Severity) {
		return nil, false
	}
	return o.Severity, true
}

// HasSeverity returns a boolean if a field has been set.
func (o *LinternResultPluginRuleResult) HasSeverity() bool {
	if o != nil && !isNil(o.Severity) {
		return true
	}

	return false
}

// SetSeverity gets a reference to the given string and assigns it to the Severity field.
func (o *LinternResultPluginRuleResult) SetSeverity(v string) {
	o.Severity = &v
}

func (o LinternResultPluginRuleResult) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LinternResultPluginRuleResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.SpanId) {
		toSerialize["spanId"] = o.SpanId
	}
	if !isNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !isNil(o.Passed) {
		toSerialize["passed"] = o.Passed
	}
	if !isNil(o.Severity) {
		toSerialize["severity"] = o.Severity
	}
	return toSerialize, nil
}

type NullableLinternResultPluginRuleResult struct {
	value *LinternResultPluginRuleResult
	isSet bool
}

func (v NullableLinternResultPluginRuleResult) Get() *LinternResultPluginRuleResult {
	return v.value
}

func (v *NullableLinternResultPluginRuleResult) Set(val *LinternResultPluginRuleResult) {
	v.value = val
	v.isSet = true
}

func (v NullableLinternResultPluginRuleResult) IsSet() bool {
	return v.isSet
}

func (v *NullableLinternResultPluginRuleResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinternResultPluginRuleResult(val *LinternResultPluginRuleResult) *NullableLinternResultPluginRuleResult {
	return &NullableLinternResultPluginRuleResult{value: val, isSet: true}
}

func (v NullableLinternResultPluginRuleResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinternResultPluginRuleResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
