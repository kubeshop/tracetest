/*
TraceTest

OpenAPI definition for TraceTest endpoint and resources

API version: 0.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the Run type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Run{}

// Run struct for Run
type Run struct {
	TestId              *string              `json:"testId,omitempty"`
	TestVersion         *int32               `json:"testVersion,omitempty"`
	Name                *string              `json:"name,omitempty"`
	CreatedAt           *time.Time           `json:"createdAt,omitempty"`
	CompletedAt         *time.Time           `json:"completedAt,omitempty"`
	Linter              *LinterResult        `json:"linter,omitempty"`
	RequiredGatesResult *RequiredGatesResult `json:"requiredGatesResult,omitempty"`
	Metadata            *map[string]string   `json:"metadata,omitempty"`
	// time in seconds it took for the test to complete, either success or fail. If the test is still running, it will show the time up to the time of the request
	ExecutionTime *int32   `json:"executionTime,omitempty"`
	RunId         *int32   `json:"runId,omitempty"`
	Trigger       *Trigger `json:"trigger,omitempty"`
	// Current execution state
	State  *string           `json:"state,omitempty"`
	Result *AssertionResults `json:"result,omitempty"`
}

// NewRun instantiates a new Run object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRun() *Run {
	this := Run{}
	return &this
}

// NewRunWithDefaults instantiates a new Run object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunWithDefaults() *Run {
	this := Run{}
	return &this
}

// GetTestId returns the TestId field value if set, zero value otherwise.
func (o *Run) GetTestId() string {
	if o == nil || isNil(o.TestId) {
		var ret string
		return ret
	}
	return *o.TestId
}

// GetTestIdOk returns a tuple with the TestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Run) GetTestIdOk() (*string, bool) {
	if o == nil || isNil(o.TestId) {
		return nil, false
	}
	return o.TestId, true
}

// HasTestId returns a boolean if a field has been set.
func (o *Run) HasTestId() bool {
	if o != nil && !isNil(o.TestId) {
		return true
	}

	return false
}

// SetTestId gets a reference to the given string and assigns it to the TestId field.
func (o *Run) SetTestId(v string) {
	o.TestId = &v
}

// GetTestVersion returns the TestVersion field value if set, zero value otherwise.
func (o *Run) GetTestVersion() int32 {
	if o == nil || isNil(o.TestVersion) {
		var ret int32
		return ret
	}
	return *o.TestVersion
}

// GetTestVersionOk returns a tuple with the TestVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Run) GetTestVersionOk() (*int32, bool) {
	if o == nil || isNil(o.TestVersion) {
		return nil, false
	}
	return o.TestVersion, true
}

// HasTestVersion returns a boolean if a field has been set.
func (o *Run) HasTestVersion() bool {
	if o != nil && !isNil(o.TestVersion) {
		return true
	}

	return false
}

// SetTestVersion gets a reference to the given int32 and assigns it to the TestVersion field.
func (o *Run) SetTestVersion(v int32) {
	o.TestVersion = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Run) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Run) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Run) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Run) SetName(v string) {
	o.Name = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Run) GetCreatedAt() time.Time {
	if o == nil || isNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Run) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || isNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Run) HasCreatedAt() bool {
	if o != nil && !isNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *Run) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetCompletedAt returns the CompletedAt field value if set, zero value otherwise.
func (o *Run) GetCompletedAt() time.Time {
	if o == nil || isNil(o.CompletedAt) {
		var ret time.Time
		return ret
	}
	return *o.CompletedAt
}

// GetCompletedAtOk returns a tuple with the CompletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Run) GetCompletedAtOk() (*time.Time, bool) {
	if o == nil || isNil(o.CompletedAt) {
		return nil, false
	}
	return o.CompletedAt, true
}

// HasCompletedAt returns a boolean if a field has been set.
func (o *Run) HasCompletedAt() bool {
	if o != nil && !isNil(o.CompletedAt) {
		return true
	}

	return false
}

// SetCompletedAt gets a reference to the given time.Time and assigns it to the CompletedAt field.
func (o *Run) SetCompletedAt(v time.Time) {
	o.CompletedAt = &v
}

// GetLinter returns the Linter field value if set, zero value otherwise.
func (o *Run) GetLinter() LinterResult {
	if o == nil || isNil(o.Linter) {
		var ret LinterResult
		return ret
	}
	return *o.Linter
}

// GetLinterOk returns a tuple with the Linter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Run) GetLinterOk() (*LinterResult, bool) {
	if o == nil || isNil(o.Linter) {
		return nil, false
	}
	return o.Linter, true
}

// HasLinter returns a boolean if a field has been set.
func (o *Run) HasLinter() bool {
	if o != nil && !isNil(o.Linter) {
		return true
	}

	return false
}

// SetLinter gets a reference to the given LinterResult and assigns it to the Linter field.
func (o *Run) SetLinter(v LinterResult) {
	o.Linter = &v
}

// GetRequiredGatesResult returns the RequiredGatesResult field value if set, zero value otherwise.
func (o *Run) GetRequiredGatesResult() RequiredGatesResult {
	if o == nil || isNil(o.RequiredGatesResult) {
		var ret RequiredGatesResult
		return ret
	}
	return *o.RequiredGatesResult
}

// GetRequiredGatesResultOk returns a tuple with the RequiredGatesResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Run) GetRequiredGatesResultOk() (*RequiredGatesResult, bool) {
	if o == nil || isNil(o.RequiredGatesResult) {
		return nil, false
	}
	return o.RequiredGatesResult, true
}

// HasRequiredGatesResult returns a boolean if a field has been set.
func (o *Run) HasRequiredGatesResult() bool {
	if o != nil && !isNil(o.RequiredGatesResult) {
		return true
	}

	return false
}

// SetRequiredGatesResult gets a reference to the given RequiredGatesResult and assigns it to the RequiredGatesResult field.
func (o *Run) SetRequiredGatesResult(v RequiredGatesResult) {
	o.RequiredGatesResult = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *Run) GetMetadata() map[string]string {
	if o == nil || isNil(o.Metadata) {
		var ret map[string]string
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Run) GetMetadataOk() (*map[string]string, bool) {
	if o == nil || isNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *Run) HasMetadata() bool {
	if o != nil && !isNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]string and assigns it to the Metadata field.
func (o *Run) SetMetadata(v map[string]string) {
	o.Metadata = &v
}

// GetExecutionTime returns the ExecutionTime field value if set, zero value otherwise.
func (o *Run) GetExecutionTime() int32 {
	if o == nil || isNil(o.ExecutionTime) {
		var ret int32
		return ret
	}
	return *o.ExecutionTime
}

// GetExecutionTimeOk returns a tuple with the ExecutionTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Run) GetExecutionTimeOk() (*int32, bool) {
	if o == nil || isNil(o.ExecutionTime) {
		return nil, false
	}
	return o.ExecutionTime, true
}

// HasExecutionTime returns a boolean if a field has been set.
func (o *Run) HasExecutionTime() bool {
	if o != nil && !isNil(o.ExecutionTime) {
		return true
	}

	return false
}

// SetExecutionTime gets a reference to the given int32 and assigns it to the ExecutionTime field.
func (o *Run) SetExecutionTime(v int32) {
	o.ExecutionTime = &v
}

// GetRunId returns the RunId field value if set, zero value otherwise.
func (o *Run) GetRunId() int32 {
	if o == nil || isNil(o.RunId) {
		var ret int32
		return ret
	}
	return *o.RunId
}

// GetRunIdOk returns a tuple with the RunId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Run) GetRunIdOk() (*int32, bool) {
	if o == nil || isNil(o.RunId) {
		return nil, false
	}
	return o.RunId, true
}

// HasRunId returns a boolean if a field has been set.
func (o *Run) HasRunId() bool {
	if o != nil && !isNil(o.RunId) {
		return true
	}

	return false
}

// SetRunId gets a reference to the given int32 and assigns it to the RunId field.
func (o *Run) SetRunId(v int32) {
	o.RunId = &v
}

// GetTrigger returns the Trigger field value if set, zero value otherwise.
func (o *Run) GetTrigger() Trigger {
	if o == nil || isNil(o.Trigger) {
		var ret Trigger
		return ret
	}
	return *o.Trigger
}

// GetTriggerOk returns a tuple with the Trigger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Run) GetTriggerOk() (*Trigger, bool) {
	if o == nil || isNil(o.Trigger) {
		return nil, false
	}
	return o.Trigger, true
}

// HasTrigger returns a boolean if a field has been set.
func (o *Run) HasTrigger() bool {
	if o != nil && !isNil(o.Trigger) {
		return true
	}

	return false
}

// SetTrigger gets a reference to the given Trigger and assigns it to the Trigger field.
func (o *Run) SetTrigger(v Trigger) {
	o.Trigger = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *Run) GetState() string {
	if o == nil || isNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Run) GetStateOk() (*string, bool) {
	if o == nil || isNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *Run) HasState() bool {
	if o != nil && !isNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *Run) SetState(v string) {
	o.State = &v
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *Run) GetResult() AssertionResults {
	if o == nil || isNil(o.Result) {
		var ret AssertionResults
		return ret
	}
	return *o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Run) GetResultOk() (*AssertionResults, bool) {
	if o == nil || isNil(o.Result) {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *Run) HasResult() bool {
	if o != nil && !isNil(o.Result) {
		return true
	}

	return false
}

// SetResult gets a reference to the given AssertionResults and assigns it to the Result field.
func (o *Run) SetResult(v AssertionResults) {
	o.Result = &v
}

func (o Run) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Run) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.TestId) {
		toSerialize["testId"] = o.TestId
	}
	if !isNil(o.TestVersion) {
		toSerialize["testVersion"] = o.TestVersion
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !isNil(o.CompletedAt) {
		toSerialize["completedAt"] = o.CompletedAt
	}
	if !isNil(o.Linter) {
		toSerialize["linter"] = o.Linter
	}
	if !isNil(o.RequiredGatesResult) {
		toSerialize["requiredGatesResult"] = o.RequiredGatesResult
	}
	if !isNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !isNil(o.ExecutionTime) {
		toSerialize["executionTime"] = o.ExecutionTime
	}
	if !isNil(o.RunId) {
		toSerialize["runId"] = o.RunId
	}
	if !isNil(o.Trigger) {
		toSerialize["trigger"] = o.Trigger
	}
	if !isNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !isNil(o.Result) {
		toSerialize["result"] = o.Result
	}
	return toSerialize, nil
}

type NullableRun struct {
	value *Run
	isSet bool
}

func (v NullableRun) Get() *Run {
	return v.value
}

func (v *NullableRun) Set(val *Run) {
	v.value = val
	v.isSet = true
}

func (v NullableRun) IsSet() bool {
	return v.isSet
}

func (v *NullableRun) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRun(val *Run) *NullableRun {
	return &NullableRun{value: val, isSet: true}
}

func (v NullableRun) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRun) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
