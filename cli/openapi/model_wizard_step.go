/*
TraceTest

OpenAPI definition for TraceTest endpoint and resources

API version: 0.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the WizardStep type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WizardStep{}

// WizardStep struct for WizardStep
type WizardStep struct {
	Id          *string    `json:"id,omitempty"`
	State       *string    `json:"state,omitempty"`
	CompletedAt *time.Time `json:"completedAt,omitempty"`
}

// NewWizardStep instantiates a new WizardStep object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWizardStep() *WizardStep {
	this := WizardStep{}
	return &this
}

// NewWizardStepWithDefaults instantiates a new WizardStep object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWizardStepWithDefaults() *WizardStep {
	this := WizardStep{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *WizardStep) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WizardStep) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *WizardStep) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *WizardStep) SetId(v string) {
	o.Id = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *WizardStep) GetState() string {
	if o == nil || isNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WizardStep) GetStateOk() (*string, bool) {
	if o == nil || isNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *WizardStep) HasState() bool {
	if o != nil && !isNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *WizardStep) SetState(v string) {
	o.State = &v
}

// GetCompletedAt returns the CompletedAt field value if set, zero value otherwise.
func (o *WizardStep) GetCompletedAt() time.Time {
	if o == nil || isNil(o.CompletedAt) {
		var ret time.Time
		return ret
	}
	return *o.CompletedAt
}

// GetCompletedAtOk returns a tuple with the CompletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WizardStep) GetCompletedAtOk() (*time.Time, bool) {
	if o == nil || isNil(o.CompletedAt) {
		return nil, false
	}
	return o.CompletedAt, true
}

// HasCompletedAt returns a boolean if a field has been set.
func (o *WizardStep) HasCompletedAt() bool {
	if o != nil && !isNil(o.CompletedAt) {
		return true
	}

	return false
}

// SetCompletedAt gets a reference to the given time.Time and assigns it to the CompletedAt field.
func (o *WizardStep) SetCompletedAt(v time.Time) {
	o.CompletedAt = &v
}

func (o WizardStep) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WizardStep) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !isNil(o.CompletedAt) {
		toSerialize["completedAt"] = o.CompletedAt
	}
	return toSerialize, nil
}

type NullableWizardStep struct {
	value *WizardStep
	isSet bool
}

func (v NullableWizardStep) Get() *WizardStep {
	return v.value
}

func (v *NullableWizardStep) Set(val *WizardStep) {
	v.value = val
	v.isSet = true
}

func (v NullableWizardStep) IsSet() bool {
	return v.isSet
}

func (v *NullableWizardStep) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWizardStep(val *WizardStep) *NullableWizardStep {
	return &NullableWizardStep{value: val, isSet: true}
}

func (v NullableWizardStep) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWizardStep) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
