/*
TraceTest

OpenAPI definition for TraceTest endpoint and resources

API version: 0.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the TestRun type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TestRun{}

// TestRun struct for TestRun
type TestRun struct {
	Id      *int32  `json:"id,omitempty"`
	TraceId *string `json:"traceId,omitempty"`
	SpanId  *string `json:"spanId,omitempty"`
	// Test version used when running this test run
	TestVersion *int32  `json:"testVersion,omitempty"`
	RunGroupId  *string `json:"runGroupId,omitempty"`
	// Current execution state
	State *string `json:"state,omitempty"`
	// Details of the cause for the last `FAILED` state
	LastErrorState *string `json:"lastErrorState,omitempty"`
	// time in seconds it took for the test to complete, either success or fail. If the test is still running, it will show the time up to the time of the request
	ExecutionTime *int32 `json:"executionTime,omitempty"`
	// time in milliseconds it took for the triggering testSuite to complete, either success or fail. If the test is still running, it will show the time up to the time of the request
	TriggerTime               *int32                `json:"triggerTime,omitempty"`
	CreatedAt                 *time.Time            `json:"createdAt,omitempty"`
	ServiceTriggeredAt        *time.Time            `json:"serviceTriggeredAt,omitempty"`
	ServiceTriggerCompletedAt *time.Time            `json:"serviceTriggerCompletedAt,omitempty"`
	ObtainedTraceAt           *time.Time            `json:"obtainedTraceAt,omitempty"`
	CompletedAt               *time.Time            `json:"completedAt,omitempty"`
	VariableSet               *VariableSet          `json:"variableSet,omitempty"`
	ResolvedTrigger           *Trigger              `json:"resolvedTrigger,omitempty"`
	TriggerResult             *TriggerResult        `json:"triggerResult,omitempty"`
	Trace                     *Trace                `json:"trace,omitempty"`
	Result                    *AssertionResults     `json:"result,omitempty"`
	Linter                    *LinterResult         `json:"linter,omitempty"`
	Outputs                   []TestRunOutputsInner `json:"outputs,omitempty"`
	RequiredGatesResult       *RequiredGatesResult  `json:"requiredGatesResult,omitempty"`
	Metadata                  *map[string]string    `json:"metadata,omitempty"`
	TestSuiteId               *string               `json:"testSuiteId,omitempty"`
	TestSuiteRunId            *int32                `json:"testSuiteRunId,omitempty"`
}

// NewTestRun instantiates a new TestRun object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestRun() *TestRun {
	this := TestRun{}
	return &this
}

// NewTestRunWithDefaults instantiates a new TestRun object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestRunWithDefaults() *TestRun {
	this := TestRun{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TestRun) GetId() int32 {
	if o == nil || isNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestRun) GetIdOk() (*int32, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TestRun) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *TestRun) SetId(v int32) {
	o.Id = &v
}

// GetTraceId returns the TraceId field value if set, zero value otherwise.
func (o *TestRun) GetTraceId() string {
	if o == nil || isNil(o.TraceId) {
		var ret string
		return ret
	}
	return *o.TraceId
}

// GetTraceIdOk returns a tuple with the TraceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestRun) GetTraceIdOk() (*string, bool) {
	if o == nil || isNil(o.TraceId) {
		return nil, false
	}
	return o.TraceId, true
}

// HasTraceId returns a boolean if a field has been set.
func (o *TestRun) HasTraceId() bool {
	if o != nil && !isNil(o.TraceId) {
		return true
	}

	return false
}

// SetTraceId gets a reference to the given string and assigns it to the TraceId field.
func (o *TestRun) SetTraceId(v string) {
	o.TraceId = &v
}

// GetSpanId returns the SpanId field value if set, zero value otherwise.
func (o *TestRun) GetSpanId() string {
	if o == nil || isNil(o.SpanId) {
		var ret string
		return ret
	}
	return *o.SpanId
}

// GetSpanIdOk returns a tuple with the SpanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestRun) GetSpanIdOk() (*string, bool) {
	if o == nil || isNil(o.SpanId) {
		return nil, false
	}
	return o.SpanId, true
}

// HasSpanId returns a boolean if a field has been set.
func (o *TestRun) HasSpanId() bool {
	if o != nil && !isNil(o.SpanId) {
		return true
	}

	return false
}

// SetSpanId gets a reference to the given string and assigns it to the SpanId field.
func (o *TestRun) SetSpanId(v string) {
	o.SpanId = &v
}

// GetTestVersion returns the TestVersion field value if set, zero value otherwise.
func (o *TestRun) GetTestVersion() int32 {
	if o == nil || isNil(o.TestVersion) {
		var ret int32
		return ret
	}
	return *o.TestVersion
}

// GetTestVersionOk returns a tuple with the TestVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestRun) GetTestVersionOk() (*int32, bool) {
	if o == nil || isNil(o.TestVersion) {
		return nil, false
	}
	return o.TestVersion, true
}

// HasTestVersion returns a boolean if a field has been set.
func (o *TestRun) HasTestVersion() bool {
	if o != nil && !isNil(o.TestVersion) {
		return true
	}

	return false
}

// SetTestVersion gets a reference to the given int32 and assigns it to the TestVersion field.
func (o *TestRun) SetTestVersion(v int32) {
	o.TestVersion = &v
}

// GetRunGroupId returns the RunGroupId field value if set, zero value otherwise.
func (o *TestRun) GetRunGroupId() string {
	if o == nil || isNil(o.RunGroupId) {
		var ret string
		return ret
	}
	return *o.RunGroupId
}

// GetRunGroupIdOk returns a tuple with the RunGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestRun) GetRunGroupIdOk() (*string, bool) {
	if o == nil || isNil(o.RunGroupId) {
		return nil, false
	}
	return o.RunGroupId, true
}

// HasRunGroupId returns a boolean if a field has been set.
func (o *TestRun) HasRunGroupId() bool {
	if o != nil && !isNil(o.RunGroupId) {
		return true
	}

	return false
}

// SetRunGroupId gets a reference to the given string and assigns it to the RunGroupId field.
func (o *TestRun) SetRunGroupId(v string) {
	o.RunGroupId = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *TestRun) GetState() string {
	if o == nil || isNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestRun) GetStateOk() (*string, bool) {
	if o == nil || isNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *TestRun) HasState() bool {
	if o != nil && !isNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *TestRun) SetState(v string) {
	o.State = &v
}

// GetLastErrorState returns the LastErrorState field value if set, zero value otherwise.
func (o *TestRun) GetLastErrorState() string {
	if o == nil || isNil(o.LastErrorState) {
		var ret string
		return ret
	}
	return *o.LastErrorState
}

// GetLastErrorStateOk returns a tuple with the LastErrorState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestRun) GetLastErrorStateOk() (*string, bool) {
	if o == nil || isNil(o.LastErrorState) {
		return nil, false
	}
	return o.LastErrorState, true
}

// HasLastErrorState returns a boolean if a field has been set.
func (o *TestRun) HasLastErrorState() bool {
	if o != nil && !isNil(o.LastErrorState) {
		return true
	}

	return false
}

// SetLastErrorState gets a reference to the given string and assigns it to the LastErrorState field.
func (o *TestRun) SetLastErrorState(v string) {
	o.LastErrorState = &v
}

// GetExecutionTime returns the ExecutionTime field value if set, zero value otherwise.
func (o *TestRun) GetExecutionTime() int32 {
	if o == nil || isNil(o.ExecutionTime) {
		var ret int32
		return ret
	}
	return *o.ExecutionTime
}

// GetExecutionTimeOk returns a tuple with the ExecutionTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestRun) GetExecutionTimeOk() (*int32, bool) {
	if o == nil || isNil(o.ExecutionTime) {
		return nil, false
	}
	return o.ExecutionTime, true
}

// HasExecutionTime returns a boolean if a field has been set.
func (o *TestRun) HasExecutionTime() bool {
	if o != nil && !isNil(o.ExecutionTime) {
		return true
	}

	return false
}

// SetExecutionTime gets a reference to the given int32 and assigns it to the ExecutionTime field.
func (o *TestRun) SetExecutionTime(v int32) {
	o.ExecutionTime = &v
}

// GetTriggerTime returns the TriggerTime field value if set, zero value otherwise.
func (o *TestRun) GetTriggerTime() int32 {
	if o == nil || isNil(o.TriggerTime) {
		var ret int32
		return ret
	}
	return *o.TriggerTime
}

// GetTriggerTimeOk returns a tuple with the TriggerTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestRun) GetTriggerTimeOk() (*int32, bool) {
	if o == nil || isNil(o.TriggerTime) {
		return nil, false
	}
	return o.TriggerTime, true
}

// HasTriggerTime returns a boolean if a field has been set.
func (o *TestRun) HasTriggerTime() bool {
	if o != nil && !isNil(o.TriggerTime) {
		return true
	}

	return false
}

// SetTriggerTime gets a reference to the given int32 and assigns it to the TriggerTime field.
func (o *TestRun) SetTriggerTime(v int32) {
	o.TriggerTime = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *TestRun) GetCreatedAt() time.Time {
	if o == nil || isNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestRun) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || isNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *TestRun) HasCreatedAt() bool {
	if o != nil && !isNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *TestRun) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetServiceTriggeredAt returns the ServiceTriggeredAt field value if set, zero value otherwise.
func (o *TestRun) GetServiceTriggeredAt() time.Time {
	if o == nil || isNil(o.ServiceTriggeredAt) {
		var ret time.Time
		return ret
	}
	return *o.ServiceTriggeredAt
}

// GetServiceTriggeredAtOk returns a tuple with the ServiceTriggeredAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestRun) GetServiceTriggeredAtOk() (*time.Time, bool) {
	if o == nil || isNil(o.ServiceTriggeredAt) {
		return nil, false
	}
	return o.ServiceTriggeredAt, true
}

// HasServiceTriggeredAt returns a boolean if a field has been set.
func (o *TestRun) HasServiceTriggeredAt() bool {
	if o != nil && !isNil(o.ServiceTriggeredAt) {
		return true
	}

	return false
}

// SetServiceTriggeredAt gets a reference to the given time.Time and assigns it to the ServiceTriggeredAt field.
func (o *TestRun) SetServiceTriggeredAt(v time.Time) {
	o.ServiceTriggeredAt = &v
}

// GetServiceTriggerCompletedAt returns the ServiceTriggerCompletedAt field value if set, zero value otherwise.
func (o *TestRun) GetServiceTriggerCompletedAt() time.Time {
	if o == nil || isNil(o.ServiceTriggerCompletedAt) {
		var ret time.Time
		return ret
	}
	return *o.ServiceTriggerCompletedAt
}

// GetServiceTriggerCompletedAtOk returns a tuple with the ServiceTriggerCompletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestRun) GetServiceTriggerCompletedAtOk() (*time.Time, bool) {
	if o == nil || isNil(o.ServiceTriggerCompletedAt) {
		return nil, false
	}
	return o.ServiceTriggerCompletedAt, true
}

// HasServiceTriggerCompletedAt returns a boolean if a field has been set.
func (o *TestRun) HasServiceTriggerCompletedAt() bool {
	if o != nil && !isNil(o.ServiceTriggerCompletedAt) {
		return true
	}

	return false
}

// SetServiceTriggerCompletedAt gets a reference to the given time.Time and assigns it to the ServiceTriggerCompletedAt field.
func (o *TestRun) SetServiceTriggerCompletedAt(v time.Time) {
	o.ServiceTriggerCompletedAt = &v
}

// GetObtainedTraceAt returns the ObtainedTraceAt field value if set, zero value otherwise.
func (o *TestRun) GetObtainedTraceAt() time.Time {
	if o == nil || isNil(o.ObtainedTraceAt) {
		var ret time.Time
		return ret
	}
	return *o.ObtainedTraceAt
}

// GetObtainedTraceAtOk returns a tuple with the ObtainedTraceAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestRun) GetObtainedTraceAtOk() (*time.Time, bool) {
	if o == nil || isNil(o.ObtainedTraceAt) {
		return nil, false
	}
	return o.ObtainedTraceAt, true
}

// HasObtainedTraceAt returns a boolean if a field has been set.
func (o *TestRun) HasObtainedTraceAt() bool {
	if o != nil && !isNil(o.ObtainedTraceAt) {
		return true
	}

	return false
}

// SetObtainedTraceAt gets a reference to the given time.Time and assigns it to the ObtainedTraceAt field.
func (o *TestRun) SetObtainedTraceAt(v time.Time) {
	o.ObtainedTraceAt = &v
}

// GetCompletedAt returns the CompletedAt field value if set, zero value otherwise.
func (o *TestRun) GetCompletedAt() time.Time {
	if o == nil || isNil(o.CompletedAt) {
		var ret time.Time
		return ret
	}
	return *o.CompletedAt
}

// GetCompletedAtOk returns a tuple with the CompletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestRun) GetCompletedAtOk() (*time.Time, bool) {
	if o == nil || isNil(o.CompletedAt) {
		return nil, false
	}
	return o.CompletedAt, true
}

// HasCompletedAt returns a boolean if a field has been set.
func (o *TestRun) HasCompletedAt() bool {
	if o != nil && !isNil(o.CompletedAt) {
		return true
	}

	return false
}

// SetCompletedAt gets a reference to the given time.Time and assigns it to the CompletedAt field.
func (o *TestRun) SetCompletedAt(v time.Time) {
	o.CompletedAt = &v
}

// GetVariableSet returns the VariableSet field value if set, zero value otherwise.
func (o *TestRun) GetVariableSet() VariableSet {
	if o == nil || isNil(o.VariableSet) {
		var ret VariableSet
		return ret
	}
	return *o.VariableSet
}

// GetVariableSetOk returns a tuple with the VariableSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestRun) GetVariableSetOk() (*VariableSet, bool) {
	if o == nil || isNil(o.VariableSet) {
		return nil, false
	}
	return o.VariableSet, true
}

// HasVariableSet returns a boolean if a field has been set.
func (o *TestRun) HasVariableSet() bool {
	if o != nil && !isNil(o.VariableSet) {
		return true
	}

	return false
}

// SetVariableSet gets a reference to the given VariableSet and assigns it to the VariableSet field.
func (o *TestRun) SetVariableSet(v VariableSet) {
	o.VariableSet = &v
}

// GetResolvedTrigger returns the ResolvedTrigger field value if set, zero value otherwise.
func (o *TestRun) GetResolvedTrigger() Trigger {
	if o == nil || isNil(o.ResolvedTrigger) {
		var ret Trigger
		return ret
	}
	return *o.ResolvedTrigger
}

// GetResolvedTriggerOk returns a tuple with the ResolvedTrigger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestRun) GetResolvedTriggerOk() (*Trigger, bool) {
	if o == nil || isNil(o.ResolvedTrigger) {
		return nil, false
	}
	return o.ResolvedTrigger, true
}

// HasResolvedTrigger returns a boolean if a field has been set.
func (o *TestRun) HasResolvedTrigger() bool {
	if o != nil && !isNil(o.ResolvedTrigger) {
		return true
	}

	return false
}

// SetResolvedTrigger gets a reference to the given Trigger and assigns it to the ResolvedTrigger field.
func (o *TestRun) SetResolvedTrigger(v Trigger) {
	o.ResolvedTrigger = &v
}

// GetTriggerResult returns the TriggerResult field value if set, zero value otherwise.
func (o *TestRun) GetTriggerResult() TriggerResult {
	if o == nil || isNil(o.TriggerResult) {
		var ret TriggerResult
		return ret
	}
	return *o.TriggerResult
}

// GetTriggerResultOk returns a tuple with the TriggerResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestRun) GetTriggerResultOk() (*TriggerResult, bool) {
	if o == nil || isNil(o.TriggerResult) {
		return nil, false
	}
	return o.TriggerResult, true
}

// HasTriggerResult returns a boolean if a field has been set.
func (o *TestRun) HasTriggerResult() bool {
	if o != nil && !isNil(o.TriggerResult) {
		return true
	}

	return false
}

// SetTriggerResult gets a reference to the given TriggerResult and assigns it to the TriggerResult field.
func (o *TestRun) SetTriggerResult(v TriggerResult) {
	o.TriggerResult = &v
}

// GetTrace returns the Trace field value if set, zero value otherwise.
func (o *TestRun) GetTrace() Trace {
	if o == nil || isNil(o.Trace) {
		var ret Trace
		return ret
	}
	return *o.Trace
}

// GetTraceOk returns a tuple with the Trace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestRun) GetTraceOk() (*Trace, bool) {
	if o == nil || isNil(o.Trace) {
		return nil, false
	}
	return o.Trace, true
}

// HasTrace returns a boolean if a field has been set.
func (o *TestRun) HasTrace() bool {
	if o != nil && !isNil(o.Trace) {
		return true
	}

	return false
}

// SetTrace gets a reference to the given Trace and assigns it to the Trace field.
func (o *TestRun) SetTrace(v Trace) {
	o.Trace = &v
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *TestRun) GetResult() AssertionResults {
	if o == nil || isNil(o.Result) {
		var ret AssertionResults
		return ret
	}
	return *o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestRun) GetResultOk() (*AssertionResults, bool) {
	if o == nil || isNil(o.Result) {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *TestRun) HasResult() bool {
	if o != nil && !isNil(o.Result) {
		return true
	}

	return false
}

// SetResult gets a reference to the given AssertionResults and assigns it to the Result field.
func (o *TestRun) SetResult(v AssertionResults) {
	o.Result = &v
}

// GetLinter returns the Linter field value if set, zero value otherwise.
func (o *TestRun) GetLinter() LinterResult {
	if o == nil || isNil(o.Linter) {
		var ret LinterResult
		return ret
	}
	return *o.Linter
}

// GetLinterOk returns a tuple with the Linter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestRun) GetLinterOk() (*LinterResult, bool) {
	if o == nil || isNil(o.Linter) {
		return nil, false
	}
	return o.Linter, true
}

// HasLinter returns a boolean if a field has been set.
func (o *TestRun) HasLinter() bool {
	if o != nil && !isNil(o.Linter) {
		return true
	}

	return false
}

// SetLinter gets a reference to the given LinterResult and assigns it to the Linter field.
func (o *TestRun) SetLinter(v LinterResult) {
	o.Linter = &v
}

// GetOutputs returns the Outputs field value if set, zero value otherwise.
func (o *TestRun) GetOutputs() []TestRunOutputsInner {
	if o == nil || isNil(o.Outputs) {
		var ret []TestRunOutputsInner
		return ret
	}
	return o.Outputs
}

// GetOutputsOk returns a tuple with the Outputs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestRun) GetOutputsOk() ([]TestRunOutputsInner, bool) {
	if o == nil || isNil(o.Outputs) {
		return nil, false
	}
	return o.Outputs, true
}

// HasOutputs returns a boolean if a field has been set.
func (o *TestRun) HasOutputs() bool {
	if o != nil && !isNil(o.Outputs) {
		return true
	}

	return false
}

// SetOutputs gets a reference to the given []TestRunOutputsInner and assigns it to the Outputs field.
func (o *TestRun) SetOutputs(v []TestRunOutputsInner) {
	o.Outputs = v
}

// GetRequiredGatesResult returns the RequiredGatesResult field value if set, zero value otherwise.
func (o *TestRun) GetRequiredGatesResult() RequiredGatesResult {
	if o == nil || isNil(o.RequiredGatesResult) {
		var ret RequiredGatesResult
		return ret
	}
	return *o.RequiredGatesResult
}

// GetRequiredGatesResultOk returns a tuple with the RequiredGatesResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestRun) GetRequiredGatesResultOk() (*RequiredGatesResult, bool) {
	if o == nil || isNil(o.RequiredGatesResult) {
		return nil, false
	}
	return o.RequiredGatesResult, true
}

// HasRequiredGatesResult returns a boolean if a field has been set.
func (o *TestRun) HasRequiredGatesResult() bool {
	if o != nil && !isNil(o.RequiredGatesResult) {
		return true
	}

	return false
}

// SetRequiredGatesResult gets a reference to the given RequiredGatesResult and assigns it to the RequiredGatesResult field.
func (o *TestRun) SetRequiredGatesResult(v RequiredGatesResult) {
	o.RequiredGatesResult = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *TestRun) GetMetadata() map[string]string {
	if o == nil || isNil(o.Metadata) {
		var ret map[string]string
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestRun) GetMetadataOk() (*map[string]string, bool) {
	if o == nil || isNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *TestRun) HasMetadata() bool {
	if o != nil && !isNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]string and assigns it to the Metadata field.
func (o *TestRun) SetMetadata(v map[string]string) {
	o.Metadata = &v
}

// GetTestSuiteId returns the TestSuiteId field value if set, zero value otherwise.
func (o *TestRun) GetTestSuiteId() string {
	if o == nil || isNil(o.TestSuiteId) {
		var ret string
		return ret
	}
	return *o.TestSuiteId
}

// GetTestSuiteIdOk returns a tuple with the TestSuiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestRun) GetTestSuiteIdOk() (*string, bool) {
	if o == nil || isNil(o.TestSuiteId) {
		return nil, false
	}
	return o.TestSuiteId, true
}

// HasTestSuiteId returns a boolean if a field has been set.
func (o *TestRun) HasTestSuiteId() bool {
	if o != nil && !isNil(o.TestSuiteId) {
		return true
	}

	return false
}

// SetTestSuiteId gets a reference to the given string and assigns it to the TestSuiteId field.
func (o *TestRun) SetTestSuiteId(v string) {
	o.TestSuiteId = &v
}

// GetTestSuiteRunId returns the TestSuiteRunId field value if set, zero value otherwise.
func (o *TestRun) GetTestSuiteRunId() int32 {
	if o == nil || isNil(o.TestSuiteRunId) {
		var ret int32
		return ret
	}
	return *o.TestSuiteRunId
}

// GetTestSuiteRunIdOk returns a tuple with the TestSuiteRunId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestRun) GetTestSuiteRunIdOk() (*int32, bool) {
	if o == nil || isNil(o.TestSuiteRunId) {
		return nil, false
	}
	return o.TestSuiteRunId, true
}

// HasTestSuiteRunId returns a boolean if a field has been set.
func (o *TestRun) HasTestSuiteRunId() bool {
	if o != nil && !isNil(o.TestSuiteRunId) {
		return true
	}

	return false
}

// SetTestSuiteRunId gets a reference to the given int32 and assigns it to the TestSuiteRunId field.
func (o *TestRun) SetTestSuiteRunId(v int32) {
	o.TestSuiteRunId = &v
}

func (o TestRun) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TestRun) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: id is readOnly
	// skip: traceId is readOnly
	// skip: spanId is readOnly
	if !isNil(o.TestVersion) {
		toSerialize["testVersion"] = o.TestVersion
	}
	if !isNil(o.RunGroupId) {
		toSerialize["runGroupId"] = o.RunGroupId
	}
	if !isNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !isNil(o.LastErrorState) {
		toSerialize["lastErrorState"] = o.LastErrorState
	}
	if !isNil(o.ExecutionTime) {
		toSerialize["executionTime"] = o.ExecutionTime
	}
	if !isNil(o.TriggerTime) {
		toSerialize["triggerTime"] = o.TriggerTime
	}
	if !isNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !isNil(o.ServiceTriggeredAt) {
		toSerialize["serviceTriggeredAt"] = o.ServiceTriggeredAt
	}
	if !isNil(o.ServiceTriggerCompletedAt) {
		toSerialize["serviceTriggerCompletedAt"] = o.ServiceTriggerCompletedAt
	}
	if !isNil(o.ObtainedTraceAt) {
		toSerialize["obtainedTraceAt"] = o.ObtainedTraceAt
	}
	if !isNil(o.CompletedAt) {
		toSerialize["completedAt"] = o.CompletedAt
	}
	if !isNil(o.VariableSet) {
		toSerialize["variableSet"] = o.VariableSet
	}
	if !isNil(o.ResolvedTrigger) {
		toSerialize["resolvedTrigger"] = o.ResolvedTrigger
	}
	if !isNil(o.TriggerResult) {
		toSerialize["triggerResult"] = o.TriggerResult
	}
	if !isNil(o.Trace) {
		toSerialize["trace"] = o.Trace
	}
	if !isNil(o.Result) {
		toSerialize["result"] = o.Result
	}
	if !isNil(o.Linter) {
		toSerialize["linter"] = o.Linter
	}
	if !isNil(o.Outputs) {
		toSerialize["outputs"] = o.Outputs
	}
	if !isNil(o.RequiredGatesResult) {
		toSerialize["requiredGatesResult"] = o.RequiredGatesResult
	}
	if !isNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !isNil(o.TestSuiteId) {
		toSerialize["testSuiteId"] = o.TestSuiteId
	}
	if !isNil(o.TestSuiteRunId) {
		toSerialize["testSuiteRunId"] = o.TestSuiteRunId
	}
	return toSerialize, nil
}

type NullableTestRun struct {
	value *TestRun
	isSet bool
}

func (v NullableTestRun) Get() *TestRun {
	return v.value
}

func (v *NullableTestRun) Set(val *TestRun) {
	v.value = val
	v.isSet = true
}

func (v NullableTestRun) IsSet() bool {
	return v.isSet
}

func (v *NullableTestRun) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestRun(val *TestRun) *NullableTestRun {
	return &NullableTestRun{value: val, isSet: true}
}

func (v NullableTestRun) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestRun) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
