/*
TraceTest

OpenAPI definition for TraceTest endpoint and resources

API version: 0.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RunMonitorInformation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RunMonitorInformation{}

// RunMonitorInformation struct for RunMonitorInformation
type RunMonitorInformation struct {
	Metadata   map[string]string  `json:"metadata,omitempty"`
	RunGroupId *string            `json:"runGroupId,omitempty"`
	RunType    *string            `json:"runType,omitempty"`
	Variables  []VariableSetValue `json:"variables,omitempty"`
}

// NewRunMonitorInformation instantiates a new RunMonitorInformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRunMonitorInformation() *RunMonitorInformation {
	this := RunMonitorInformation{}
	return &this
}

// NewRunMonitorInformationWithDefaults instantiates a new RunMonitorInformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunMonitorInformationWithDefaults() *RunMonitorInformation {
	this := RunMonitorInformation{}
	return &this
}

// GetMetadata returns the Metadata field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RunMonitorInformation) GetMetadata() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RunMonitorInformation) GetMetadataOk() (*map[string]string, bool) {
	if o == nil || isNil(o.Metadata) {
		return nil, false
	}
	return &o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *RunMonitorInformation) HasMetadata() bool {
	if o != nil && isNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]string and assigns it to the Metadata field.
func (o *RunMonitorInformation) SetMetadata(v map[string]string) {
	o.Metadata = v
}

// GetRunGroupId returns the RunGroupId field value if set, zero value otherwise.
func (o *RunMonitorInformation) GetRunGroupId() string {
	if o == nil || isNil(o.RunGroupId) {
		var ret string
		return ret
	}
	return *o.RunGroupId
}

// GetRunGroupIdOk returns a tuple with the RunGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunMonitorInformation) GetRunGroupIdOk() (*string, bool) {
	if o == nil || isNil(o.RunGroupId) {
		return nil, false
	}
	return o.RunGroupId, true
}

// HasRunGroupId returns a boolean if a field has been set.
func (o *RunMonitorInformation) HasRunGroupId() bool {
	if o != nil && !isNil(o.RunGroupId) {
		return true
	}

	return false
}

// SetRunGroupId gets a reference to the given string and assigns it to the RunGroupId field.
func (o *RunMonitorInformation) SetRunGroupId(v string) {
	o.RunGroupId = &v
}

// GetRunType returns the RunType field value if set, zero value otherwise.
func (o *RunMonitorInformation) GetRunType() string {
	if o == nil || isNil(o.RunType) {
		var ret string
		return ret
	}
	return *o.RunType
}

// GetRunTypeOk returns a tuple with the RunType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunMonitorInformation) GetRunTypeOk() (*string, bool) {
	if o == nil || isNil(o.RunType) {
		return nil, false
	}
	return o.RunType, true
}

// HasRunType returns a boolean if a field has been set.
func (o *RunMonitorInformation) HasRunType() bool {
	if o != nil && !isNil(o.RunType) {
		return true
	}

	return false
}

// SetRunType gets a reference to the given string and assigns it to the RunType field.
func (o *RunMonitorInformation) SetRunType(v string) {
	o.RunType = &v
}

// GetVariables returns the Variables field value if set, zero value otherwise.
func (o *RunMonitorInformation) GetVariables() []VariableSetValue {
	if o == nil || isNil(o.Variables) {
		var ret []VariableSetValue
		return ret
	}
	return o.Variables
}

// GetVariablesOk returns a tuple with the Variables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunMonitorInformation) GetVariablesOk() ([]VariableSetValue, bool) {
	if o == nil || isNil(o.Variables) {
		return nil, false
	}
	return o.Variables, true
}

// HasVariables returns a boolean if a field has been set.
func (o *RunMonitorInformation) HasVariables() bool {
	if o != nil && !isNil(o.Variables) {
		return true
	}

	return false
}

// SetVariables gets a reference to the given []VariableSetValue and assigns it to the Variables field.
func (o *RunMonitorInformation) SetVariables(v []VariableSetValue) {
	o.Variables = v
}

func (o RunMonitorInformation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RunMonitorInformation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if !isNil(o.RunGroupId) {
		toSerialize["runGroupId"] = o.RunGroupId
	}
	if !isNil(o.RunType) {
		toSerialize["runType"] = o.RunType
	}
	if !isNil(o.Variables) {
		toSerialize["variables"] = o.Variables
	}
	return toSerialize, nil
}

type NullableRunMonitorInformation struct {
	value *RunMonitorInformation
	isSet bool
}

func (v NullableRunMonitorInformation) Get() *RunMonitorInformation {
	return v.value
}

func (v *NullableRunMonitorInformation) Set(val *RunMonitorInformation) {
	v.value = val
	v.isSet = true
}

func (v NullableRunMonitorInformation) IsSet() bool {
	return v.isSet
}

func (v *NullableRunMonitorInformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunMonitorInformation(val *RunMonitorInformation) *NullableRunMonitorInformation {
	return &NullableRunMonitorInformation{value: val, isSet: true}
}

func (v NullableRunMonitorInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunMonitorInformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
