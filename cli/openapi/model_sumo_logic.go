/*
TraceTest

OpenAPI definition for TraceTest endpoint and resources

API version: 0.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SumoLogic type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SumoLogic{}

// SumoLogic struct for SumoLogic
type SumoLogic struct {
	Url       *string `json:"url,omitempty"`
	AccessID  *string `json:"accessID,omitempty"`
	AccessKey *string `json:"accessKey,omitempty"`
}

// NewSumoLogic instantiates a new SumoLogic object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSumoLogic() *SumoLogic {
	this := SumoLogic{}
	return &this
}

// NewSumoLogicWithDefaults instantiates a new SumoLogic object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSumoLogicWithDefaults() *SumoLogic {
	this := SumoLogic{}
	return &this
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *SumoLogic) GetUrl() string {
	if o == nil || isNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SumoLogic) GetUrlOk() (*string, bool) {
	if o == nil || isNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *SumoLogic) HasUrl() bool {
	if o != nil && !isNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *SumoLogic) SetUrl(v string) {
	o.Url = &v
}

// GetAccessID returns the AccessID field value if set, zero value otherwise.
func (o *SumoLogic) GetAccessID() string {
	if o == nil || isNil(o.AccessID) {
		var ret string
		return ret
	}
	return *o.AccessID
}

// GetAccessIDOk returns a tuple with the AccessID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SumoLogic) GetAccessIDOk() (*string, bool) {
	if o == nil || isNil(o.AccessID) {
		return nil, false
	}
	return o.AccessID, true
}

// HasAccessID returns a boolean if a field has been set.
func (o *SumoLogic) HasAccessID() bool {
	if o != nil && !isNil(o.AccessID) {
		return true
	}

	return false
}

// SetAccessID gets a reference to the given string and assigns it to the AccessID field.
func (o *SumoLogic) SetAccessID(v string) {
	o.AccessID = &v
}

// GetAccessKey returns the AccessKey field value if set, zero value otherwise.
func (o *SumoLogic) GetAccessKey() string {
	if o == nil || isNil(o.AccessKey) {
		var ret string
		return ret
	}
	return *o.AccessKey
}

// GetAccessKeyOk returns a tuple with the AccessKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SumoLogic) GetAccessKeyOk() (*string, bool) {
	if o == nil || isNil(o.AccessKey) {
		return nil, false
	}
	return o.AccessKey, true
}

// HasAccessKey returns a boolean if a field has been set.
func (o *SumoLogic) HasAccessKey() bool {
	if o != nil && !isNil(o.AccessKey) {
		return true
	}

	return false
}

// SetAccessKey gets a reference to the given string and assigns it to the AccessKey field.
func (o *SumoLogic) SetAccessKey(v string) {
	o.AccessKey = &v
}

func (o SumoLogic) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SumoLogic) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !isNil(o.AccessID) {
		toSerialize["accessID"] = o.AccessID
	}
	if !isNil(o.AccessKey) {
		toSerialize["accessKey"] = o.AccessKey
	}
	return toSerialize, nil
}

type NullableSumoLogic struct {
	value *SumoLogic
	isSet bool
}

func (v NullableSumoLogic) Get() *SumoLogic {
	return v.value
}

func (v *NullableSumoLogic) Set(val *SumoLogic) {
	v.value = val
	v.isSet = true
}

func (v NullableSumoLogic) IsSet() bool {
	return v.isSet
}

func (v *NullableSumoLogic) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSumoLogic(val *SumoLogic) *NullableSumoLogic {
	return &NullableSumoLogic{value: val, isSet: true}
}

func (v NullableSumoLogic) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSumoLogic) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
