/*
TraceTest

OpenAPI definition for TraceTest endpoint and resources

API version: 0.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ListTracesResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListTracesResponse{}

// ListTracesResponse struct for ListTracesResponse
type ListTracesResponse struct {
	Traces []TraceMetadata `json:"traces,omitempty"`
	Error  *string         `json:"error,omitempty"`
}

// NewListTracesResponse instantiates a new ListTracesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListTracesResponse() *ListTracesResponse {
	this := ListTracesResponse{}
	return &this
}

// NewListTracesResponseWithDefaults instantiates a new ListTracesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListTracesResponseWithDefaults() *ListTracesResponse {
	this := ListTracesResponse{}
	return &this
}

// GetTraces returns the Traces field value if set, zero value otherwise.
func (o *ListTracesResponse) GetTraces() []TraceMetadata {
	if o == nil || isNil(o.Traces) {
		var ret []TraceMetadata
		return ret
	}
	return o.Traces
}

// GetTracesOk returns a tuple with the Traces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListTracesResponse) GetTracesOk() ([]TraceMetadata, bool) {
	if o == nil || isNil(o.Traces) {
		return nil, false
	}
	return o.Traces, true
}

// HasTraces returns a boolean if a field has been set.
func (o *ListTracesResponse) HasTraces() bool {
	if o != nil && !isNil(o.Traces) {
		return true
	}

	return false
}

// SetTraces gets a reference to the given []TraceMetadata and assigns it to the Traces field.
func (o *ListTracesResponse) SetTraces(v []TraceMetadata) {
	o.Traces = v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *ListTracesResponse) GetError() string {
	if o == nil || isNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListTracesResponse) GetErrorOk() (*string, bool) {
	if o == nil || isNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *ListTracesResponse) HasError() bool {
	if o != nil && !isNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *ListTracesResponse) SetError(v string) {
	o.Error = &v
}

func (o ListTracesResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListTracesResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Traces) {
		toSerialize["traces"] = o.Traces
	}
	if !isNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	return toSerialize, nil
}

type NullableListTracesResponse struct {
	value *ListTracesResponse
	isSet bool
}

func (v NullableListTracesResponse) Get() *ListTracesResponse {
	return v.value
}

func (v *NullableListTracesResponse) Set(val *ListTracesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListTracesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListTracesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListTracesResponse(val *ListTracesResponse) *NullableListTracesResponse {
	return &NullableListTracesResponse{value: val, isSet: true}
}

func (v NullableListTracesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListTracesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
