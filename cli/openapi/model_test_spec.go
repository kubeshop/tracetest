/*
TraceTest

OpenAPI definition for TraceTest endpoint and resources

API version: 0.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TestSpec struct for TestSpec
type TestSpec struct {
	Specs []TestSpecSpecs `json:"specs,omitempty"`
}

// NewTestSpec instantiates a new TestSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestSpec() *TestSpec {
	this := TestSpec{}
	return &this
}

// NewTestSpecWithDefaults instantiates a new TestSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestSpecWithDefaults() *TestSpec {
	this := TestSpec{}
	return &this
}

// GetSpecs returns the Specs field value if set, zero value otherwise.
func (o *TestSpec) GetSpecs() []TestSpecSpecs {
	if o == nil || o.Specs == nil {
		var ret []TestSpecSpecs
		return ret
	}
	return o.Specs
}

// GetSpecsOk returns a tuple with the Specs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestSpec) GetSpecsOk() ([]TestSpecSpecs, bool) {
	if o == nil || o.Specs == nil {
		return nil, false
	}
	return o.Specs, true
}

// HasSpecs returns a boolean if a field has been set.
func (o *TestSpec) HasSpecs() bool {
	if o != nil && o.Specs != nil {
		return true
	}

	return false
}

// SetSpecs gets a reference to the given []TestSpecSpecs and assigns it to the Specs field.
func (o *TestSpec) SetSpecs(v []TestSpecSpecs) {
	o.Specs = v
}

func (o TestSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Specs != nil {
		toSerialize["specs"] = o.Specs
	}
	return json.Marshal(toSerialize)
}

type NullableTestSpec struct {
	value *TestSpec
	isSet bool
}

func (v NullableTestSpec) Get() *TestSpec {
	return v.value
}

func (v *NullableTestSpec) Set(val *TestSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableTestSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableTestSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestSpec(val *TestSpec) *NullableTestSpec {
	return &NullableTestSpec{value: val, isSet: true}
}

func (v NullableTestSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
