/*
TraceTest

OpenAPI definition for TraceTest endpoint and resources

API version: 0.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TestSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TestSpec{}

// TestSpec struct for TestSpec
type TestSpec struct {
	Name           *string   `json:"name,omitempty"`
	Selector       *string   `json:"selector,omitempty"`
	SelectorParsed *Selector `json:"selectorParsed,omitempty"`
	Assertions     []string  `json:"assertions,omitempty"`
}

// NewTestSpec instantiates a new TestSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestSpec() *TestSpec {
	this := TestSpec{}
	return &this
}

// NewTestSpecWithDefaults instantiates a new TestSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestSpecWithDefaults() *TestSpec {
	this := TestSpec{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TestSpec) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestSpec) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TestSpec) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TestSpec) SetName(v string) {
	o.Name = &v
}

// GetSelector returns the Selector field value if set, zero value otherwise.
func (o *TestSpec) GetSelector() string {
	if o == nil || isNil(o.Selector) {
		var ret string
		return ret
	}
	return *o.Selector
}

// GetSelectorOk returns a tuple with the Selector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestSpec) GetSelectorOk() (*string, bool) {
	if o == nil || isNil(o.Selector) {
		return nil, false
	}
	return o.Selector, true
}

// HasSelector returns a boolean if a field has been set.
func (o *TestSpec) HasSelector() bool {
	if o != nil && !isNil(o.Selector) {
		return true
	}

	return false
}

// SetSelector gets a reference to the given string and assigns it to the Selector field.
func (o *TestSpec) SetSelector(v string) {
	o.Selector = &v
}

// GetSelectorParsed returns the SelectorParsed field value if set, zero value otherwise.
func (o *TestSpec) GetSelectorParsed() Selector {
	if o == nil || isNil(o.SelectorParsed) {
		var ret Selector
		return ret
	}
	return *o.SelectorParsed
}

// GetSelectorParsedOk returns a tuple with the SelectorParsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestSpec) GetSelectorParsedOk() (*Selector, bool) {
	if o == nil || isNil(o.SelectorParsed) {
		return nil, false
	}
	return o.SelectorParsed, true
}

// HasSelectorParsed returns a boolean if a field has been set.
func (o *TestSpec) HasSelectorParsed() bool {
	if o != nil && !isNil(o.SelectorParsed) {
		return true
	}

	return false
}

// SetSelectorParsed gets a reference to the given Selector and assigns it to the SelectorParsed field.
func (o *TestSpec) SetSelectorParsed(v Selector) {
	o.SelectorParsed = &v
}

// GetAssertions returns the Assertions field value if set, zero value otherwise.
func (o *TestSpec) GetAssertions() []string {
	if o == nil || isNil(o.Assertions) {
		var ret []string
		return ret
	}
	return o.Assertions
}

// GetAssertionsOk returns a tuple with the Assertions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestSpec) GetAssertionsOk() ([]string, bool) {
	if o == nil || isNil(o.Assertions) {
		return nil, false
	}
	return o.Assertions, true
}

// HasAssertions returns a boolean if a field has been set.
func (o *TestSpec) HasAssertions() bool {
	if o != nil && !isNil(o.Assertions) {
		return true
	}

	return false
}

// SetAssertions gets a reference to the given []string and assigns it to the Assertions field.
func (o *TestSpec) SetAssertions(v []string) {
	o.Assertions = v
}

func (o TestSpec) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TestSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Selector) {
		toSerialize["selector"] = o.Selector
	}
	if !isNil(o.SelectorParsed) {
		toSerialize["selectorParsed"] = o.SelectorParsed
	}
	if !isNil(o.Assertions) {
		toSerialize["assertions"] = o.Assertions
	}
	return toSerialize, nil
}

type NullableTestSpec struct {
	value *TestSpec
	isSet bool
}

func (v NullableTestSpec) Get() *TestSpec {
	return v.value
}

func (v *NullableTestSpec) Set(val *TestSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableTestSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableTestSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestSpec(val *TestSpec) *NullableTestSpec {
	return &NullableTestSpec{value: val, isSet: true}
}

func (v NullableTestSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
