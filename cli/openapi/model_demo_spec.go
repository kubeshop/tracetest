/*
TraceTest

OpenAPI definition for TraceTest endpoint and resources

API version: 0.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// DemoSpec - Represents the attributes of a Demonstration API.
type DemoSpec struct {
	DemoOpenTelemetryStore *DemoOpenTelemetryStore
	DemoPokeshop           *DemoPokeshop
}

// DemoOpenTelemetryStoreAsDemoSpec is a convenience function that returns DemoOpenTelemetryStore wrapped in DemoSpec
func DemoOpenTelemetryStoreAsDemoSpec(v *DemoOpenTelemetryStore) DemoSpec {
	return DemoSpec{
		DemoOpenTelemetryStore: v,
	}
}

// DemoPokeshopAsDemoSpec is a convenience function that returns DemoPokeshop wrapped in DemoSpec
func DemoPokeshopAsDemoSpec(v *DemoPokeshop) DemoSpec {
	return DemoSpec{
		DemoPokeshop: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *DemoSpec) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DemoOpenTelemetryStore
	err = newStrictDecoder(data).Decode(&dst.DemoOpenTelemetryStore)
	if err == nil {
		jsonDemoOpenTelemetryStore, _ := json.Marshal(dst.DemoOpenTelemetryStore)
		if string(jsonDemoOpenTelemetryStore) == "{}" { // empty struct
			dst.DemoOpenTelemetryStore = nil
		} else {
			match++
		}
	} else {
		dst.DemoOpenTelemetryStore = nil
	}

	// try to unmarshal data into DemoPokeshop
	err = newStrictDecoder(data).Decode(&dst.DemoPokeshop)
	if err == nil {
		jsonDemoPokeshop, _ := json.Marshal(dst.DemoPokeshop)
		if string(jsonDemoPokeshop) == "{}" { // empty struct
			dst.DemoPokeshop = nil
		} else {
			match++
		}
	} else {
		dst.DemoPokeshop = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DemoOpenTelemetryStore = nil
		dst.DemoPokeshop = nil

		return fmt.Errorf("data matches more than one schema in oneOf(DemoSpec)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(DemoSpec)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src DemoSpec) MarshalJSON() ([]byte, error) {
	if src.DemoOpenTelemetryStore != nil {
		return json.Marshal(&src.DemoOpenTelemetryStore)
	}

	if src.DemoPokeshop != nil {
		return json.Marshal(&src.DemoPokeshop)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *DemoSpec) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.DemoOpenTelemetryStore != nil {
		return obj.DemoOpenTelemetryStore
	}

	if obj.DemoPokeshop != nil {
		return obj.DemoPokeshop
	}

	// all schemas are nil
	return nil
}

type NullableDemoSpec struct {
	value *DemoSpec
	isSet bool
}

func (v NullableDemoSpec) Get() *DemoSpec {
	return v.value
}

func (v *NullableDemoSpec) Set(val *DemoSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableDemoSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableDemoSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDemoSpec(val *DemoSpec) *NullableDemoSpec {
	return &NullableDemoSpec{value: val, isSet: true}
}

func (v NullableDemoSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDemoSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
