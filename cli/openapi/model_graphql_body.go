/*
TraceTest

OpenAPI definition for TraceTest endpoint and resources

API version: 0.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the GraphqlBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GraphqlBody{}

// GraphqlBody struct for GraphqlBody
type GraphqlBody struct {
	Query         *string            `json:"query,omitempty"`
	Variables     *map[string]string `json:"variables,omitempty"`
	OperationName *string            `json:"operationName,omitempty"`
}

// NewGraphqlBody instantiates a new GraphqlBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGraphqlBody() *GraphqlBody {
	this := GraphqlBody{}
	return &this
}

// NewGraphqlBodyWithDefaults instantiates a new GraphqlBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGraphqlBodyWithDefaults() *GraphqlBody {
	this := GraphqlBody{}
	return &this
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *GraphqlBody) GetQuery() string {
	if o == nil || isNil(o.Query) {
		var ret string
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphqlBody) GetQueryOk() (*string, bool) {
	if o == nil || isNil(o.Query) {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *GraphqlBody) HasQuery() bool {
	if o != nil && !isNil(o.Query) {
		return true
	}

	return false
}

// SetQuery gets a reference to the given string and assigns it to the Query field.
func (o *GraphqlBody) SetQuery(v string) {
	o.Query = &v
}

// GetVariables returns the Variables field value if set, zero value otherwise.
func (o *GraphqlBody) GetVariables() map[string]string {
	if o == nil || isNil(o.Variables) {
		var ret map[string]string
		return ret
	}
	return *o.Variables
}

// GetVariablesOk returns a tuple with the Variables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphqlBody) GetVariablesOk() (*map[string]string, bool) {
	if o == nil || isNil(o.Variables) {
		return nil, false
	}
	return o.Variables, true
}

// HasVariables returns a boolean if a field has been set.
func (o *GraphqlBody) HasVariables() bool {
	if o != nil && !isNil(o.Variables) {
		return true
	}

	return false
}

// SetVariables gets a reference to the given map[string]string and assigns it to the Variables field.
func (o *GraphqlBody) SetVariables(v map[string]string) {
	o.Variables = &v
}

// GetOperationName returns the OperationName field value if set, zero value otherwise.
func (o *GraphqlBody) GetOperationName() string {
	if o == nil || isNil(o.OperationName) {
		var ret string
		return ret
	}
	return *o.OperationName
}

// GetOperationNameOk returns a tuple with the OperationName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphqlBody) GetOperationNameOk() (*string, bool) {
	if o == nil || isNil(o.OperationName) {
		return nil, false
	}
	return o.OperationName, true
}

// HasOperationName returns a boolean if a field has been set.
func (o *GraphqlBody) HasOperationName() bool {
	if o != nil && !isNil(o.OperationName) {
		return true
	}

	return false
}

// SetOperationName gets a reference to the given string and assigns it to the OperationName field.
func (o *GraphqlBody) SetOperationName(v string) {
	o.OperationName = &v
}

func (o GraphqlBody) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GraphqlBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Query) {
		toSerialize["query"] = o.Query
	}
	if !isNil(o.Variables) {
		toSerialize["variables"] = o.Variables
	}
	if !isNil(o.OperationName) {
		toSerialize["operationName"] = o.OperationName
	}
	return toSerialize, nil
}

type NullableGraphqlBody struct {
	value *GraphqlBody
	isSet bool
}

func (v NullableGraphqlBody) Get() *GraphqlBody {
	return v.value
}

func (v *NullableGraphqlBody) Set(val *GraphqlBody) {
	v.value = val
	v.isSet = true
}

func (v NullableGraphqlBody) IsSet() bool {
	return v.isSet
}

func (v *NullableGraphqlBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGraphqlBody(val *GraphqlBody) *NullableGraphqlBody {
	return &NullableGraphqlBody{value: val, isSet: true}
}

func (v NullableGraphqlBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGraphqlBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
