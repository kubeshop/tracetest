/*
TraceTest

OpenAPI definition for TraceTest endpoint and resources

API version: 0.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PollingInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PollingInfo{}

// PollingInfo struct for PollingInfo
type PollingInfo struct {
	NumberSpans         *int32  `json:"numberSpans,omitempty"`
	NumberIterations    *int32  `json:"numberIterations,omitempty"`
	ReasonNextIteration *string `json:"reasonNextIteration,omitempty"`
	IsComplete          *bool   `json:"isComplete,omitempty"`
}

// NewPollingInfo instantiates a new PollingInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPollingInfo() *PollingInfo {
	this := PollingInfo{}
	return &this
}

// NewPollingInfoWithDefaults instantiates a new PollingInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPollingInfoWithDefaults() *PollingInfo {
	this := PollingInfo{}
	return &this
}

// GetNumberSpans returns the NumberSpans field value if set, zero value otherwise.
func (o *PollingInfo) GetNumberSpans() int32 {
	if o == nil || isNil(o.NumberSpans) {
		var ret int32
		return ret
	}
	return *o.NumberSpans
}

// GetNumberSpansOk returns a tuple with the NumberSpans field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PollingInfo) GetNumberSpansOk() (*int32, bool) {
	if o == nil || isNil(o.NumberSpans) {
		return nil, false
	}
	return o.NumberSpans, true
}

// HasNumberSpans returns a boolean if a field has been set.
func (o *PollingInfo) HasNumberSpans() bool {
	if o != nil && !isNil(o.NumberSpans) {
		return true
	}

	return false
}

// SetNumberSpans gets a reference to the given int32 and assigns it to the NumberSpans field.
func (o *PollingInfo) SetNumberSpans(v int32) {
	o.NumberSpans = &v
}

// GetNumberIterations returns the NumberIterations field value if set, zero value otherwise.
func (o *PollingInfo) GetNumberIterations() int32 {
	if o == nil || isNil(o.NumberIterations) {
		var ret int32
		return ret
	}
	return *o.NumberIterations
}

// GetNumberIterationsOk returns a tuple with the NumberIterations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PollingInfo) GetNumberIterationsOk() (*int32, bool) {
	if o == nil || isNil(o.NumberIterations) {
		return nil, false
	}
	return o.NumberIterations, true
}

// HasNumberIterations returns a boolean if a field has been set.
func (o *PollingInfo) HasNumberIterations() bool {
	if o != nil && !isNil(o.NumberIterations) {
		return true
	}

	return false
}

// SetNumberIterations gets a reference to the given int32 and assigns it to the NumberIterations field.
func (o *PollingInfo) SetNumberIterations(v int32) {
	o.NumberIterations = &v
}

// GetReasonNextIteration returns the ReasonNextIteration field value if set, zero value otherwise.
func (o *PollingInfo) GetReasonNextIteration() string {
	if o == nil || isNil(o.ReasonNextIteration) {
		var ret string
		return ret
	}
	return *o.ReasonNextIteration
}

// GetReasonNextIterationOk returns a tuple with the ReasonNextIteration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PollingInfo) GetReasonNextIterationOk() (*string, bool) {
	if o == nil || isNil(o.ReasonNextIteration) {
		return nil, false
	}
	return o.ReasonNextIteration, true
}

// HasReasonNextIteration returns a boolean if a field has been set.
func (o *PollingInfo) HasReasonNextIteration() bool {
	if o != nil && !isNil(o.ReasonNextIteration) {
		return true
	}

	return false
}

// SetReasonNextIteration gets a reference to the given string and assigns it to the ReasonNextIteration field.
func (o *PollingInfo) SetReasonNextIteration(v string) {
	o.ReasonNextIteration = &v
}

// GetIsComplete returns the IsComplete field value if set, zero value otherwise.
func (o *PollingInfo) GetIsComplete() bool {
	if o == nil || isNil(o.IsComplete) {
		var ret bool
		return ret
	}
	return *o.IsComplete
}

// GetIsCompleteOk returns a tuple with the IsComplete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PollingInfo) GetIsCompleteOk() (*bool, bool) {
	if o == nil || isNil(o.IsComplete) {
		return nil, false
	}
	return o.IsComplete, true
}

// HasIsComplete returns a boolean if a field has been set.
func (o *PollingInfo) HasIsComplete() bool {
	if o != nil && !isNil(o.IsComplete) {
		return true
	}

	return false
}

// SetIsComplete gets a reference to the given bool and assigns it to the IsComplete field.
func (o *PollingInfo) SetIsComplete(v bool) {
	o.IsComplete = &v
}

func (o PollingInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PollingInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.NumberSpans) {
		toSerialize["numberSpans"] = o.NumberSpans
	}
	if !isNil(o.NumberIterations) {
		toSerialize["numberIterations"] = o.NumberIterations
	}
	if !isNil(o.ReasonNextIteration) {
		toSerialize["reasonNextIteration"] = o.ReasonNextIteration
	}
	if !isNil(o.IsComplete) {
		toSerialize["isComplete"] = o.IsComplete
	}
	return toSerialize, nil
}

type NullablePollingInfo struct {
	value *PollingInfo
	isSet bool
}

func (v NullablePollingInfo) Get() *PollingInfo {
	return v.value
}

func (v *NullablePollingInfo) Set(val *PollingInfo) {
	v.value = val
	v.isSet = true
}

func (v NullablePollingInfo) IsSet() bool {
	return v.isSet
}

func (v *NullablePollingInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePollingInfo(val *PollingInfo) *NullablePollingInfo {
	return &NullablePollingInfo{value: val, isSet: true}
}

func (v NullablePollingInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePollingInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
