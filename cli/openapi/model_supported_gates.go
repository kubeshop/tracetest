/*
TraceTest

OpenAPI definition for TraceTest endpoint and resources

API version: 0.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// SupportedGates the model 'SupportedGates'
type SupportedGates string

// List of SupportedGates
const (
	ANALYZER_SCORE SupportedGates = "analyzer-score"
	ANALYZER_RULES SupportedGates = "analyzer-rules"
	TEST_SPECS     SupportedGates = "test-specs"
)

// All allowed values of SupportedGates enum
var AllowedSupportedGatesEnumValues = []SupportedGates{
	"analyzer-score",
	"analyzer-rules",
	"test-specs",
}

func (v *SupportedGates) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SupportedGates(value)
	for _, existing := range AllowedSupportedGatesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SupportedGates", value)
}

// NewSupportedGatesFromValue returns a pointer to a valid SupportedGates
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSupportedGatesFromValue(v string) (*SupportedGates, error) {
	ev := SupportedGates(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SupportedGates: valid values are %v", v, AllowedSupportedGatesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SupportedGates) IsValid() bool {
	for _, existing := range AllowedSupportedGatesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SupportedGates value
func (v SupportedGates) Ptr() *SupportedGates {
	return &v
}

type NullableSupportedGates struct {
	value *SupportedGates
	isSet bool
}

func (v NullableSupportedGates) Get() *SupportedGates {
	return v.value
}

func (v *NullableSupportedGates) Set(val *SupportedGates) {
	v.value = val
	v.isSet = true
}

func (v NullableSupportedGates) IsSet() bool {
	return v.isSet
}

func (v *NullableSupportedGates) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSupportedGates(val *SupportedGates) *NullableSupportedGates {
	return &NullableSupportedGates{value: val, isSet: true}
}

func (v NullableSupportedGates) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSupportedGates) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
