/*
TraceTest

OpenAPI definition for TraceTest endpoint and resources

API version: 0.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MissingVariable struct for MissingVariable
type MissingVariable struct {
	TestId    *string    `json:"testId,omitempty"`
	Variables []Variable `json:"variables,omitempty"`
}

// NewMissingVariable instantiates a new MissingVariable object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMissingVariable() *MissingVariable {
	this := MissingVariable{}
	return &this
}

// NewMissingVariableWithDefaults instantiates a new MissingVariable object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMissingVariableWithDefaults() *MissingVariable {
	this := MissingVariable{}
	return &this
}

// GetTestId returns the TestId field value if set, zero value otherwise.
func (o *MissingVariable) GetTestId() string {
	if o == nil || o.TestId == nil {
		var ret string
		return ret
	}
	return *o.TestId
}

// GetTestIdOk returns a tuple with the TestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MissingVariable) GetTestIdOk() (*string, bool) {
	if o == nil || o.TestId == nil {
		return nil, false
	}
	return o.TestId, true
}

// HasTestId returns a boolean if a field has been set.
func (o *MissingVariable) HasTestId() bool {
	if o != nil && o.TestId != nil {
		return true
	}

	return false
}

// SetTestId gets a reference to the given string and assigns it to the TestId field.
func (o *MissingVariable) SetTestId(v string) {
	o.TestId = &v
}

// GetVariables returns the Variables field value if set, zero value otherwise.
func (o *MissingVariable) GetVariables() []Variable {
	if o == nil || o.Variables == nil {
		var ret []Variable
		return ret
	}
	return o.Variables
}

// GetVariablesOk returns a tuple with the Variables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MissingVariable) GetVariablesOk() ([]Variable, bool) {
	if o == nil || o.Variables == nil {
		return nil, false
	}
	return o.Variables, true
}

// HasVariables returns a boolean if a field has been set.
func (o *MissingVariable) HasVariables() bool {
	if o != nil && o.Variables != nil {
		return true
	}

	return false
}

// SetVariables gets a reference to the given []Variable and assigns it to the Variables field.
func (o *MissingVariable) SetVariables(v []Variable) {
	o.Variables = v
}

func (o MissingVariable) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TestId != nil {
		toSerialize["testId"] = o.TestId
	}
	if o.Variables != nil {
		toSerialize["variables"] = o.Variables
	}
	return json.Marshal(toSerialize)
}

type NullableMissingVariable struct {
	value *MissingVariable
	isSet bool
}

func (v NullableMissingVariable) Get() *MissingVariable {
	return v.value
}

func (v *NullableMissingVariable) Set(val *MissingVariable) {
	v.value = val
	v.isSet = true
}

func (v NullableMissingVariable) IsSet() bool {
	return v.isSet
}

func (v *NullableMissingVariable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMissingVariable(val *MissingVariable) *NullableMissingVariable {
	return &NullableMissingVariable{value: val, isSet: true}
}

func (v NullableMissingVariable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMissingVariable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
