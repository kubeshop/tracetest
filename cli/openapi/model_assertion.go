/*
TraceTest

OpenAPI definition for TraceTest endpoint and resources

API version: 0.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Assertion struct for Assertion
type Assertion struct {
	Attribute  *string `json:"attribute,omitempty"`
	Comparator *string `json:"comparator,omitempty"`
	Expected   *string `json:"expected,omitempty"`
}

// NewAssertion instantiates a new Assertion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssertion() *Assertion {
	this := Assertion{}
	return &this
}

// NewAssertionWithDefaults instantiates a new Assertion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssertionWithDefaults() *Assertion {
	this := Assertion{}
	return &this
}

// GetAttribute returns the Attribute field value if set, zero value otherwise.
func (o *Assertion) GetAttribute() string {
	if o == nil || o.Attribute == nil {
		var ret string
		return ret
	}
	return *o.Attribute
}

// GetAttributeOk returns a tuple with the Attribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Assertion) GetAttributeOk() (*string, bool) {
	if o == nil || o.Attribute == nil {
		return nil, false
	}
	return o.Attribute, true
}

// HasAttribute returns a boolean if a field has been set.
func (o *Assertion) HasAttribute() bool {
	if o != nil && o.Attribute != nil {
		return true
	}

	return false
}

// SetAttribute gets a reference to the given string and assigns it to the Attribute field.
func (o *Assertion) SetAttribute(v string) {
	o.Attribute = &v
}

// GetComparator returns the Comparator field value if set, zero value otherwise.
func (o *Assertion) GetComparator() string {
	if o == nil || o.Comparator == nil {
		var ret string
		return ret
	}
	return *o.Comparator
}

// GetComparatorOk returns a tuple with the Comparator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Assertion) GetComparatorOk() (*string, bool) {
	if o == nil || o.Comparator == nil {
		return nil, false
	}
	return o.Comparator, true
}

// HasComparator returns a boolean if a field has been set.
func (o *Assertion) HasComparator() bool {
	if o != nil && o.Comparator != nil {
		return true
	}

	return false
}

// SetComparator gets a reference to the given string and assigns it to the Comparator field.
func (o *Assertion) SetComparator(v string) {
	o.Comparator = &v
}

// GetExpected returns the Expected field value if set, zero value otherwise.
func (o *Assertion) GetExpected() string {
	if o == nil || o.Expected == nil {
		var ret string
		return ret
	}
	return *o.Expected
}

// GetExpectedOk returns a tuple with the Expected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Assertion) GetExpectedOk() (*string, bool) {
	if o == nil || o.Expected == nil {
		return nil, false
	}
	return o.Expected, true
}

// HasExpected returns a boolean if a field has been set.
func (o *Assertion) HasExpected() bool {
	if o != nil && o.Expected != nil {
		return true
	}

	return false
}

// SetExpected gets a reference to the given string and assigns it to the Expected field.
func (o *Assertion) SetExpected(v string) {
	o.Expected = &v
}

func (o Assertion) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Attribute != nil {
		toSerialize["attribute"] = o.Attribute
	}
	if o.Comparator != nil {
		toSerialize["comparator"] = o.Comparator
	}
	if o.Expected != nil {
		toSerialize["expected"] = o.Expected
	}
	return json.Marshal(toSerialize)
}

type NullableAssertion struct {
	value *Assertion
	isSet bool
}

func (v NullableAssertion) Get() *Assertion {
	return v.value
}

func (v *NullableAssertion) Set(val *Assertion) {
	v.value = val
	v.isSet = true
}

func (v NullableAssertion) IsSet() bool {
	return v.isSet
}

func (v *NullableAssertion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssertion(val *Assertion) *NullableAssertion {
	return &NullableAssertion{value: val, isSet: true}
}

func (v NullableAssertion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssertion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
