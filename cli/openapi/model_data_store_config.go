/*
TraceTest

OpenAPI definition for TraceTest endpoint and resources

API version: 0.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// DataStoreConfig struct for DataStoreConfig
type DataStoreConfig struct {
	DataStores       []DataStore1 `json:"dataStores,omitempty"`
	DefaultDataStore *string      `json:"defaultDataStore,omitempty"`
}

// NewDataStoreConfig instantiates a new DataStoreConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataStoreConfig() *DataStoreConfig {
	this := DataStoreConfig{}
	return &this
}

// NewDataStoreConfigWithDefaults instantiates a new DataStoreConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataStoreConfigWithDefaults() *DataStoreConfig {
	this := DataStoreConfig{}
	return &this
}

// GetDataStores returns the DataStores field value if set, zero value otherwise.
func (o *DataStoreConfig) GetDataStores() []DataStore1 {
	if o == nil || o.DataStores == nil {
		var ret []DataStore1
		return ret
	}
	return o.DataStores
}

// GetDataStoresOk returns a tuple with the DataStores field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataStoreConfig) GetDataStoresOk() ([]DataStore1, bool) {
	if o == nil || o.DataStores == nil {
		return nil, false
	}
	return o.DataStores, true
}

// HasDataStores returns a boolean if a field has been set.
func (o *DataStoreConfig) HasDataStores() bool {
	if o != nil && o.DataStores != nil {
		return true
	}

	return false
}

// SetDataStores gets a reference to the given []DataStore1 and assigns it to the DataStores field.
func (o *DataStoreConfig) SetDataStores(v []DataStore1) {
	o.DataStores = v
}

// GetDefaultDataStore returns the DefaultDataStore field value if set, zero value otherwise.
func (o *DataStoreConfig) GetDefaultDataStore() string {
	if o == nil || o.DefaultDataStore == nil {
		var ret string
		return ret
	}
	return *o.DefaultDataStore
}

// GetDefaultDataStoreOk returns a tuple with the DefaultDataStore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataStoreConfig) GetDefaultDataStoreOk() (*string, bool) {
	if o == nil || o.DefaultDataStore == nil {
		return nil, false
	}
	return o.DefaultDataStore, true
}

// HasDefaultDataStore returns a boolean if a field has been set.
func (o *DataStoreConfig) HasDefaultDataStore() bool {
	if o != nil && o.DefaultDataStore != nil {
		return true
	}

	return false
}

// SetDefaultDataStore gets a reference to the given string and assigns it to the DefaultDataStore field.
func (o *DataStoreConfig) SetDefaultDataStore(v string) {
	o.DefaultDataStore = &v
}

func (o DataStoreConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DataStores != nil {
		toSerialize["dataStores"] = o.DataStores
	}
	if o.DefaultDataStore != nil {
		toSerialize["defaultDataStore"] = o.DefaultDataStore
	}
	return json.Marshal(toSerialize)
}

type NullableDataStoreConfig struct {
	value *DataStoreConfig
	isSet bool
}

func (v NullableDataStoreConfig) Get() *DataStoreConfig {
	return v.value
}

func (v *NullableDataStoreConfig) Set(val *DataStoreConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableDataStoreConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableDataStoreConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataStoreConfig(val *DataStoreConfig) *NullableDataStoreConfig {
	return &NullableDataStoreConfig{value: val, isSet: true}
}

func (v NullableDataStoreConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataStoreConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
