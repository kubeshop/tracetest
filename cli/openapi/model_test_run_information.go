/*
TraceTest

OpenAPI definition for TraceTest endpoint and resources

API version: 0.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TestRunInformation struct for TestRunInformation
type TestRunInformation struct {
	Metadata map[string]string `json:"metadata,omitempty"`
}

// NewTestRunInformation instantiates a new TestRunInformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestRunInformation() *TestRunInformation {
	this := TestRunInformation{}
	return &this
}

// NewTestRunInformationWithDefaults instantiates a new TestRunInformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestRunInformationWithDefaults() *TestRunInformation {
	this := TestRunInformation{}
	return &this
}

// GetMetadata returns the Metadata field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestRunInformation) GetMetadata() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestRunInformation) GetMetadataOk() (*map[string]string, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return &o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *TestRunInformation) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]string and assigns it to the Metadata field.
func (o *TestRunInformation) SetMetadata(v map[string]string) {
	o.Metadata = v
}

func (o TestRunInformation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	return json.Marshal(toSerialize)
}

type NullableTestRunInformation struct {
	value *TestRunInformation
	isSet bool
}

func (v NullableTestRunInformation) Get() *TestRunInformation {
	return v.value
}

func (v *NullableTestRunInformation) Set(val *TestRunInformation) {
	v.value = val
	v.isSet = true
}

func (v NullableTestRunInformation) IsSet() bool {
	return v.isSet
}

func (v *NullableTestRunInformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestRunInformation(val *TestRunInformation) *NullableTestRunInformation {
	return &NullableTestRunInformation{value: val, isSet: true}
}

func (v NullableTestRunInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestRunInformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
