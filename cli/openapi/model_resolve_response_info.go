/*
TraceTest

OpenAPI definition for TraceTest endpoint and resources

API version: 0.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ResolveResponseInfo struct for ResolveResponseInfo
type ResolveResponseInfo struct {
	ResolvedValues []string `json:"resolvedValues,omitempty"`
}

// NewResolveResponseInfo instantiates a new ResolveResponseInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResolveResponseInfo() *ResolveResponseInfo {
	this := ResolveResponseInfo{}
	return &this
}

// NewResolveResponseInfoWithDefaults instantiates a new ResolveResponseInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResolveResponseInfoWithDefaults() *ResolveResponseInfo {
	this := ResolveResponseInfo{}
	return &this
}

// GetResolvedValues returns the ResolvedValues field value if set, zero value otherwise.
func (o *ResolveResponseInfo) GetResolvedValues() []string {
	if o == nil || o.ResolvedValues == nil {
		var ret []string
		return ret
	}
	return o.ResolvedValues
}

// GetResolvedValuesOk returns a tuple with the ResolvedValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResolveResponseInfo) GetResolvedValuesOk() ([]string, bool) {
	if o == nil || o.ResolvedValues == nil {
		return nil, false
	}
	return o.ResolvedValues, true
}

// HasResolvedValues returns a boolean if a field has been set.
func (o *ResolveResponseInfo) HasResolvedValues() bool {
	if o != nil && o.ResolvedValues != nil {
		return true
	}

	return false
}

// SetResolvedValues gets a reference to the given []string and assigns it to the ResolvedValues field.
func (o *ResolveResponseInfo) SetResolvedValues(v []string) {
	o.ResolvedValues = v
}

func (o ResolveResponseInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ResolvedValues != nil {
		toSerialize["resolvedValues"] = o.ResolvedValues
	}
	return json.Marshal(toSerialize)
}

type NullableResolveResponseInfo struct {
	value *ResolveResponseInfo
	isSet bool
}

func (v NullableResolveResponseInfo) Get() *ResolveResponseInfo {
	return v.value
}

func (v *NullableResolveResponseInfo) Set(val *ResolveResponseInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableResolveResponseInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableResolveResponseInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResolveResponseInfo(val *ResolveResponseInfo) *NullableResolveResponseInfo {
	return &NullableResolveResponseInfo{value: val, isSet: true}
}

func (v NullableResolveResponseInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResolveResponseInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
