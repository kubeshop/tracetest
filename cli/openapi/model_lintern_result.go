/*
TraceTest

OpenAPI definition for TraceTest endpoint and resources

API version: 0.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the LinternResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LinternResult{}

// LinternResult struct for LinternResult
type LinternResult struct {
	Passed  *bool                 `json:"passed,omitempty"`
	Score   *int32                `json:"score,omitempty"`
	Plugins []LinternResultPlugin `json:"plugins,omitempty"`
}

// NewLinternResult instantiates a new LinternResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLinternResult() *LinternResult {
	this := LinternResult{}
	return &this
}

// NewLinternResultWithDefaults instantiates a new LinternResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLinternResultWithDefaults() *LinternResult {
	this := LinternResult{}
	return &this
}

// GetPassed returns the Passed field value if set, zero value otherwise.
func (o *LinternResult) GetPassed() bool {
	if o == nil || isNil(o.Passed) {
		var ret bool
		return ret
	}
	return *o.Passed
}

// GetPassedOk returns a tuple with the Passed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinternResult) GetPassedOk() (*bool, bool) {
	if o == nil || isNil(o.Passed) {
		return nil, false
	}
	return o.Passed, true
}

// HasPassed returns a boolean if a field has been set.
func (o *LinternResult) HasPassed() bool {
	if o != nil && !isNil(o.Passed) {
		return true
	}

	return false
}

// SetPassed gets a reference to the given bool and assigns it to the Passed field.
func (o *LinternResult) SetPassed(v bool) {
	o.Passed = &v
}

// GetScore returns the Score field value if set, zero value otherwise.
func (o *LinternResult) GetScore() int32 {
	if o == nil || isNil(o.Score) {
		var ret int32
		return ret
	}
	return *o.Score
}

// GetScoreOk returns a tuple with the Score field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinternResult) GetScoreOk() (*int32, bool) {
	if o == nil || isNil(o.Score) {
		return nil, false
	}
	return o.Score, true
}

// HasScore returns a boolean if a field has been set.
func (o *LinternResult) HasScore() bool {
	if o != nil && !isNil(o.Score) {
		return true
	}

	return false
}

// SetScore gets a reference to the given int32 and assigns it to the Score field.
func (o *LinternResult) SetScore(v int32) {
	o.Score = &v
}

// GetPlugins returns the Plugins field value if set, zero value otherwise.
func (o *LinternResult) GetPlugins() []LinternResultPlugin {
	if o == nil || isNil(o.Plugins) {
		var ret []LinternResultPlugin
		return ret
	}
	return o.Plugins
}

// GetPluginsOk returns a tuple with the Plugins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinternResult) GetPluginsOk() ([]LinternResultPlugin, bool) {
	if o == nil || isNil(o.Plugins) {
		return nil, false
	}
	return o.Plugins, true
}

// HasPlugins returns a boolean if a field has been set.
func (o *LinternResult) HasPlugins() bool {
	if o != nil && !isNil(o.Plugins) {
		return true
	}

	return false
}

// SetPlugins gets a reference to the given []LinternResultPlugin and assigns it to the Plugins field.
func (o *LinternResult) SetPlugins(v []LinternResultPlugin) {
	o.Plugins = v
}

func (o LinternResult) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LinternResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Passed) {
		toSerialize["passed"] = o.Passed
	}
	if !isNil(o.Score) {
		toSerialize["score"] = o.Score
	}
	if !isNil(o.Plugins) {
		toSerialize["plugins"] = o.Plugins
	}
	return toSerialize, nil
}

type NullableLinternResult struct {
	value *LinternResult
	isSet bool
}

func (v NullableLinternResult) Get() *LinternResult {
	return v.value
}

func (v *NullableLinternResult) Set(val *LinternResult) {
	v.value = val
	v.isSet = true
}

func (v NullableLinternResult) IsSet() bool {
	return v.isSet
}

func (v *NullableLinternResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinternResult(val *LinternResult) *NullableLinternResult {
	return &NullableLinternResult{value: val, isSet: true}
}

func (v NullableLinternResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinternResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
