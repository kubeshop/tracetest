/*
TraceTest

OpenAPI definition for TraceTest endpoint and resources

API version: 0.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SelectorPseudoClass type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SelectorPseudoClass{}

// SelectorPseudoClass struct for SelectorPseudoClass
type SelectorPseudoClass struct {
	Name     string `json:"name"`
	Argument *int32 `json:"argument,omitempty"`
}

// NewSelectorPseudoClass instantiates a new SelectorPseudoClass object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSelectorPseudoClass(name string) *SelectorPseudoClass {
	this := SelectorPseudoClass{}
	this.Name = name
	return &this
}

// NewSelectorPseudoClassWithDefaults instantiates a new SelectorPseudoClass object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSelectorPseudoClassWithDefaults() *SelectorPseudoClass {
	this := SelectorPseudoClass{}
	return &this
}

// GetName returns the Name field value
func (o *SelectorPseudoClass) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SelectorPseudoClass) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SelectorPseudoClass) SetName(v string) {
	o.Name = v
}

// GetArgument returns the Argument field value if set, zero value otherwise.
func (o *SelectorPseudoClass) GetArgument() int32 {
	if o == nil || isNil(o.Argument) {
		var ret int32
		return ret
	}
	return *o.Argument
}

// GetArgumentOk returns a tuple with the Argument field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SelectorPseudoClass) GetArgumentOk() (*int32, bool) {
	if o == nil || isNil(o.Argument) {
		return nil, false
	}
	return o.Argument, true
}

// HasArgument returns a boolean if a field has been set.
func (o *SelectorPseudoClass) HasArgument() bool {
	if o != nil && !isNil(o.Argument) {
		return true
	}

	return false
}

// SetArgument gets a reference to the given int32 and assigns it to the Argument field.
func (o *SelectorPseudoClass) SetArgument(v int32) {
	o.Argument = &v
}

func (o SelectorPseudoClass) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SelectorPseudoClass) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !isNil(o.Argument) {
		toSerialize["argument"] = o.Argument
	}
	return toSerialize, nil
}

type NullableSelectorPseudoClass struct {
	value *SelectorPseudoClass
	isSet bool
}

func (v NullableSelectorPseudoClass) Get() *SelectorPseudoClass {
	return v.value
}

func (v *NullableSelectorPseudoClass) Set(val *SelectorPseudoClass) {
	v.value = val
	v.isSet = true
}

func (v NullableSelectorPseudoClass) IsSet() bool {
	return v.isSet
}

func (v *NullableSelectorPseudoClass) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSelectorPseudoClass(val *SelectorPseudoClass) *NullableSelectorPseudoClass {
	return &NullableSelectorPseudoClass{value: val, isSet: true}
}

func (v NullableSelectorPseudoClass) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSelectorPseudoClass) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
