/*
TraceTest

OpenAPI definition for TraceTest endpoint and resources

API version: 0.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SelectorPseudoClass struct for SelectorPseudoClass
type SelectorPseudoClass struct {
	Name string `json:"name"`
	N    *int32 `json:"N,omitempty"`
}

// NewSelectorPseudoClass instantiates a new SelectorPseudoClass object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSelectorPseudoClass(name string) *SelectorPseudoClass {
	this := SelectorPseudoClass{}
	this.Name = name
	return &this
}

// NewSelectorPseudoClassWithDefaults instantiates a new SelectorPseudoClass object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSelectorPseudoClassWithDefaults() *SelectorPseudoClass {
	this := SelectorPseudoClass{}
	return &this
}

// GetName returns the Name field value
func (o *SelectorPseudoClass) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SelectorPseudoClass) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SelectorPseudoClass) SetName(v string) {
	o.Name = v
}

// GetN returns the N field value if set, zero value otherwise.
func (o *SelectorPseudoClass) GetN() int32 {
	if o == nil || o.N == nil {
		var ret int32
		return ret
	}
	return *o.N
}

// GetNOk returns a tuple with the N field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SelectorPseudoClass) GetNOk() (*int32, bool) {
	if o == nil || o.N == nil {
		return nil, false
	}
	return o.N, true
}

// HasN returns a boolean if a field has been set.
func (o *SelectorPseudoClass) HasN() bool {
	if o != nil && o.N != nil {
		return true
	}

	return false
}

// SetN gets a reference to the given int32 and assigns it to the N field.
func (o *SelectorPseudoClass) SetN(v int32) {
	o.N = &v
}

func (o SelectorPseudoClass) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.N != nil {
		toSerialize["N"] = o.N
	}
	return json.Marshal(toSerialize)
}

type NullableSelectorPseudoClass struct {
	value *SelectorPseudoClass
	isSet bool
}

func (v NullableSelectorPseudoClass) Get() *SelectorPseudoClass {
	return v.value
}

func (v *NullableSelectorPseudoClass) Set(val *SelectorPseudoClass) {
	v.value = val
	v.isSet = true
}

func (v NullableSelectorPseudoClass) IsSet() bool {
	return v.isSet
}

func (v *NullableSelectorPseudoClass) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSelectorPseudoClass(val *SelectorPseudoClass) *NullableSelectorPseudoClass {
	return &NullableSelectorPseudoClass{value: val, isSet: true}
}

func (v NullableSelectorPseudoClass) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSelectorPseudoClass) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
