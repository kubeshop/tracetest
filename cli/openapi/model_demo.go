/*
TraceTest

OpenAPI definition for TraceTest endpoint and resources

API version: 0.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Demo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Demo{}

// Demo Represents a demonstration API structured into the Resources format.
type Demo struct {
	// Represents the type of this resource. It should always be set as 'Demo'.
	Type *string   `json:"type,omitempty"`
	Spec *DemoSpec `json:"spec,omitempty"`
}

// NewDemo instantiates a new Demo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDemo() *Demo {
	this := Demo{}
	return &this
}

// NewDemoWithDefaults instantiates a new Demo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDemoWithDefaults() *Demo {
	this := Demo{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Demo) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Demo) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Demo) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Demo) SetType(v string) {
	o.Type = &v
}

// GetSpec returns the Spec field value if set, zero value otherwise.
func (o *Demo) GetSpec() DemoSpec {
	if o == nil || isNil(o.Spec) {
		var ret DemoSpec
		return ret
	}
	return *o.Spec
}

// GetSpecOk returns a tuple with the Spec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Demo) GetSpecOk() (*DemoSpec, bool) {
	if o == nil || isNil(o.Spec) {
		return nil, false
	}
	return o.Spec, true
}

// HasSpec returns a boolean if a field has been set.
func (o *Demo) HasSpec() bool {
	if o != nil && !isNil(o.Spec) {
		return true
	}

	return false
}

// SetSpec gets a reference to the given DemoSpec and assigns it to the Spec field.
func (o *Demo) SetSpec(v DemoSpec) {
	o.Spec = &v
}

func (o Demo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Demo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !isNil(o.Spec) {
		toSerialize["spec"] = o.Spec
	}
	return toSerialize, nil
}

type NullableDemo struct {
	value *Demo
	isSet bool
}

func (v NullableDemo) Get() *Demo {
	return v.value
}

func (v *NullableDemo) Set(val *Demo) {
	v.value = val
	v.isSet = true
}

func (v NullableDemo) IsSet() bool {
	return v.isSet
}

func (v *NullableDemo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDemo(val *Demo) *NullableDemo {
	return &NullableDemo{value: val, isSet: true}
}

func (v NullableDemo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDemo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
