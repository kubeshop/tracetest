/*
TraceTest

OpenAPI definition for TraceTest endpoint and resources

API version: 0.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TraceMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TraceMetadata{}

// TraceMetadata struct for TraceMetadata
type TraceMetadata struct {
	TraceId           *string `json:"traceId,omitempty"`
	RootServiceName   *string `json:"rootServiceName,omitempty"`
	RootTraceName     *string `json:"rootTraceName,omitempty"`
	StartTimeUnixNano *int32  `json:"startTimeUnixNano,omitempty"`
	DurationMs        *int32  `json:"durationMs,omitempty"`
	SpanCount         *int32  `json:"spanCount,omitempty"`
}

// NewTraceMetadata instantiates a new TraceMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTraceMetadata() *TraceMetadata {
	this := TraceMetadata{}
	return &this
}

// NewTraceMetadataWithDefaults instantiates a new TraceMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTraceMetadataWithDefaults() *TraceMetadata {
	this := TraceMetadata{}
	return &this
}

// GetTraceId returns the TraceId field value if set, zero value otherwise.
func (o *TraceMetadata) GetTraceId() string {
	if o == nil || isNil(o.TraceId) {
		var ret string
		return ret
	}
	return *o.TraceId
}

// GetTraceIdOk returns a tuple with the TraceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceMetadata) GetTraceIdOk() (*string, bool) {
	if o == nil || isNil(o.TraceId) {
		return nil, false
	}
	return o.TraceId, true
}

// HasTraceId returns a boolean if a field has been set.
func (o *TraceMetadata) HasTraceId() bool {
	if o != nil && !isNil(o.TraceId) {
		return true
	}

	return false
}

// SetTraceId gets a reference to the given string and assigns it to the TraceId field.
func (o *TraceMetadata) SetTraceId(v string) {
	o.TraceId = &v
}

// GetRootServiceName returns the RootServiceName field value if set, zero value otherwise.
func (o *TraceMetadata) GetRootServiceName() string {
	if o == nil || isNil(o.RootServiceName) {
		var ret string
		return ret
	}
	return *o.RootServiceName
}

// GetRootServiceNameOk returns a tuple with the RootServiceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceMetadata) GetRootServiceNameOk() (*string, bool) {
	if o == nil || isNil(o.RootServiceName) {
		return nil, false
	}
	return o.RootServiceName, true
}

// HasRootServiceName returns a boolean if a field has been set.
func (o *TraceMetadata) HasRootServiceName() bool {
	if o != nil && !isNil(o.RootServiceName) {
		return true
	}

	return false
}

// SetRootServiceName gets a reference to the given string and assigns it to the RootServiceName field.
func (o *TraceMetadata) SetRootServiceName(v string) {
	o.RootServiceName = &v
}

// GetRootTraceName returns the RootTraceName field value if set, zero value otherwise.
func (o *TraceMetadata) GetRootTraceName() string {
	if o == nil || isNil(o.RootTraceName) {
		var ret string
		return ret
	}
	return *o.RootTraceName
}

// GetRootTraceNameOk returns a tuple with the RootTraceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceMetadata) GetRootTraceNameOk() (*string, bool) {
	if o == nil || isNil(o.RootTraceName) {
		return nil, false
	}
	return o.RootTraceName, true
}

// HasRootTraceName returns a boolean if a field has been set.
func (o *TraceMetadata) HasRootTraceName() bool {
	if o != nil && !isNil(o.RootTraceName) {
		return true
	}

	return false
}

// SetRootTraceName gets a reference to the given string and assigns it to the RootTraceName field.
func (o *TraceMetadata) SetRootTraceName(v string) {
	o.RootTraceName = &v
}

// GetStartTimeUnixNano returns the StartTimeUnixNano field value if set, zero value otherwise.
func (o *TraceMetadata) GetStartTimeUnixNano() int32 {
	if o == nil || isNil(o.StartTimeUnixNano) {
		var ret int32
		return ret
	}
	return *o.StartTimeUnixNano
}

// GetStartTimeUnixNanoOk returns a tuple with the StartTimeUnixNano field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceMetadata) GetStartTimeUnixNanoOk() (*int32, bool) {
	if o == nil || isNil(o.StartTimeUnixNano) {
		return nil, false
	}
	return o.StartTimeUnixNano, true
}

// HasStartTimeUnixNano returns a boolean if a field has been set.
func (o *TraceMetadata) HasStartTimeUnixNano() bool {
	if o != nil && !isNil(o.StartTimeUnixNano) {
		return true
	}

	return false
}

// SetStartTimeUnixNano gets a reference to the given int32 and assigns it to the StartTimeUnixNano field.
func (o *TraceMetadata) SetStartTimeUnixNano(v int32) {
	o.StartTimeUnixNano = &v
}

// GetDurationMs returns the DurationMs field value if set, zero value otherwise.
func (o *TraceMetadata) GetDurationMs() int32 {
	if o == nil || isNil(o.DurationMs) {
		var ret int32
		return ret
	}
	return *o.DurationMs
}

// GetDurationMsOk returns a tuple with the DurationMs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceMetadata) GetDurationMsOk() (*int32, bool) {
	if o == nil || isNil(o.DurationMs) {
		return nil, false
	}
	return o.DurationMs, true
}

// HasDurationMs returns a boolean if a field has been set.
func (o *TraceMetadata) HasDurationMs() bool {
	if o != nil && !isNil(o.DurationMs) {
		return true
	}

	return false
}

// SetDurationMs gets a reference to the given int32 and assigns it to the DurationMs field.
func (o *TraceMetadata) SetDurationMs(v int32) {
	o.DurationMs = &v
}

// GetSpanCount returns the SpanCount field value if set, zero value otherwise.
func (o *TraceMetadata) GetSpanCount() int32 {
	if o == nil || isNil(o.SpanCount) {
		var ret int32
		return ret
	}
	return *o.SpanCount
}

// GetSpanCountOk returns a tuple with the SpanCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceMetadata) GetSpanCountOk() (*int32, bool) {
	if o == nil || isNil(o.SpanCount) {
		return nil, false
	}
	return o.SpanCount, true
}

// HasSpanCount returns a boolean if a field has been set.
func (o *TraceMetadata) HasSpanCount() bool {
	if o != nil && !isNil(o.SpanCount) {
		return true
	}

	return false
}

// SetSpanCount gets a reference to the given int32 and assigns it to the SpanCount field.
func (o *TraceMetadata) SetSpanCount(v int32) {
	o.SpanCount = &v
}

func (o TraceMetadata) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TraceMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.TraceId) {
		toSerialize["traceId"] = o.TraceId
	}
	if !isNil(o.RootServiceName) {
		toSerialize["rootServiceName"] = o.RootServiceName
	}
	if !isNil(o.RootTraceName) {
		toSerialize["rootTraceName"] = o.RootTraceName
	}
	if !isNil(o.StartTimeUnixNano) {
		toSerialize["startTimeUnixNano"] = o.StartTimeUnixNano
	}
	if !isNil(o.DurationMs) {
		toSerialize["durationMs"] = o.DurationMs
	}
	if !isNil(o.SpanCount) {
		toSerialize["spanCount"] = o.SpanCount
	}
	return toSerialize, nil
}

type NullableTraceMetadata struct {
	value *TraceMetadata
	isSet bool
}

func (v NullableTraceMetadata) Get() *TraceMetadata {
	return v.value
}

func (v *NullableTraceMetadata) Set(val *TraceMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableTraceMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableTraceMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTraceMetadata(val *TraceMetadata) *NullableTraceMetadata {
	return &NullableTraceMetadata{value: val, isSet: true}
}

func (v NullableTraceMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTraceMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
