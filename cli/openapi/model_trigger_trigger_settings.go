/*
TraceTest

OpenAPI definition for TraceTest endpoint and resources

API version: 0.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TriggerTriggerSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TriggerTriggerSettings{}

// TriggerTriggerSettings struct for TriggerTriggerSettings
type TriggerTriggerSettings struct {
	Http    *HTTPRequest    `json:"http,omitempty"`
	Grpc    *GRPCRequest    `json:"grpc,omitempty"`
	Traceid *TRACEIDRequest `json:"traceid,omitempty"`
}

// NewTriggerTriggerSettings instantiates a new TriggerTriggerSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTriggerTriggerSettings() *TriggerTriggerSettings {
	this := TriggerTriggerSettings{}
	return &this
}

// NewTriggerTriggerSettingsWithDefaults instantiates a new TriggerTriggerSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTriggerTriggerSettingsWithDefaults() *TriggerTriggerSettings {
	this := TriggerTriggerSettings{}
	return &this
}

// GetHttp returns the Http field value if set, zero value otherwise.
func (o *TriggerTriggerSettings) GetHttp() HTTPRequest {
	if o == nil || isNil(o.Http) {
		var ret HTTPRequest
		return ret
	}
	return *o.Http
}

// GetHttpOk returns a tuple with the Http field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TriggerTriggerSettings) GetHttpOk() (*HTTPRequest, bool) {
	if o == nil || isNil(o.Http) {
		return nil, false
	}
	return o.Http, true
}

// HasHttp returns a boolean if a field has been set.
func (o *TriggerTriggerSettings) HasHttp() bool {
	if o != nil && !isNil(o.Http) {
		return true
	}

	return false
}

// SetHttp gets a reference to the given HTTPRequest and assigns it to the Http field.
func (o *TriggerTriggerSettings) SetHttp(v HTTPRequest) {
	o.Http = &v
}

// GetGrpc returns the Grpc field value if set, zero value otherwise.
func (o *TriggerTriggerSettings) GetGrpc() GRPCRequest {
	if o == nil || isNil(o.Grpc) {
		var ret GRPCRequest
		return ret
	}
	return *o.Grpc
}

// GetGrpcOk returns a tuple with the Grpc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TriggerTriggerSettings) GetGrpcOk() (*GRPCRequest, bool) {
	if o == nil || isNil(o.Grpc) {
		return nil, false
	}
	return o.Grpc, true
}

// HasGrpc returns a boolean if a field has been set.
func (o *TriggerTriggerSettings) HasGrpc() bool {
	if o != nil && !isNil(o.Grpc) {
		return true
	}

	return false
}

// SetGrpc gets a reference to the given GRPCRequest and assigns it to the Grpc field.
func (o *TriggerTriggerSettings) SetGrpc(v GRPCRequest) {
	o.Grpc = &v
}

// GetTraceid returns the Traceid field value if set, zero value otherwise.
func (o *TriggerTriggerSettings) GetTraceid() TRACEIDRequest {
	if o == nil || isNil(o.Traceid) {
		var ret TRACEIDRequest
		return ret
	}
	return *o.Traceid
}

// GetTraceidOk returns a tuple with the Traceid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TriggerTriggerSettings) GetTraceidOk() (*TRACEIDRequest, bool) {
	if o == nil || isNil(o.Traceid) {
		return nil, false
	}
	return o.Traceid, true
}

// HasTraceid returns a boolean if a field has been set.
func (o *TriggerTriggerSettings) HasTraceid() bool {
	if o != nil && !isNil(o.Traceid) {
		return true
	}

	return false
}

// SetTraceid gets a reference to the given TRACEIDRequest and assigns it to the Traceid field.
func (o *TriggerTriggerSettings) SetTraceid(v TRACEIDRequest) {
	o.Traceid = &v
}

func (o TriggerTriggerSettings) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TriggerTriggerSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Http) {
		toSerialize["http"] = o.Http
	}
	if !isNil(o.Grpc) {
		toSerialize["grpc"] = o.Grpc
	}
	if !isNil(o.Traceid) {
		toSerialize["traceid"] = o.Traceid
	}
	return toSerialize, nil
}

type NullableTriggerTriggerSettings struct {
	value *TriggerTriggerSettings
	isSet bool
}

func (v NullableTriggerTriggerSettings) Get() *TriggerTriggerSettings {
	return v.value
}

func (v *NullableTriggerTriggerSettings) Set(val *TriggerTriggerSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableTriggerTriggerSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableTriggerTriggerSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTriggerTriggerSettings(val *TriggerTriggerSettings) *NullableTriggerTriggerSettings {
	return &NullableTriggerTriggerSettings{value: val, isSet: true}
}

func (v NullableTriggerTriggerSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTriggerTriggerSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
