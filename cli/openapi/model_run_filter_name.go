/*
TraceTest

OpenAPI definition for TraceTest endpoint and resources

API version: 0.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// RunFilterName the model 'RunFilterName'
type RunFilterName string

// List of RunFilterName
const (
	GROUP              RunFilterName = "group"
	STATUS             RunFilterName = "status"
	SOURCE             RunFilterName = "source"
	TOKEN              RunFilterName = "token"
	BRANCH             RunFilterName = "branch"
	COMMIT             RunFilterName = "commit"
	USER_EMAIL         RunFilterName = "userEmail"
	IS_CI              RunFilterName = "isCi"
	PROVIDER           RunFilterName = "provider"
	PLAYWRIGHT_BROWSER RunFilterName = "playwrightBrowser"
	CYPRESS_BROWSER    RunFilterName = "cypressBrowser"
)

// All allowed values of RunFilterName enum
var AllowedRunFilterNameEnumValues = []RunFilterName{
	"group",
	"status",
	"source",
	"token",
	"branch",
	"commit",
	"userEmail",
	"isCi",
	"provider",
	"playwrightBrowser",
	"cypressBrowser",
}

func (v *RunFilterName) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RunFilterName(value)
	for _, existing := range AllowedRunFilterNameEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RunFilterName", value)
}

// NewRunFilterNameFromValue returns a pointer to a valid RunFilterName
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRunFilterNameFromValue(v string) (*RunFilterName, error) {
	ev := RunFilterName(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RunFilterName: valid values are %v", v, AllowedRunFilterNameEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RunFilterName) IsValid() bool {
	for _, existing := range AllowedRunFilterNameEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RunFilterName value
func (v RunFilterName) Ptr() *RunFilterName {
	return &v
}

type NullableRunFilterName struct {
	value *RunFilterName
	isSet bool
}

func (v NullableRunFilterName) Get() *RunFilterName {
	return v.value
}

func (v *NullableRunFilterName) Set(val *RunFilterName) {
	v.value = val
	v.isSet = true
}

func (v NullableRunFilterName) IsSet() bool {
	return v.isSet
}

func (v *NullableRunFilterName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunFilterName(val *RunFilterName) *NullableRunFilterName {
	return &NullableRunFilterName{value: val, isSet: true}
}

func (v NullableRunFilterName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunFilterName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
