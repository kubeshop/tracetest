/*
TraceTest

OpenAPI definition for TraceTest endpoint and resources

API version: 0.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the TestSuiteRun type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TestSuiteRun{}

// TestSuiteRun struct for TestSuiteRun
type TestSuiteRun struct {
	Id                          *int32             `json:"id,omitempty"`
	Version                     *int32             `json:"version,omitempty"`
	RunGroupId                  *string            `json:"runGroupId,omitempty"`
	CreatedAt                   *time.Time         `json:"createdAt,omitempty"`
	CompletedAt                 *time.Time         `json:"completedAt,omitempty"`
	State                       *string            `json:"state,omitempty"`
	Steps                       []TestRun          `json:"steps,omitempty"`
	VariableSet                 *VariableSet       `json:"variableSet,omitempty"`
	Metadata                    *map[string]string `json:"metadata,omitempty"`
	Pass                        *int32             `json:"pass,omitempty"`
	Fail                        *int32             `json:"fail,omitempty"`
	AllStepsRequiredGatesPassed *bool              `json:"allStepsRequiredGatesPassed,omitempty"`
}

// NewTestSuiteRun instantiates a new TestSuiteRun object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestSuiteRun() *TestSuiteRun {
	this := TestSuiteRun{}
	return &this
}

// NewTestSuiteRunWithDefaults instantiates a new TestSuiteRun object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestSuiteRunWithDefaults() *TestSuiteRun {
	this := TestSuiteRun{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TestSuiteRun) GetId() int32 {
	if o == nil || isNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestSuiteRun) GetIdOk() (*int32, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TestSuiteRun) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *TestSuiteRun) SetId(v int32) {
	o.Id = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *TestSuiteRun) GetVersion() int32 {
	if o == nil || isNil(o.Version) {
		var ret int32
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestSuiteRun) GetVersionOk() (*int32, bool) {
	if o == nil || isNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *TestSuiteRun) HasVersion() bool {
	if o != nil && !isNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int32 and assigns it to the Version field.
func (o *TestSuiteRun) SetVersion(v int32) {
	o.Version = &v
}

// GetRunGroupId returns the RunGroupId field value if set, zero value otherwise.
func (o *TestSuiteRun) GetRunGroupId() string {
	if o == nil || isNil(o.RunGroupId) {
		var ret string
		return ret
	}
	return *o.RunGroupId
}

// GetRunGroupIdOk returns a tuple with the RunGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestSuiteRun) GetRunGroupIdOk() (*string, bool) {
	if o == nil || isNil(o.RunGroupId) {
		return nil, false
	}
	return o.RunGroupId, true
}

// HasRunGroupId returns a boolean if a field has been set.
func (o *TestSuiteRun) HasRunGroupId() bool {
	if o != nil && !isNil(o.RunGroupId) {
		return true
	}

	return false
}

// SetRunGroupId gets a reference to the given string and assigns it to the RunGroupId field.
func (o *TestSuiteRun) SetRunGroupId(v string) {
	o.RunGroupId = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *TestSuiteRun) GetCreatedAt() time.Time {
	if o == nil || isNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestSuiteRun) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || isNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *TestSuiteRun) HasCreatedAt() bool {
	if o != nil && !isNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *TestSuiteRun) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetCompletedAt returns the CompletedAt field value if set, zero value otherwise.
func (o *TestSuiteRun) GetCompletedAt() time.Time {
	if o == nil || isNil(o.CompletedAt) {
		var ret time.Time
		return ret
	}
	return *o.CompletedAt
}

// GetCompletedAtOk returns a tuple with the CompletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestSuiteRun) GetCompletedAtOk() (*time.Time, bool) {
	if o == nil || isNil(o.CompletedAt) {
		return nil, false
	}
	return o.CompletedAt, true
}

// HasCompletedAt returns a boolean if a field has been set.
func (o *TestSuiteRun) HasCompletedAt() bool {
	if o != nil && !isNil(o.CompletedAt) {
		return true
	}

	return false
}

// SetCompletedAt gets a reference to the given time.Time and assigns it to the CompletedAt field.
func (o *TestSuiteRun) SetCompletedAt(v time.Time) {
	o.CompletedAt = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *TestSuiteRun) GetState() string {
	if o == nil || isNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestSuiteRun) GetStateOk() (*string, bool) {
	if o == nil || isNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *TestSuiteRun) HasState() bool {
	if o != nil && !isNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *TestSuiteRun) SetState(v string) {
	o.State = &v
}

// GetSteps returns the Steps field value if set, zero value otherwise.
func (o *TestSuiteRun) GetSteps() []TestRun {
	if o == nil || isNil(o.Steps) {
		var ret []TestRun
		return ret
	}
	return o.Steps
}

// GetStepsOk returns a tuple with the Steps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestSuiteRun) GetStepsOk() ([]TestRun, bool) {
	if o == nil || isNil(o.Steps) {
		return nil, false
	}
	return o.Steps, true
}

// HasSteps returns a boolean if a field has been set.
func (o *TestSuiteRun) HasSteps() bool {
	if o != nil && !isNil(o.Steps) {
		return true
	}

	return false
}

// SetSteps gets a reference to the given []TestRun and assigns it to the Steps field.
func (o *TestSuiteRun) SetSteps(v []TestRun) {
	o.Steps = v
}

// GetVariableSet returns the VariableSet field value if set, zero value otherwise.
func (o *TestSuiteRun) GetVariableSet() VariableSet {
	if o == nil || isNil(o.VariableSet) {
		var ret VariableSet
		return ret
	}
	return *o.VariableSet
}

// GetVariableSetOk returns a tuple with the VariableSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestSuiteRun) GetVariableSetOk() (*VariableSet, bool) {
	if o == nil || isNil(o.VariableSet) {
		return nil, false
	}
	return o.VariableSet, true
}

// HasVariableSet returns a boolean if a field has been set.
func (o *TestSuiteRun) HasVariableSet() bool {
	if o != nil && !isNil(o.VariableSet) {
		return true
	}

	return false
}

// SetVariableSet gets a reference to the given VariableSet and assigns it to the VariableSet field.
func (o *TestSuiteRun) SetVariableSet(v VariableSet) {
	o.VariableSet = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *TestSuiteRun) GetMetadata() map[string]string {
	if o == nil || isNil(o.Metadata) {
		var ret map[string]string
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestSuiteRun) GetMetadataOk() (*map[string]string, bool) {
	if o == nil || isNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *TestSuiteRun) HasMetadata() bool {
	if o != nil && !isNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]string and assigns it to the Metadata field.
func (o *TestSuiteRun) SetMetadata(v map[string]string) {
	o.Metadata = &v
}

// GetPass returns the Pass field value if set, zero value otherwise.
func (o *TestSuiteRun) GetPass() int32 {
	if o == nil || isNil(o.Pass) {
		var ret int32
		return ret
	}
	return *o.Pass
}

// GetPassOk returns a tuple with the Pass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestSuiteRun) GetPassOk() (*int32, bool) {
	if o == nil || isNil(o.Pass) {
		return nil, false
	}
	return o.Pass, true
}

// HasPass returns a boolean if a field has been set.
func (o *TestSuiteRun) HasPass() bool {
	if o != nil && !isNil(o.Pass) {
		return true
	}

	return false
}

// SetPass gets a reference to the given int32 and assigns it to the Pass field.
func (o *TestSuiteRun) SetPass(v int32) {
	o.Pass = &v
}

// GetFail returns the Fail field value if set, zero value otherwise.
func (o *TestSuiteRun) GetFail() int32 {
	if o == nil || isNil(o.Fail) {
		var ret int32
		return ret
	}
	return *o.Fail
}

// GetFailOk returns a tuple with the Fail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestSuiteRun) GetFailOk() (*int32, bool) {
	if o == nil || isNil(o.Fail) {
		return nil, false
	}
	return o.Fail, true
}

// HasFail returns a boolean if a field has been set.
func (o *TestSuiteRun) HasFail() bool {
	if o != nil && !isNil(o.Fail) {
		return true
	}

	return false
}

// SetFail gets a reference to the given int32 and assigns it to the Fail field.
func (o *TestSuiteRun) SetFail(v int32) {
	o.Fail = &v
}

// GetAllStepsRequiredGatesPassed returns the AllStepsRequiredGatesPassed field value if set, zero value otherwise.
func (o *TestSuiteRun) GetAllStepsRequiredGatesPassed() bool {
	if o == nil || isNil(o.AllStepsRequiredGatesPassed) {
		var ret bool
		return ret
	}
	return *o.AllStepsRequiredGatesPassed
}

// GetAllStepsRequiredGatesPassedOk returns a tuple with the AllStepsRequiredGatesPassed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestSuiteRun) GetAllStepsRequiredGatesPassedOk() (*bool, bool) {
	if o == nil || isNil(o.AllStepsRequiredGatesPassed) {
		return nil, false
	}
	return o.AllStepsRequiredGatesPassed, true
}

// HasAllStepsRequiredGatesPassed returns a boolean if a field has been set.
func (o *TestSuiteRun) HasAllStepsRequiredGatesPassed() bool {
	if o != nil && !isNil(o.AllStepsRequiredGatesPassed) {
		return true
	}

	return false
}

// SetAllStepsRequiredGatesPassed gets a reference to the given bool and assigns it to the AllStepsRequiredGatesPassed field.
func (o *TestSuiteRun) SetAllStepsRequiredGatesPassed(v bool) {
	o.AllStepsRequiredGatesPassed = &v
}

func (o TestSuiteRun) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TestSuiteRun) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: id is readOnly
	// skip: version is readOnly
	if !isNil(o.RunGroupId) {
		toSerialize["runGroupId"] = o.RunGroupId
	}
	if !isNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !isNil(o.CompletedAt) {
		toSerialize["completedAt"] = o.CompletedAt
	}
	if !isNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !isNil(o.Steps) {
		toSerialize["steps"] = o.Steps
	}
	if !isNil(o.VariableSet) {
		toSerialize["variableSet"] = o.VariableSet
	}
	if !isNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !isNil(o.Pass) {
		toSerialize["pass"] = o.Pass
	}
	if !isNil(o.Fail) {
		toSerialize["fail"] = o.Fail
	}
	if !isNil(o.AllStepsRequiredGatesPassed) {
		toSerialize["allStepsRequiredGatesPassed"] = o.AllStepsRequiredGatesPassed
	}
	return toSerialize, nil
}

type NullableTestSuiteRun struct {
	value *TestSuiteRun
	isSet bool
}

func (v NullableTestSuiteRun) Get() *TestSuiteRun {
	return v.value
}

func (v *NullableTestSuiteRun) Set(val *TestSuiteRun) {
	v.value = val
	v.isSet = true
}

func (v NullableTestSuiteRun) IsSet() bool {
	return v.isSet
}

func (v *NullableTestSuiteRun) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestSuiteRun(val *TestSuiteRun) *NullableTestSuiteRun {
	return &NullableTestSuiteRun{value: val, isSet: true}
}

func (v NullableTestSuiteRun) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestSuiteRun) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
