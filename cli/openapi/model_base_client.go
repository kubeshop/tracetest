/*
TraceTest

OpenAPI definition for TraceTest endpoint and resources

API version: 0.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BaseClient type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BaseClient{}

// BaseClient struct for BaseClient
type BaseClient struct {
	Type *SupportedClients   `json:"type,omitempty"`
	Http *HTTPClientSettings `json:"http,omitempty"`
	Grpc *GRPCClientSettings `json:"grpc,omitempty"`
}

// NewBaseClient instantiates a new BaseClient object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseClient() *BaseClient {
	this := BaseClient{}
	return &this
}

// NewBaseClientWithDefaults instantiates a new BaseClient object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseClientWithDefaults() *BaseClient {
	this := BaseClient{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *BaseClient) GetType() SupportedClients {
	if o == nil || isNil(o.Type) {
		var ret SupportedClients
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseClient) GetTypeOk() (*SupportedClients, bool) {
	if o == nil || isNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *BaseClient) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given SupportedClients and assigns it to the Type field.
func (o *BaseClient) SetType(v SupportedClients) {
	o.Type = &v
}

// GetHttp returns the Http field value if set, zero value otherwise.
func (o *BaseClient) GetHttp() HTTPClientSettings {
	if o == nil || isNil(o.Http) {
		var ret HTTPClientSettings
		return ret
	}
	return *o.Http
}

// GetHttpOk returns a tuple with the Http field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseClient) GetHttpOk() (*HTTPClientSettings, bool) {
	if o == nil || isNil(o.Http) {
		return nil, false
	}
	return o.Http, true
}

// HasHttp returns a boolean if a field has been set.
func (o *BaseClient) HasHttp() bool {
	if o != nil && !isNil(o.Http) {
		return true
	}

	return false
}

// SetHttp gets a reference to the given HTTPClientSettings and assigns it to the Http field.
func (o *BaseClient) SetHttp(v HTTPClientSettings) {
	o.Http = &v
}

// GetGrpc returns the Grpc field value if set, zero value otherwise.
func (o *BaseClient) GetGrpc() GRPCClientSettings {
	if o == nil || isNil(o.Grpc) {
		var ret GRPCClientSettings
		return ret
	}
	return *o.Grpc
}

// GetGrpcOk returns a tuple with the Grpc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseClient) GetGrpcOk() (*GRPCClientSettings, bool) {
	if o == nil || isNil(o.Grpc) {
		return nil, false
	}
	return o.Grpc, true
}

// HasGrpc returns a boolean if a field has been set.
func (o *BaseClient) HasGrpc() bool {
	if o != nil && !isNil(o.Grpc) {
		return true
	}

	return false
}

// SetGrpc gets a reference to the given GRPCClientSettings and assigns it to the Grpc field.
func (o *BaseClient) SetGrpc(v GRPCClientSettings) {
	o.Grpc = &v
}

func (o BaseClient) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BaseClient) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !isNil(o.Http) {
		toSerialize["http"] = o.Http
	}
	if !isNil(o.Grpc) {
		toSerialize["grpc"] = o.Grpc
	}
	return toSerialize, nil
}

type NullableBaseClient struct {
	value *BaseClient
	isSet bool
}

func (v NullableBaseClient) Get() *BaseClient {
	return v.value
}

func (v *NullableBaseClient) Set(val *BaseClient) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseClient) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseClient) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseClient(val *BaseClient) *NullableBaseClient {
	return &NullableBaseClient{value: val, isSet: true}
}

func (v NullableBaseClient) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseClient) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
