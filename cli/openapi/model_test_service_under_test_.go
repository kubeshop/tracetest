/*
TraceTest

OpenAPI definition for TraceTest endpoint and resources

API version: 0.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TestServiceUnderTest struct for TestServiceUnderTest
type TestServiceUnderTest struct {
	Request *HTTPRequest `json:"request,omitempty"`
}

// NewTestServiceUnderTest instantiates a new TestServiceUnderTest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestServiceUnderTest() *TestServiceUnderTest {
	this := TestServiceUnderTest{}
	return &this
}

// NewTestServiceUnderTestWithDefaults instantiates a new TestServiceUnderTest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestServiceUnderTestWithDefaults() *TestServiceUnderTest {
	this := TestServiceUnderTest{}
	return &this
}

// GetRequest returns the Request field value if set, zero value otherwise.
func (o *TestServiceUnderTest) GetRequest() HTTPRequest {
	if o == nil || o.Request == nil {
		var ret HTTPRequest
		return ret
	}
	return *o.Request
}

// GetRequestOk returns a tuple with the Request field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestServiceUnderTest) GetRequestOk() (*HTTPRequest, bool) {
	if o == nil || o.Request == nil {
		return nil, false
	}
	return o.Request, true
}

// HasRequest returns a boolean if a field has been set.
func (o *TestServiceUnderTest) HasRequest() bool {
	if o != nil && o.Request != nil {
		return true
	}

	return false
}

// SetRequest gets a reference to the given HTTPRequest and assigns it to the Request field.
func (o *TestServiceUnderTest) SetRequest(v HTTPRequest) {
	o.Request = &v
}

func (o TestServiceUnderTest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Request != nil {
		toSerialize["request"] = o.Request
	}
	return json.Marshal(toSerialize)
}

type NullableTestServiceUnderTest struct {
	value *TestServiceUnderTest
	isSet bool
}

func (v NullableTestServiceUnderTest) Get() *TestServiceUnderTest {
	return v.value
}

func (v *NullableTestServiceUnderTest) Set(val *TestServiceUnderTest) {
	v.value = val
	v.isSet = true
}

func (v NullableTestServiceUnderTest) IsSet() bool {
	return v.isSet
}

func (v *NullableTestServiceUnderTest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestServiceUnderTest(val *TestServiceUnderTest) *NullableTestServiceUnderTest {
	return &NullableTestServiceUnderTest{value: val, isSet: true}
}

func (v NullableTestServiceUnderTest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestServiceUnderTest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
