/*
TraceTest

OpenAPI definition for TraceTest endpoint and resources

API version: 0.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// DefinitionFile struct for DefinitionFile
type DefinitionFile struct {
	Content *string `json:"content,omitempty"`
}

// NewDefinitionFile instantiates a new DefinitionFile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDefinitionFile() *DefinitionFile {
	this := DefinitionFile{}
	return &this
}

// NewDefinitionFileWithDefaults instantiates a new DefinitionFile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDefinitionFileWithDefaults() *DefinitionFile {
	this := DefinitionFile{}
	return &this
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *DefinitionFile) GetContent() string {
	if o == nil || o.Content == nil {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefinitionFile) GetContentOk() (*string, bool) {
	if o == nil || o.Content == nil {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *DefinitionFile) HasContent() bool {
	if o != nil && o.Content != nil {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *DefinitionFile) SetContent(v string) {
	o.Content = &v
}

func (o DefinitionFile) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Content != nil {
		toSerialize["content"] = o.Content
	}
	return json.Marshal(toSerialize)
}

type NullableDefinitionFile struct {
	value *DefinitionFile
	isSet bool
}

func (v NullableDefinitionFile) Get() *DefinitionFile {
	return v.value
}

func (v *NullableDefinitionFile) Set(val *DefinitionFile) {
	v.value = val
	v.isSet = true
}

func (v NullableDefinitionFile) IsSet() bool {
	return v.isSet
}

func (v *NullableDefinitionFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDefinitionFile(val *DefinitionFile) *NullableDefinitionFile {
	return &NullableDefinitionFile{value: val, isSet: true}
}

func (v NullableDefinitionFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDefinitionFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
