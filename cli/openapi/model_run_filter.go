/*
TraceTest

OpenAPI definition for TraceTest endpoint and resources

API version: 0.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RunFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RunFilter{}

// RunFilter struct for RunFilter
type RunFilter struct {
	Name   *RunFilterName `json:"name,omitempty"`
	Values []string       `json:"values,omitempty"`
}

// NewRunFilter instantiates a new RunFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRunFilter() *RunFilter {
	this := RunFilter{}
	return &this
}

// NewRunFilterWithDefaults instantiates a new RunFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunFilterWithDefaults() *RunFilter {
	this := RunFilter{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RunFilter) GetName() RunFilterName {
	if o == nil || isNil(o.Name) {
		var ret RunFilterName
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunFilter) GetNameOk() (*RunFilterName, bool) {
	if o == nil || isNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RunFilter) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given RunFilterName and assigns it to the Name field.
func (o *RunFilter) SetName(v RunFilterName) {
	o.Name = &v
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *RunFilter) GetValues() []string {
	if o == nil || isNil(o.Values) {
		var ret []string
		return ret
	}
	return o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunFilter) GetValuesOk() ([]string, bool) {
	if o == nil || isNil(o.Values) {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *RunFilter) HasValues() bool {
	if o != nil && !isNil(o.Values) {
		return true
	}

	return false
}

// SetValues gets a reference to the given []string and assigns it to the Values field.
func (o *RunFilter) SetValues(v []string) {
	o.Values = v
}

func (o RunFilter) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RunFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Values) {
		toSerialize["values"] = o.Values
	}
	return toSerialize, nil
}

type NullableRunFilter struct {
	value *RunFilter
	isSet bool
}

func (v NullableRunFilter) Get() *RunFilter {
	return v.value
}

func (v *NullableRunFilter) Set(val *RunFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableRunFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableRunFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunFilter(val *RunFilter) *NullableRunFilter {
	return &NullableRunFilter{value: val, isSet: true}
}

func (v NullableRunFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
