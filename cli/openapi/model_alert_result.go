/*
TraceTest

OpenAPI definition for TraceTest endpoint and resources

API version: 0.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AlertResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AlertResult{}

// AlertResult struct for AlertResult
type AlertResult struct {
	AlertId *string        `json:"alertId,omitempty"`
	Id      *string        `json:"id,omitempty"`
	Webhook *WebhookResult `json:"webhook,omitempty"`
}

// NewAlertResult instantiates a new AlertResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlertResult() *AlertResult {
	this := AlertResult{}
	return &this
}

// NewAlertResultWithDefaults instantiates a new AlertResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertResultWithDefaults() *AlertResult {
	this := AlertResult{}
	return &this
}

// GetAlertId returns the AlertId field value if set, zero value otherwise.
func (o *AlertResult) GetAlertId() string {
	if o == nil || isNil(o.AlertId) {
		var ret string
		return ret
	}
	return *o.AlertId
}

// GetAlertIdOk returns a tuple with the AlertId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertResult) GetAlertIdOk() (*string, bool) {
	if o == nil || isNil(o.AlertId) {
		return nil, false
	}
	return o.AlertId, true
}

// HasAlertId returns a boolean if a field has been set.
func (o *AlertResult) HasAlertId() bool {
	if o != nil && !isNil(o.AlertId) {
		return true
	}

	return false
}

// SetAlertId gets a reference to the given string and assigns it to the AlertId field.
func (o *AlertResult) SetAlertId(v string) {
	o.AlertId = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AlertResult) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertResult) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AlertResult) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AlertResult) SetId(v string) {
	o.Id = &v
}

// GetWebhook returns the Webhook field value if set, zero value otherwise.
func (o *AlertResult) GetWebhook() WebhookResult {
	if o == nil || isNil(o.Webhook) {
		var ret WebhookResult
		return ret
	}
	return *o.Webhook
}

// GetWebhookOk returns a tuple with the Webhook field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertResult) GetWebhookOk() (*WebhookResult, bool) {
	if o == nil || isNil(o.Webhook) {
		return nil, false
	}
	return o.Webhook, true
}

// HasWebhook returns a boolean if a field has been set.
func (o *AlertResult) HasWebhook() bool {
	if o != nil && !isNil(o.Webhook) {
		return true
	}

	return false
}

// SetWebhook gets a reference to the given WebhookResult and assigns it to the Webhook field.
func (o *AlertResult) SetWebhook(v WebhookResult) {
	o.Webhook = &v
}

func (o AlertResult) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AlertResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AlertId) {
		toSerialize["alertId"] = o.AlertId
	}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Webhook) {
		toSerialize["webhook"] = o.Webhook
	}
	return toSerialize, nil
}

type NullableAlertResult struct {
	value *AlertResult
	isSet bool
}

func (v NullableAlertResult) Get() *AlertResult {
	return v.value
}

func (v *NullableAlertResult) Set(val *AlertResult) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertResult) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertResult(val *AlertResult) *NullableAlertResult {
	return &NullableAlertResult{value: val, isSet: true}
}

func (v NullableAlertResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
