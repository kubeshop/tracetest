/*
TraceTest

OpenAPI definition for TraceTest endpoint and resources

API version: 0.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SelectorFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SelectorFilter{}

// SelectorFilter struct for SelectorFilter
type SelectorFilter struct {
	Property string `json:"property"`
	Operator string `json:"operator"`
	Value    string `json:"value"`
}

// NewSelectorFilter instantiates a new SelectorFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSelectorFilter(property string, operator string, value string) *SelectorFilter {
	this := SelectorFilter{}
	this.Property = property
	this.Operator = operator
	this.Value = value
	return &this
}

// NewSelectorFilterWithDefaults instantiates a new SelectorFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSelectorFilterWithDefaults() *SelectorFilter {
	this := SelectorFilter{}
	return &this
}

// GetProperty returns the Property field value
func (o *SelectorFilter) GetProperty() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Property
}

// GetPropertyOk returns a tuple with the Property field value
// and a boolean to check if the value has been set.
func (o *SelectorFilter) GetPropertyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Property, true
}

// SetProperty sets field value
func (o *SelectorFilter) SetProperty(v string) {
	o.Property = v
}

// GetOperator returns the Operator field value
func (o *SelectorFilter) GetOperator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value
// and a boolean to check if the value has been set.
func (o *SelectorFilter) GetOperatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operator, true
}

// SetOperator sets field value
func (o *SelectorFilter) SetOperator(v string) {
	o.Operator = v
}

// GetValue returns the Value field value
func (o *SelectorFilter) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *SelectorFilter) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *SelectorFilter) SetValue(v string) {
	o.Value = v
}

func (o SelectorFilter) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SelectorFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["property"] = o.Property
	toSerialize["operator"] = o.Operator
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

type NullableSelectorFilter struct {
	value *SelectorFilter
	isSet bool
}

func (v NullableSelectorFilter) Get() *SelectorFilter {
	return v.value
}

func (v *NullableSelectorFilter) Set(val *SelectorFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableSelectorFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableSelectorFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSelectorFilter(val *SelectorFilter) *NullableSelectorFilter {
	return &NullableSelectorFilter{value: val, isSet: true}
}

func (v NullableSelectorFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSelectorFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
