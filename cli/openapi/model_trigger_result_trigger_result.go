/*
TraceTest

OpenAPI definition for TraceTest endpoint and resources

API version: 0.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TriggerResultTriggerResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TriggerResultTriggerResult{}

// TriggerResultTriggerResult struct for TriggerResultTriggerResult
type TriggerResultTriggerResult struct {
	Http    *HTTPResponse    `json:"http,omitempty"`
	Grpc    *GRPCResponse    `json:"grpc,omitempty"`
	Traceid *TRACEIDResponse `json:"traceid,omitempty"`
	Kafka   *KafkaResponse   `json:"kafka,omitempty"`
	Error   *TriggerError    `json:"error,omitempty"`
}

// NewTriggerResultTriggerResult instantiates a new TriggerResultTriggerResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTriggerResultTriggerResult() *TriggerResultTriggerResult {
	this := TriggerResultTriggerResult{}
	return &this
}

// NewTriggerResultTriggerResultWithDefaults instantiates a new TriggerResultTriggerResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTriggerResultTriggerResultWithDefaults() *TriggerResultTriggerResult {
	this := TriggerResultTriggerResult{}
	return &this
}

// GetHttp returns the Http field value if set, zero value otherwise.
func (o *TriggerResultTriggerResult) GetHttp() HTTPResponse {
	if o == nil || isNil(o.Http) {
		var ret HTTPResponse
		return ret
	}
	return *o.Http
}

// GetHttpOk returns a tuple with the Http field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TriggerResultTriggerResult) GetHttpOk() (*HTTPResponse, bool) {
	if o == nil || isNil(o.Http) {
		return nil, false
	}
	return o.Http, true
}

// HasHttp returns a boolean if a field has been set.
func (o *TriggerResultTriggerResult) HasHttp() bool {
	if o != nil && !isNil(o.Http) {
		return true
	}

	return false
}

// SetHttp gets a reference to the given HTTPResponse and assigns it to the Http field.
func (o *TriggerResultTriggerResult) SetHttp(v HTTPResponse) {
	o.Http = &v
}

// GetGrpc returns the Grpc field value if set, zero value otherwise.
func (o *TriggerResultTriggerResult) GetGrpc() GRPCResponse {
	if o == nil || isNil(o.Grpc) {
		var ret GRPCResponse
		return ret
	}
	return *o.Grpc
}

// GetGrpcOk returns a tuple with the Grpc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TriggerResultTriggerResult) GetGrpcOk() (*GRPCResponse, bool) {
	if o == nil || isNil(o.Grpc) {
		return nil, false
	}
	return o.Grpc, true
}

// HasGrpc returns a boolean if a field has been set.
func (o *TriggerResultTriggerResult) HasGrpc() bool {
	if o != nil && !isNil(o.Grpc) {
		return true
	}

	return false
}

// SetGrpc gets a reference to the given GRPCResponse and assigns it to the Grpc field.
func (o *TriggerResultTriggerResult) SetGrpc(v GRPCResponse) {
	o.Grpc = &v
}

// GetTraceid returns the Traceid field value if set, zero value otherwise.
func (o *TriggerResultTriggerResult) GetTraceid() TRACEIDResponse {
	if o == nil || isNil(o.Traceid) {
		var ret TRACEIDResponse
		return ret
	}
	return *o.Traceid
}

// GetTraceidOk returns a tuple with the Traceid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TriggerResultTriggerResult) GetTraceidOk() (*TRACEIDResponse, bool) {
	if o == nil || isNil(o.Traceid) {
		return nil, false
	}
	return o.Traceid, true
}

// HasTraceid returns a boolean if a field has been set.
func (o *TriggerResultTriggerResult) HasTraceid() bool {
	if o != nil && !isNil(o.Traceid) {
		return true
	}

	return false
}

// SetTraceid gets a reference to the given TRACEIDResponse and assigns it to the Traceid field.
func (o *TriggerResultTriggerResult) SetTraceid(v TRACEIDResponse) {
	o.Traceid = &v
}

// GetKafka returns the Kafka field value if set, zero value otherwise.
func (o *TriggerResultTriggerResult) GetKafka() KafkaResponse {
	if o == nil || isNil(o.Kafka) {
		var ret KafkaResponse
		return ret
	}
	return *o.Kafka
}

// GetKafkaOk returns a tuple with the Kafka field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TriggerResultTriggerResult) GetKafkaOk() (*KafkaResponse, bool) {
	if o == nil || isNil(o.Kafka) {
		return nil, false
	}
	return o.Kafka, true
}

// HasKafka returns a boolean if a field has been set.
func (o *TriggerResultTriggerResult) HasKafka() bool {
	if o != nil && !isNil(o.Kafka) {
		return true
	}

	return false
}

// SetKafka gets a reference to the given KafkaResponse and assigns it to the Kafka field.
func (o *TriggerResultTriggerResult) SetKafka(v KafkaResponse) {
	o.Kafka = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *TriggerResultTriggerResult) GetError() TriggerError {
	if o == nil || isNil(o.Error) {
		var ret TriggerError
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TriggerResultTriggerResult) GetErrorOk() (*TriggerError, bool) {
	if o == nil || isNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *TriggerResultTriggerResult) HasError() bool {
	if o != nil && !isNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given TriggerError and assigns it to the Error field.
func (o *TriggerResultTriggerResult) SetError(v TriggerError) {
	o.Error = &v
}

func (o TriggerResultTriggerResult) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TriggerResultTriggerResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Http) {
		toSerialize["http"] = o.Http
	}
	if !isNil(o.Grpc) {
		toSerialize["grpc"] = o.Grpc
	}
	if !isNil(o.Traceid) {
		toSerialize["traceid"] = o.Traceid
	}
	if !isNil(o.Kafka) {
		toSerialize["kafka"] = o.Kafka
	}
	if !isNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	return toSerialize, nil
}

type NullableTriggerResultTriggerResult struct {
	value *TriggerResultTriggerResult
	isSet bool
}

func (v NullableTriggerResultTriggerResult) Get() *TriggerResultTriggerResult {
	return v.value
}

func (v *NullableTriggerResultTriggerResult) Set(val *TriggerResultTriggerResult) {
	v.value = val
	v.isSet = true
}

func (v NullableTriggerResultTriggerResult) IsSet() bool {
	return v.isSet
}

func (v *NullableTriggerResultTriggerResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTriggerResultTriggerResult(val *TriggerResultTriggerResult) *NullableTriggerResultTriggerResult {
	return &NullableTriggerResultTriggerResult{value: val, isSet: true}
}

func (v NullableTriggerResultTriggerResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTriggerResultTriggerResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
