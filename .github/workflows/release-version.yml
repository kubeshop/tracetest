name: Release Tracetest

permissions:
  contents: write

concurrency:
  group: "release-server"
  cancel-in-progress: true

defaults:
  run:
    shell: bash

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
      - "v[0-9]+.[0-9]+.[0-9]+-*"
jobs:
  release-server:
    name: Build and push server docker image
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Login to DockerHub
      uses: docker/login-action@v2
      if: github.event_name != 'pull_request'
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Docker metadata for Tracetest
      id: meta
      uses: docker/metadata-action@v3
      with:
        images: kubeshop/tracetest
        tags: |
          type=match,pattern=v(.*)
          type=sha
        flavor: |
          latest=true
    - name: Build and push
      uses: docker/build-push-action@v3
      with:
        platforms: linux/amd64
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        file: Dockerfile
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          ANALYTICS_BE_KEY=${{ secrets.ANALYTICS_BE_KEY }}
          ANALYTICS_FE_KEY=${{ secrets.ANALYTICS_FE_KEY }}
          VERSION=${{ github.ref_name}}
          TRACETEST_ENV=main

  release-cli:
    name: Build CLI release arctifacts
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Fetch all tags
        run: git fetch --force --tags
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.18
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v2
        with:
          distribution: goreleaser
          version: latest
          workdir: ./cli/
          args: release --rm-dist -f ../.goreleaser.yaml
        env:
          ANALYTICS_BE_KEY: ${{ secrets.ANALYTICS_BE_KEY }}
          VERSION: ${{ github.ref_name}}
          TRACETEST_ENV: main
          GITHUB_TOKEN: ${{ secrets.CI_BOT_TOKEN }}
          FURY_TOKEN: ${{ secrets.FURY_TOKEN }}

  helm_chart_version_bump:
      name: "Trigger Helm chart appVersion update"
      needs: "release-server"
      runs-on: ubuntu-latest
      steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          repository: "kubeshop/helm-charts"
          ref: "main"
          fetch-depth: 0
          token: ${{ secrets.CI_BOT_TOKEN }}
      - name: Install Helm
        uses: azure/setup-helm@v1
        with:
          version: v3.4.0
      - name: Bump up tracetest chart
        run: |
          # sets appVersion in the Chart.yaml
          echo New appVersion: ${{ github.ref_name }}
          sed  -i -e "s/^appVersion: .*$/appVersion: \"${{ github.ref_name}}\"/" charts/tracetest/Chart.yaml
          # Bumps charts patch version
          CURRENT_VERSION=$(sed  -n  -e  "s/^version: \(.*\)$/\1/p"  charts/tracetest/Chart.yaml)
          echo Current chart version ${CURRENT_VERSION}
          NEW_VERSION=$(echo $CURRENT_VERSION |awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
          echo New version ${NEW_VERSION}
          sed -i -e "s/^version: .*/version: ${NEW_VERSION}/g" charts/tracetest/Chart.yaml

      - name: Lint the chart
        run: |
          helm dependency update charts/tracetest
          helm lint charts/tracetest
      - name: Push updated chart
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
          git remote -v
          git add .
          git commit -m "automatically updated tracetest related charts"
          git push

      - name: Slack Notification if the helm version bump succeeded
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: tracetest
          SLACK_COLOR: good
          SLACK_ICON: https://github.githubassets.com/images/modules/site/features/actions-icon-actions.svg
          SLACK_TITLE: Helm chart version bump succeeded :party_blob:!
          SLACK_MESSAGE: "Tracetest chart version was bumped"
          SLACK_USERNAME: GitHub
          SLACK_LINK_NAMES: true
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_FOOTER: "Kubeshop --> Tracetest"

  demo-build:
    name: Create and upload docker image
    runs-on: ubuntu-latest
    needs: helm_chart_version_bump
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-main
        restore-keys: |
          ${{ runner.os }}-buildx-
    - name: Login to DockerHub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Docker metadata for Tracetest
      id: meta
      uses: docker/metadata-action@v3
      with:
        images: kubeshop/tracetest
        tags: |
          type=match,pattern=v(.*),suffix=-demo
        flavor: |
          latest=false
    - name: Build and push Tracetest
      uses: docker/build-push-action@v2
      with:
        context: .
        file: Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new
        build-args: |
          ANALYTICS_BE_KEY=${{ secrets.ANALYTICS_BE_KEY }}
          ANALYTICS_FE_KEY=${{ secrets.ANALYTICS_FE_KEY }}
          VERSION=${{ github.ref_name}}-demo
          TRACETEST_ENV=demo
          POKE_API=http://demo-pokemon-api.demo.svc.cluster.local
    - name: Set ouput docker tag
      run: echo "::set-output tag=${{ steps.meta.outputs.tags }}"

  demo-deploy:
    if: github.event_name == 'push'
    needs: demo-build
    name: Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - uses: google-github-actions/setup-gcloud@94337306dda8180d967a56932ceb4ddcf01edae7
      with:
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        project_id: ${{ secrets.GKE_PROJECT }}

    - run: |-
        gcloud --quiet auth configure-docker

    - uses: google-github-actions/get-gke-credentials@fb08709ba27618c31c09e014e1d8364b02e5042e
      with:
        cluster_name: ${{ secrets.GKE_CLUSTER }}
        location: ${{ secrets.GKE_ZONE }}
        credentials: ${{ secrets.GKE_SA_KEY }}

    - name: Deploy
      run: |
        TAG=${{ github.ref_name}}-demo \
        NAME=tracetest-demo \
        CONFIG_FILE=./k8s/tracetest.demo.yaml \
        EXPOSE_HOST=demo.tracetest.io \
        CERT_NAME=tracetest-demo \
        BACKEND_CONFIG=tracetest-demo \
        ./k8s/deploy.sh


  notify_slack_if_helm_chart_bump_fails:
    runs-on: ubuntu-latest
    needs: helm_chart_version_bump
    if: always() && (needs.helm_chart_version_bump.result == 'failure')
    steps:
    - name: Slack Notification if Helm Release action failed
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_CHANNEL: tracetest
        SLACK_COLOR: ${{ needs.helm_chart_version_bump.result }}
        SLACK_ICON: https://github.githubassets.com/images/modules/site/features/actions-icon-actions.svg
        SLACK_TITLE: Helm Chart version bump action failed :boom:!
        SLACK_USERNAME: GitHub
        SLACK_LINK_NAMES: true
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_FOOTER: "Kubeshop --> Tracetest"

  chocolatey-release:
    needs: release-cli
    name: Release on Chocolatey
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Download newest version
        id: cliDownload
        shell: pwsh
        run: |
          $tag = $env:TAG
          $version = $tag.trimStart("v")
          echo "$version"
          Invoke-Webrequest -URI "https://github.com/kubeshop/tracetest/releases/download/v${version}/tracetest_${version}_windows_amd64.tar.gz" -OutFile tracetest.tar.gz
          $hash = Get-FileHash tracetest.tar.gz | Select -ExpandProperty Hash

          echo '::echo::on'
          echo "::set-output name=hash::$hash"
          echo "::set-output name=version::$version"
        env:
          TAG: ${{ github.ref_name }}
      - name: Generate release files
        shell: pwsh
        run: |
          (Get-Content scripts/choco/tools/chocolateyinstall.ps1) -Replace '%checksum%', $env:PACKAGE_CHECKSUM | Set-Content scripts/choco/tools/chocolateyinstall.ps1
          (Get-Content scripts/choco/tracetest.nuspec) -Replace '%version%', $env:PACKAGE_VERSION | Set-Content scripts/choco/tracetest.nuspec
        env:
          PACKAGE_CHECKSUM: ${{ steps.cliDownload.outputs.hash }}
          PACKAGE_VERSION: ${{ steps.cliDownload.outputs.version }}
      - name: Pack and release
        shell: pwsh
        run: |
          # install choco
          Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))

          cd scripts/choco
          choco pack

          choco apikey --key $CHOCOLATEY_API_KEY --source $CHOCOLATEY_REPO
          choco push tracetest.$PACKAGE_VERSION.nupkg --source $CHOCOLATEY_REPO
        env:
          CHOCOLATEY_API_KEY: ${{ secrets.COMMOM_CHOCO_API_KEY }}
          CHOCOLATEY_REPO: ${{ secrets.CHOCOLATEY_REPO }}
          PACKAGE_VERSION: ${{ steps.cliDownload.outputs.version }}
