/*
TraceTest

OpenAPI definition for TraceTest endpoint and resources

API version: 0.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the LinterResourcePlugin type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LinterResourcePlugin{}

// LinterResourcePlugin struct for LinterResourcePlugin
type LinterResourcePlugin struct {
	Id          *string              `json:"id,omitempty"`
	Name        *string              `json:"name,omitempty"`
	Description *string              `json:"description,omitempty"`
	Enabled     *bool                `json:"enabled,omitempty"`
	Rules       []LinterResourceRule `json:"rules,omitempty"`
}

// NewLinterResourcePlugin instantiates a new LinterResourcePlugin object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLinterResourcePlugin() *LinterResourcePlugin {
	this := LinterResourcePlugin{}
	return &this
}

// NewLinterResourcePluginWithDefaults instantiates a new LinterResourcePlugin object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLinterResourcePluginWithDefaults() *LinterResourcePlugin {
	this := LinterResourcePlugin{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *LinterResourcePlugin) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinterResourcePlugin) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *LinterResourcePlugin) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *LinterResourcePlugin) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *LinterResourcePlugin) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinterResourcePlugin) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *LinterResourcePlugin) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *LinterResourcePlugin) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *LinterResourcePlugin) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinterResourcePlugin) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *LinterResourcePlugin) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *LinterResourcePlugin) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *LinterResourcePlugin) GetEnabled() bool {
	if o == nil || isNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinterResourcePlugin) GetEnabledOk() (*bool, bool) {
	if o == nil || isNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *LinterResourcePlugin) HasEnabled() bool {
	if o != nil && !isNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *LinterResourcePlugin) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetRules returns the Rules field value if set, zero value otherwise.
func (o *LinterResourcePlugin) GetRules() []LinterResourceRule {
	if o == nil || isNil(o.Rules) {
		var ret []LinterResourceRule
		return ret
	}
	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinterResourcePlugin) GetRulesOk() ([]LinterResourceRule, bool) {
	if o == nil || isNil(o.Rules) {
		return nil, false
	}
	return o.Rules, true
}

// HasRules returns a boolean if a field has been set.
func (o *LinterResourcePlugin) HasRules() bool {
	if o != nil && !isNil(o.Rules) {
		return true
	}

	return false
}

// SetRules gets a reference to the given []LinterResourceRule and assigns it to the Rules field.
func (o *LinterResourcePlugin) SetRules(v []LinterResourceRule) {
	o.Rules = v
}

func (o LinterResourcePlugin) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LinterResourcePlugin) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	// skip: name is readOnly
	// skip: description is readOnly
	if !isNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !isNil(o.Rules) {
		toSerialize["rules"] = o.Rules
	}
	return toSerialize, nil
}

type NullableLinterResourcePlugin struct {
	value *LinterResourcePlugin
	isSet bool
}

func (v NullableLinterResourcePlugin) Get() *LinterResourcePlugin {
	return v.value
}

func (v *NullableLinterResourcePlugin) Set(val *LinterResourcePlugin) {
	v.value = val
	v.isSet = true
}

func (v NullableLinterResourcePlugin) IsSet() bool {
	return v.isSet
}

func (v *NullableLinterResourcePlugin) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinterResourcePlugin(val *LinterResourcePlugin) *NullableLinterResourcePlugin {
	return &NullableLinterResourcePlugin{value: val, isSet: true}
}

func (v NullableLinterResourcePlugin) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinterResourcePlugin) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
