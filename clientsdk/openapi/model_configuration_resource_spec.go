/*
TraceTest

OpenAPI definition for TraceTest endpoint and resources

API version: 0.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ConfigurationResourceSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigurationResourceSpec{}

// ConfigurationResourceSpec Represents the set of configuration common options for Tracetest.
type ConfigurationResourceSpec struct {
	// ID of the configuration resource. It should always be set as 'current'.
	Id *string `json:"id,omitempty"`
	// Name given for this configuration set. It should always be set as 'Config'.
	Name *string `json:"name,omitempty"`
	// Flag telling if a user allow Tracetest to send analytics about its usage.
	AnalyticsEnabled bool `json:"analyticsEnabled"`
}

// NewConfigurationResourceSpec instantiates a new ConfigurationResourceSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigurationResourceSpec(analyticsEnabled bool) *ConfigurationResourceSpec {
	this := ConfigurationResourceSpec{}
	this.AnalyticsEnabled = analyticsEnabled
	return &this
}

// NewConfigurationResourceSpecWithDefaults instantiates a new ConfigurationResourceSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigurationResourceSpecWithDefaults() *ConfigurationResourceSpec {
	this := ConfigurationResourceSpec{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ConfigurationResourceSpec) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationResourceSpec) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ConfigurationResourceSpec) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ConfigurationResourceSpec) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ConfigurationResourceSpec) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationResourceSpec) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ConfigurationResourceSpec) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ConfigurationResourceSpec) SetName(v string) {
	o.Name = &v
}

// GetAnalyticsEnabled returns the AnalyticsEnabled field value
func (o *ConfigurationResourceSpec) GetAnalyticsEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AnalyticsEnabled
}

// GetAnalyticsEnabledOk returns a tuple with the AnalyticsEnabled field value
// and a boolean to check if the value has been set.
func (o *ConfigurationResourceSpec) GetAnalyticsEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AnalyticsEnabled, true
}

// SetAnalyticsEnabled sets field value
func (o *ConfigurationResourceSpec) SetAnalyticsEnabled(v bool) {
	o.AnalyticsEnabled = v
}

func (o ConfigurationResourceSpec) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigurationResourceSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["analyticsEnabled"] = o.AnalyticsEnabled
	return toSerialize, nil
}

type NullableConfigurationResourceSpec struct {
	value *ConfigurationResourceSpec
	isSet bool
}

func (v NullableConfigurationResourceSpec) Get() *ConfigurationResourceSpec {
	return v.value
}

func (v *NullableConfigurationResourceSpec) Set(val *ConfigurationResourceSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigurationResourceSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigurationResourceSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigurationResourceSpec(val *ConfigurationResourceSpec) *NullableConfigurationResourceSpec {
	return &NullableConfigurationResourceSpec{value: val, isSet: true}
}

func (v NullableConfigurationResourceSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigurationResourceSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
