/*
TraceTest

OpenAPI definition for TraceTest endpoint and resources

API version: 0.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the LinterResultPlugin type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LinterResultPlugin{}

// LinterResultPlugin struct for LinterResultPlugin
type LinterResultPlugin struct {
	Name        *string                  `json:"name,omitempty"`
	Description *string                  `json:"description,omitempty"`
	Passed      *bool                    `json:"passed,omitempty"`
	Score       *int32                   `json:"score,omitempty"`
	Rules       []LinterResultPluginRule `json:"rules,omitempty"`
}

// NewLinterResultPlugin instantiates a new LinterResultPlugin object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLinterResultPlugin() *LinterResultPlugin {
	this := LinterResultPlugin{}
	return &this
}

// NewLinterResultPluginWithDefaults instantiates a new LinterResultPlugin object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLinterResultPluginWithDefaults() *LinterResultPlugin {
	this := LinterResultPlugin{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *LinterResultPlugin) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinterResultPlugin) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *LinterResultPlugin) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *LinterResultPlugin) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *LinterResultPlugin) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinterResultPlugin) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *LinterResultPlugin) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *LinterResultPlugin) SetDescription(v string) {
	o.Description = &v
}

// GetPassed returns the Passed field value if set, zero value otherwise.
func (o *LinterResultPlugin) GetPassed() bool {
	if o == nil || isNil(o.Passed) {
		var ret bool
		return ret
	}
	return *o.Passed
}

// GetPassedOk returns a tuple with the Passed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinterResultPlugin) GetPassedOk() (*bool, bool) {
	if o == nil || isNil(o.Passed) {
		return nil, false
	}
	return o.Passed, true
}

// HasPassed returns a boolean if a field has been set.
func (o *LinterResultPlugin) HasPassed() bool {
	if o != nil && !isNil(o.Passed) {
		return true
	}

	return false
}

// SetPassed gets a reference to the given bool and assigns it to the Passed field.
func (o *LinterResultPlugin) SetPassed(v bool) {
	o.Passed = &v
}

// GetScore returns the Score field value if set, zero value otherwise.
func (o *LinterResultPlugin) GetScore() int32 {
	if o == nil || isNil(o.Score) {
		var ret int32
		return ret
	}
	return *o.Score
}

// GetScoreOk returns a tuple with the Score field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinterResultPlugin) GetScoreOk() (*int32, bool) {
	if o == nil || isNil(o.Score) {
		return nil, false
	}
	return o.Score, true
}

// HasScore returns a boolean if a field has been set.
func (o *LinterResultPlugin) HasScore() bool {
	if o != nil && !isNil(o.Score) {
		return true
	}

	return false
}

// SetScore gets a reference to the given int32 and assigns it to the Score field.
func (o *LinterResultPlugin) SetScore(v int32) {
	o.Score = &v
}

// GetRules returns the Rules field value if set, zero value otherwise.
func (o *LinterResultPlugin) GetRules() []LinterResultPluginRule {
	if o == nil || isNil(o.Rules) {
		var ret []LinterResultPluginRule
		return ret
	}
	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinterResultPlugin) GetRulesOk() ([]LinterResultPluginRule, bool) {
	if o == nil || isNil(o.Rules) {
		return nil, false
	}
	return o.Rules, true
}

// HasRules returns a boolean if a field has been set.
func (o *LinterResultPlugin) HasRules() bool {
	if o != nil && !isNil(o.Rules) {
		return true
	}

	return false
}

// SetRules gets a reference to the given []LinterResultPluginRule and assigns it to the Rules field.
func (o *LinterResultPlugin) SetRules(v []LinterResultPluginRule) {
	o.Rules = v
}

func (o LinterResultPlugin) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LinterResultPlugin) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !isNil(o.Passed) {
		toSerialize["passed"] = o.Passed
	}
	if !isNil(o.Score) {
		toSerialize["score"] = o.Score
	}
	if !isNil(o.Rules) {
		toSerialize["rules"] = o.Rules
	}
	return toSerialize, nil
}

type NullableLinterResultPlugin struct {
	value *LinterResultPlugin
	isSet bool
}

func (v NullableLinterResultPlugin) Get() *LinterResultPlugin {
	return v.value
}

func (v *NullableLinterResultPlugin) Set(val *LinterResultPlugin) {
	v.value = val
	v.isSet = true
}

func (v NullableLinterResultPlugin) IsSet() bool {
	return v.isSet
}

func (v *NullableLinterResultPlugin) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinterResultPlugin(val *LinterResultPlugin) *NullableLinterResultPlugin {
	return &NullableLinterResultPlugin{value: val, isSet: true}
}

func (v NullableLinterResultPlugin) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinterResultPlugin) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
