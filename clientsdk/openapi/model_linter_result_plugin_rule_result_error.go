/*
TraceTest

OpenAPI definition for TraceTest endpoint and resources

API version: 0.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the LinterResultPluginRuleResultError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LinterResultPluginRuleResultError{}

// LinterResultPluginRuleResultError struct for LinterResultPluginRuleResultError
type LinterResultPluginRuleResultError struct {
	Value       *string  `json:"value,omitempty"`
	Expected    *string  `json:"expected,omitempty"`
	Description *string  `json:"description,omitempty"`
	Suggestions []string `json:"suggestions,omitempty"`
}

// NewLinterResultPluginRuleResultError instantiates a new LinterResultPluginRuleResultError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLinterResultPluginRuleResultError() *LinterResultPluginRuleResultError {
	this := LinterResultPluginRuleResultError{}
	return &this
}

// NewLinterResultPluginRuleResultErrorWithDefaults instantiates a new LinterResultPluginRuleResultError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLinterResultPluginRuleResultErrorWithDefaults() *LinterResultPluginRuleResultError {
	this := LinterResultPluginRuleResultError{}
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *LinterResultPluginRuleResultError) GetValue() string {
	if o == nil || isNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinterResultPluginRuleResultError) GetValueOk() (*string, bool) {
	if o == nil || isNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *LinterResultPluginRuleResultError) HasValue() bool {
	if o != nil && !isNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *LinterResultPluginRuleResultError) SetValue(v string) {
	o.Value = &v
}

// GetExpected returns the Expected field value if set, zero value otherwise.
func (o *LinterResultPluginRuleResultError) GetExpected() string {
	if o == nil || isNil(o.Expected) {
		var ret string
		return ret
	}
	return *o.Expected
}

// GetExpectedOk returns a tuple with the Expected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinterResultPluginRuleResultError) GetExpectedOk() (*string, bool) {
	if o == nil || isNil(o.Expected) {
		return nil, false
	}
	return o.Expected, true
}

// HasExpected returns a boolean if a field has been set.
func (o *LinterResultPluginRuleResultError) HasExpected() bool {
	if o != nil && !isNil(o.Expected) {
		return true
	}

	return false
}

// SetExpected gets a reference to the given string and assigns it to the Expected field.
func (o *LinterResultPluginRuleResultError) SetExpected(v string) {
	o.Expected = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *LinterResultPluginRuleResultError) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinterResultPluginRuleResultError) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *LinterResultPluginRuleResultError) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *LinterResultPluginRuleResultError) SetDescription(v string) {
	o.Description = &v
}

// GetSuggestions returns the Suggestions field value if set, zero value otherwise.
func (o *LinterResultPluginRuleResultError) GetSuggestions() []string {
	if o == nil || isNil(o.Suggestions) {
		var ret []string
		return ret
	}
	return o.Suggestions
}

// GetSuggestionsOk returns a tuple with the Suggestions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinterResultPluginRuleResultError) GetSuggestionsOk() ([]string, bool) {
	if o == nil || isNil(o.Suggestions) {
		return nil, false
	}
	return o.Suggestions, true
}

// HasSuggestions returns a boolean if a field has been set.
func (o *LinterResultPluginRuleResultError) HasSuggestions() bool {
	if o != nil && !isNil(o.Suggestions) {
		return true
	}

	return false
}

// SetSuggestions gets a reference to the given []string and assigns it to the Suggestions field.
func (o *LinterResultPluginRuleResultError) SetSuggestions(v []string) {
	o.Suggestions = v
}

func (o LinterResultPluginRuleResultError) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LinterResultPluginRuleResultError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !isNil(o.Expected) {
		toSerialize["expected"] = o.Expected
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !isNil(o.Suggestions) {
		toSerialize["suggestions"] = o.Suggestions
	}
	return toSerialize, nil
}

type NullableLinterResultPluginRuleResultError struct {
	value *LinterResultPluginRuleResultError
	isSet bool
}

func (v NullableLinterResultPluginRuleResultError) Get() *LinterResultPluginRuleResultError {
	return v.value
}

func (v *NullableLinterResultPluginRuleResultError) Set(val *LinterResultPluginRuleResultError) {
	v.value = val
	v.isSet = true
}

func (v NullableLinterResultPluginRuleResultError) IsSet() bool {
	return v.isSet
}

func (v *NullableLinterResultPluginRuleResultError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinterResultPluginRuleResultError(val *LinterResultPluginRuleResultError) *NullableLinterResultPluginRuleResultError {
	return &NullableLinterResultPluginRuleResultError{value: val, isSet: true}
}

func (v NullableLinterResultPluginRuleResultError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinterResultPluginRuleResultError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
