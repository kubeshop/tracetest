/*
TraceTest

OpenAPI definition for TraceTest endpoint and resources

API version: 0.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Wizard type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Wizard{}

// Wizard struct for Wizard
type Wizard struct {
	Steps []WizardStep `json:"steps,omitempty"`
}

// NewWizard instantiates a new Wizard object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWizard() *Wizard {
	this := Wizard{}
	return &this
}

// NewWizardWithDefaults instantiates a new Wizard object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWizardWithDefaults() *Wizard {
	this := Wizard{}
	return &this
}

// GetSteps returns the Steps field value if set, zero value otherwise.
func (o *Wizard) GetSteps() []WizardStep {
	if o == nil || isNil(o.Steps) {
		var ret []WizardStep
		return ret
	}
	return o.Steps
}

// GetStepsOk returns a tuple with the Steps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Wizard) GetStepsOk() ([]WizardStep, bool) {
	if o == nil || isNil(o.Steps) {
		return nil, false
	}
	return o.Steps, true
}

// HasSteps returns a boolean if a field has been set.
func (o *Wizard) HasSteps() bool {
	if o != nil && !isNil(o.Steps) {
		return true
	}

	return false
}

// SetSteps gets a reference to the given []WizardStep and assigns it to the Steps field.
func (o *Wizard) SetSteps(v []WizardStep) {
	o.Steps = v
}

func (o Wizard) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Wizard) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Steps) {
		toSerialize["steps"] = o.Steps
	}
	return toSerialize, nil
}

type NullableWizard struct {
	value *Wizard
	isSet bool
}

func (v NullableWizard) Get() *Wizard {
	return v.value
}

func (v *NullableWizard) Set(val *Wizard) {
	v.value = val
	v.isSet = true
}

func (v NullableWizard) IsSet() bool {
	return v.isSet
}

func (v *NullableWizard) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWizard(val *Wizard) *NullableWizard {
	return &NullableWizard{value: val, isSet: true}
}

func (v NullableWizard) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWizard) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
