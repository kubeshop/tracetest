/*
TraceTest

OpenAPI definition for TraceTest endpoint and resources

API version: 0.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the KafkaResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KafkaResponse{}

// KafkaResponse struct for KafkaResponse
type KafkaResponse struct {
	Partition *string `json:"partition,omitempty"`
	Offset    *string `json:"offset,omitempty"`
}

// NewKafkaResponse instantiates a new KafkaResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKafkaResponse() *KafkaResponse {
	this := KafkaResponse{}
	return &this
}

// NewKafkaResponseWithDefaults instantiates a new KafkaResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKafkaResponseWithDefaults() *KafkaResponse {
	this := KafkaResponse{}
	return &this
}

// GetPartition returns the Partition field value if set, zero value otherwise.
func (o *KafkaResponse) GetPartition() string {
	if o == nil || isNil(o.Partition) {
		var ret string
		return ret
	}
	return *o.Partition
}

// GetPartitionOk returns a tuple with the Partition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KafkaResponse) GetPartitionOk() (*string, bool) {
	if o == nil || isNil(o.Partition) {
		return nil, false
	}
	return o.Partition, true
}

// HasPartition returns a boolean if a field has been set.
func (o *KafkaResponse) HasPartition() bool {
	if o != nil && !isNil(o.Partition) {
		return true
	}

	return false
}

// SetPartition gets a reference to the given string and assigns it to the Partition field.
func (o *KafkaResponse) SetPartition(v string) {
	o.Partition = &v
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *KafkaResponse) GetOffset() string {
	if o == nil || isNil(o.Offset) {
		var ret string
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KafkaResponse) GetOffsetOk() (*string, bool) {
	if o == nil || isNil(o.Offset) {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *KafkaResponse) HasOffset() bool {
	if o != nil && !isNil(o.Offset) {
		return true
	}

	return false
}

// SetOffset gets a reference to the given string and assigns it to the Offset field.
func (o *KafkaResponse) SetOffset(v string) {
	o.Offset = &v
}

func (o KafkaResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KafkaResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Partition) {
		toSerialize["partition"] = o.Partition
	}
	if !isNil(o.Offset) {
		toSerialize["offset"] = o.Offset
	}
	return toSerialize, nil
}

type NullableKafkaResponse struct {
	value *KafkaResponse
	isSet bool
}

func (v NullableKafkaResponse) Get() *KafkaResponse {
	return v.value
}

func (v *NullableKafkaResponse) Set(val *KafkaResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableKafkaResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableKafkaResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKafkaResponse(val *KafkaResponse) *NullableKafkaResponse {
	return &NullableKafkaResponse{value: val, isSet: true}
}

func (v NullableKafkaResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKafkaResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
