/*
TraceTest

OpenAPI definition for TraceTest endpoint and resources

API version: 0.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PollingProfile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PollingProfile{}

// PollingProfile Represents a polling profile structured into the Resources format.
type PollingProfile struct {
	// Represents the type of this resource. It should always be set as 'PollingProfile'.
	Type *string             `json:"type,omitempty"`
	Spec *PollingProfileSpec `json:"spec,omitempty"`
}

// NewPollingProfile instantiates a new PollingProfile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPollingProfile() *PollingProfile {
	this := PollingProfile{}
	return &this
}

// NewPollingProfileWithDefaults instantiates a new PollingProfile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPollingProfileWithDefaults() *PollingProfile {
	this := PollingProfile{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PollingProfile) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PollingProfile) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PollingProfile) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PollingProfile) SetType(v string) {
	o.Type = &v
}

// GetSpec returns the Spec field value if set, zero value otherwise.
func (o *PollingProfile) GetSpec() PollingProfileSpec {
	if o == nil || isNil(o.Spec) {
		var ret PollingProfileSpec
		return ret
	}
	return *o.Spec
}

// GetSpecOk returns a tuple with the Spec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PollingProfile) GetSpecOk() (*PollingProfileSpec, bool) {
	if o == nil || isNil(o.Spec) {
		return nil, false
	}
	return o.Spec, true
}

// HasSpec returns a boolean if a field has been set.
func (o *PollingProfile) HasSpec() bool {
	if o != nil && !isNil(o.Spec) {
		return true
	}

	return false
}

// SetSpec gets a reference to the given PollingProfileSpec and assigns it to the Spec field.
func (o *PollingProfile) SetSpec(v PollingProfileSpec) {
	o.Spec = &v
}

func (o PollingProfile) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PollingProfile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !isNil(o.Spec) {
		toSerialize["spec"] = o.Spec
	}
	return toSerialize, nil
}

type NullablePollingProfile struct {
	value *PollingProfile
	isSet bool
}

func (v NullablePollingProfile) Get() *PollingProfile {
	return v.value
}

func (v *NullablePollingProfile) Set(val *PollingProfile) {
	v.value = val
	v.isSet = true
}

func (v NullablePollingProfile) IsSet() bool {
	return v.isSet
}

func (v *NullablePollingProfile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePollingProfile(val *PollingProfile) *NullablePollingProfile {
	return &NullablePollingProfile{value: val, isSet: true}
}

func (v NullablePollingProfile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePollingProfile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
