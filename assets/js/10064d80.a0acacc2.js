"use strict";(self.webpackChunktracetest_docs=self.webpackChunktracetest_docs||[]).push([[1186],{33739:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var s=n(74848),r=n(28453);const i={id:"running-tests-with-tracetest-playwright-engine",title:"True End-To-End Trace-Based Tests with the Tracetest Playwright Engine Trigger",description:"Quickstart on how to create True End-To-End Trace-Based Tests with the Tracetest Playwright Engine Trigger",hide_table_of_contents:!1,keywords:["tracetest","trace-based testing","observability","distributed tracing","end-to-end testing","tracetest","playwright","trace-based-testing","trigger"],image:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1698686403/docs/Blog_Thumbnail_14_rsvkmo.jpg"},a=void 0,o={id:"examples-tutorials/recipes/running-tests-with-tracetest-playwright-engine",title:"True End-To-End Trace-Based Tests with the Tracetest Playwright Engine Trigger",description:"Quickstart on how to create True End-To-End Trace-Based Tests with the Tracetest Playwright Engine Trigger",source:"@site/docs/examples-tutorials/recipes/running-tests-with-tracetest-playwright-engine.mdx",sourceDirName:"examples-tutorials/recipes",slug:"/examples-tutorials/recipes/running-tests-with-tracetest-playwright-engine",permalink:"/examples-tutorials/recipes/running-tests-with-tracetest-playwright-engine",draft:!1,unlisted:!1,editUrl:"https://github.com/kubeshop/tracetest/blob/main/docs/docs/examples-tutorials/recipes/running-tests-with-tracetest-playwright-engine.mdx",tags:[],version:"current",frontMatter:{id:"running-tests-with-tracetest-playwright-engine",title:"True End-To-End Trace-Based Tests with the Tracetest Playwright Engine Trigger",description:"Quickstart on how to create True End-To-End Trace-Based Tests with the Tracetest Playwright Engine Trigger",hide_table_of_contents:!1,keywords:["tracetest","trace-based testing","observability","distributed tracing","end-to-end testing","tracetest","playwright","trace-based-testing","trigger"],image:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1698686403/docs/Blog_Thumbnail_14_rsvkmo.jpg"},sidebar:"guidesSidebar",previous:{title:"\ud83c\udf71 Recipes",permalink:"/examples-tutorials/recipes"},next:{title:"Migrating Tests from Playwright Integration to Playwright Engine",permalink:"/examples-tutorials/recipes/migrating-tests-from-playwright-integration-to-playwright-engine"}},c={},l=[{value:"Why is this important?",id:"why-is-this-important",level:2},{value:"Requirements",id:"requirements",level:2},{value:"Run This Example",id:"run-this-example",level:2},{value:"Project Structure",id:"project-structure",level:2},{value:"Provisioned Resources",id:"provisioned-resources",level:2},{value:"Import Pokemon Test",id:"import-pokemon-test",level:3},{value:"Playwright Script",id:"playwright-script",level:3},{value:"Jaeger Tracing Backend",id:"jaeger-tracing-backend",level:3},{value:"The Apply Script",id:"the-apply-script",level:3},{value:"The Run Script",id:"the-run-script",level:3},{value:"Setting the Environment Variables",id:"setting-the-environment-variables",level:2},{value:"Running the Full Example",id:"running-the-full-example",level:2},{value:"Finding the Results",id:"finding-the-results",level:2},{value:"What&#39;s Next?",id:"whats-next",level:2},{value:"Learn More",id:"learn-more",level:2}];function h(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.admonition,{title:"Tracetest x Playwright Frontend Instrumentation Requirements",type:"info",children:(0,s.jsxs)(t.p,{children:["Find out the requirements for your instrumented app to start using ",(0,s.jsx)(t.a,{href:"https://tracetest.io/blog/tracetest-tip-instrumentation-for-end-to-end-tests",children:"Tracetest x Playwright"}),"."]})}),"\n",(0,s.jsx)(t.admonition,{title:"Version Compatibility",type:"info",children:(0,s.jsxs)(t.p,{children:["The features described here are compatible with the ",(0,s.jsx)(t.a,{href:"https://github.com/kubeshop/tracetest/releases/tag/v1.4.1",children:"Tracetest CLI v1.4.1"})," and above."]})}),"\n",(0,s.jsx)(t.admonition,{type:"note",children:(0,s.jsx)(t.p,{children:(0,s.jsx)(t.a,{href:"https://github.com/kubeshop/tracetest/tree/main/examples/tracetest-playwright-engine",children:"Check out the source code on GitHub here."})})}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"https://tracetest.io/",children:"Tracetest"})," is a testing tool based on ",(0,s.jsx)(t.a,{href:"https://opentelemetry.io/",children:"OpenTelemetry"})," that permits you to test your distributed application. It allows you to use the trace data generated by your OpenTelemetry tools to check and assert if your application has the desired behavior defined by your test definitions."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"https://playwright.dev/",children:"Playwright"})," is an open-source automation framework developed by Microsoft that enables cross-browser automation for web applications. It provides a set of APIs and libraries for automating interactions with web browsers such as Chrome, Firefox, and Microsoft Edge."]}),"\n",(0,s.jsx)(t.h2,{id:"why-is-this-important",children:"Why is this important?"}),"\n",(0,s.jsx)(t.p,{children:"The Tracetest Playwright Engine trigger enables you to combine the power of end-to-end tests with trace-based testing to easily capture a full distributed trace from your OpenTelemetry instrumented front-end and back-end system."}),"\n",(0,s.jsx)(t.p,{children:"By creating a Tracetest Playwright Engine test, you will be able to create trace-based assertions to be applied across the entire flow like any other Tracetest test. Not only that but it allows you to mix and match it with your existing Monitors, Test Suites and CI/CD validations."}),"\n",(0,s.jsx)(t.p,{children:"Another big benefit of using traces as test specs is that you can:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Get faster MTTR for failing performance tests"}),"\n",(0,s.jsx)(t.li,{children:"Assert against the Playwright test execution and the system under test"}),"\n",(0,s.jsx)(t.li,{children:"Validate functionality of other parts of your system that may be broken, even when end-to-end tests are passing"}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"requirements",children:"Requirements"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Tracetest Account"}),":"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Sign up to ",(0,s.jsx)(t.a,{href:"https://app.tracetest.io",children:(0,s.jsx)(t.code,{children:"app.tracetest.io"})})," or follow the ",(0,s.jsx)(t.a,{href:"/getting-started/overview",children:"get started"})," docs."]}),"\n",(0,s.jsxs)(t.li,{children:["Have access to the environment's ",(0,s.jsx)(t.a,{href:"https://app.tracetest.io/retrieve-token",children:"agent API key"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Docker"}),": Have ",(0,s.jsx)(t.a,{href:"https://docs.docker.com/get-docker/",children:"Docker"})," and ",(0,s.jsx)(t.a,{href:"https://docs.docker.com/compose/install/",children:"Docker Compose"})," installed on your machine."]}),"\n",(0,s.jsx)(t.h2,{id:"run-this-example",children:"Run This Example"}),"\n",(0,s.jsx)(t.p,{children:"The example below is provided as part of the Tracetest GitHub repo. You can download and run the example by following these steps:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"git clone https://github.com/kubeshop/tracetest\ncd tracetest/examples/tracetest-playwright-engine\n"})}),"\n",(0,s.jsx)(t.p,{children:"Follow these instructions to run the quick start:"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:["Copy the ",(0,s.jsx)(t.code,{children:".env.template"})," file to ",(0,s.jsx)(t.code,{children:".env"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:["Fill out the ",(0,s.jsx)(t.a,{href:"https://app.tracetest.io/retrieve-token",children:"TRACETEST_TOKEN and ENVIRONMENT_ID"})," details by editing your ",(0,s.jsx)(t.code,{children:".env"})," file."]}),"\n",(0,s.jsxs)(t.li,{children:["Run ",(0,s.jsx)(t.code,{children:"docker compose run tracetest-run"}),"."]}),"\n",(0,s.jsx)(t.li,{children:"Follow the links in the output to view the test results."}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"project-structure",children:"Project Structure"}),"\n",(0,s.jsx)(t.p,{children:"The project structure for running Tracetest Playwright Engine tests is as follows:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:".env.template\n.gitignore\n.Dockerfile\ncollector.config.yaml\ndocker-compose.yaml\n/resources\n  apply.sh\n  datastore.yaml\n  test.yaml\n  run.sh\n  script.js\n"})}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.a,{href:"/live-examples/pokeshop/overview",children:"Pokeshop Demo App"})," is a complete example of a distributed application using different back-end and front-end services. We will be launching it and running tests against it as part of this example.\nThe ",(0,s.jsx)(t.code,{children:"docker-compose.yaml"})," file in the root directory of the quick start runs the Pokeshop Demo app, the OpenTelemetry Collector, Jaeger, and the ",(0,s.jsx)(t.a,{href:"/concepts/agent",children:"Tracetest Agent"})," setup."]}),"\n",(0,s.jsxs)(t.p,{children:["The Tracetest resource definitions and scripts are defined under the ",(0,s.jsx)(t.code,{children:"/resources"})," directory. The resources include tests and the tracing backend definition, while the scripts include the ",(0,s.jsx)(t.code,{children:"apply.sh"})," and ",(0,s.jsx)(t.code,{children:"run.sh"})," scripts to apply the resources and run the tests."]}),"\n",(0,s.jsx)(t.h2,{id:"provisioned-resources",children:"Provisioned Resources"}),"\n",(0,s.jsx)(t.p,{children:"The example provisions the following resources:"}),"\n",(0,s.jsx)(t.h3,{id:"import-pokemon-test",children:"Import Pokemon Test"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",metastring:'title="resources/test.yaml"',children:'type: Test\nspec:\n  id: import-pokemon\n  name: Import Pokemon\n  trigger:\n    type: playwrightengine\n    playwrightEngine:\n      target: http://api:8081\n      script: ./script.js\n      method: importPokemon\n  specs:\n    - selector: span[tracetest.span.type="general" name="documentLoad"]\n      name: Document Load Should be fast\n      assertions:\n        - attr:tracetest.span.duration < 500ms\n    - selector: span[tracetest.span.type="http" http.scheme="http"]\n      name: All HTTP request should return 200\n      assertions:\n        - attr:http.status_code = 200\n    - selector: span[tracetest.span.type="messaging" name="queue.synchronizePokemon\n        process" messaging.system="rabbitmq"\n        messaging.destination="queue.synchronizePokemon"\n        messaging.operation="process"]\n      name: The worker should be processed\n      assertions:\n        - attr:tracetest.selected_spans.count = 1\n    - selector: span[tracetest.span.type="database"]\n      name: "All Database Spans: Processing time is less than 100ms"\n      assertions:\n        - attr:tracetest.span.duration  <  250ms\n'})}),"\n",(0,s.jsx)(t.h3,{id:"playwright-script",children:"Playwright Script"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",metastring:'title="resources/script.js"',children:'const { expect } = require("@playwright/test");\n\nasync function importPokemon(page) {\n  expect(await page.getByText("Pokeshop")).toBeTruthy();\n\n  await page.click("text=Import");\n  await page.getByLabel("ID").fill("143");\n\n  await Promise.all([\n    page.waitForResponse((resp) => resp.url().includes("/pokemon/import") && resp.status() === 200),\n    page.getByRole("button", { name: "OK", exact: true }).click(),\n  ]);\n}\n\nmodule.exports = { importPokemon };\n'})}),"\n",(0,s.jsx)(t.h3,{id:"jaeger-tracing-backend",children:"Jaeger Tracing Backend"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",metastring:'title="resources/datastore.yaml"',children:'type: DataStore\nspec:\n  id: current\n  name: jaeger\n  type: jaeger\n  default: true\n  jaeger:\n    endpoint: jaeger:16685\n    headers:\n      "": ""\n    tls:\n      insecure: true\n'})}),"\n",(0,s.jsx)(t.h3,{id:"the-apply-script",children:"The Apply Script"}),"\n",(0,s.jsx)(t.p,{children:"The apply script configures and provisions the resources in the Tracetest environment:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",metastring:'title="resources/apply.sh"',children:'#!/bin/sh\n\nset -e\n\nTOKEN=$TRACETEST_API_KEY\nENVIRONMENT_ID=$TRACETEST_ENVIRONMENT_ID\n\napply() {\n  echo "Configuring TraceTest"\n  tracetest configure --token $TOKEN --environment $ENVIRONMENT_ID\n\n  echo "Applying Resources"\n  tracetest apply datastore -f /resources/datastore.yaml\n  tracetest apply test -f /resources/test.yaml\n}\n\napply\n'})}),"\n",(0,s.jsx)(t.h3,{id:"the-run-script",children:"The Run Script"}),"\n",(0,s.jsx)(t.p,{children:"The run script runs the test suite against the provisioned resources:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",metastring:'title="resources/run.sh"',children:'#!/bin/sh\n\nset -e\n\nTOKEN=$TRACETEST_API_KEY\nENVIRONMENT_ID=$TRACETEST_ENVIRONMENT_ID\n\nrun() {\n  echo "Configuring Tracetest"\n  tracetest configure --token $TOKEN --environment $ENVIRONMENT_ID\n\n  echo "Running Trace-Based Tests..."\n  tracetest run test -f /resources/test.yaml\n}\n\nrun\n'})}),"\n",(0,s.jsx)(t.h2,{id:"setting-the-environment-variables",children:"Setting the Environment Variables"}),"\n",(0,s.jsxs)(t.p,{children:["Copy the ",(0,s.jsx)(t.code,{children:".env.template"})," file to ",(0,s.jsx)(t.code,{children:".env"})," and add the Tracetest API token and agent tokens to the ",(0,s.jsx)(t.code,{children:"TRACETEST_API_TOKEN"})," and ",(0,s.jsx)(t.code,{children:"TRACETEST_ENVIRONMENT_ID"})," variables."]}),"\n",(0,s.jsx)(t.h2,{id:"running-the-full-example",children:"Running the Full Example"}),"\n",(0,s.jsx)(t.p,{children:"Everything is automated for you to only run the following command:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"docker compose run tracetest-run\n"})}),"\n",(0,s.jsxs)(t.p,{children:["This command will run the ",(0,s.jsx)(t.code,{children:"apply.sh"})," script to provision the resources and the ",(0,s.jsx)(t.code,{children:"run.sh"})," script to run the test suite."]}),"\n",(0,s.jsx)(t.h2,{id:"finding-the-results",children:"Finding the Results"}),"\n",(0,s.jsx)(t.p,{children:"The output from the Tracetest Engine script should be visible in the console log after running the test command."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",metastring:"title=Output",children:"docker compose run tracetest-run\n\n[+] Running 2/2\n \u2714 worker Pulled                                                                                                                                                  0.9s\n \u2714 api Pulled                                                                                                                                                     1.2s\n[+] Creating 6/0\n \u2714 Container tracetest-playwright-engine-tracetest-agent-1  Running                                                                                               0.0s\n \u2714 Container tracetest-playwright-engine-otel-collector-1   Running                                                                                               0.0s\n \u2714 Container tracetest-playwright-engine-jaeger-1           Running                                                                                               0.0s\n \u2714 Container tracetest-playwright-engine-postgres-1         Running                                                                                               0.0s\n \u2714 Container tracetest-playwright-engine-queue-1            Running                                                                                               0.0s\n \u2714 Container tracetest-playwright-engine-cache-1            Running                                                                                               0.0s\n[+] Running 6/6\n \u2714 Container tracetest-playwright-engine-queue-1            Healthy                                                                                               0.5s\n \u2714 Container tracetest-playwright-engine-postgres-1         Healthy                                                                                               0.5s\n \u2714 Container tracetest-playwright-engine-cache-1            Healthy                                                                                               0.5s\n \u2714 Container tracetest-playwright-engine-worker-1           Started                                                                                               0.1s\n \u2714 Container tracetest-playwright-engine-api-1              Healthy                                                                                               1.7s\n \u2714 Container tracetest-playwright-engine-tracetest-apply-1  Started                                                                                               0.1s\n[+] Running 2/2\n \u2714 api Pulled                                                                                                                                                     1.0s\n \u2714 worker Pulled                                                                                                                                                  1.0s\nConfiguring Tracetest\n SUCCESS  Successfully configured Tracetest CLI\nRunning Trace-Based Tests...\n\u2714 RunGroup: #2XdxnzuIR (https://app.tracetest.io/organizations/ttorg_ced62e34638d965e/environments/ttenv_b42fa137465c6e04/run/2XdxnzuIR)\n Summary: 1 passed, 0 failed, 0 pending\n  \u2714 Import Pokemon (https://app.tracetest.io/organizations/ttorg_ced62e34638d965e/environments/ttenv_b42fa137465c6e04/test/import-pokemon/run/19/test) - trace id: 3d5cf7f8d3c78b2bc49eaa355809dc0e\n\t\u2714 Document Load Should be fast\n\t\u2714 All HTTP request should return 200\n\t\u2714 The worker should be processed\n\t\u2714 All Database Spans: Processing time is less than 100ms\n"})}),"\n",(0,s.jsx)(t.h2,{id:"whats-next",children:"What's Next?"}),"\n",(0,s.jsx)(t.p,{children:"After running the test, you can click the run link, update the assertions, and run the scripts once more. This flow enables complete a trace-based TDD flow."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"assertions",src:n(76667).A+"",width:"1650",height:"1255"})}),"\n",(0,s.jsx)(t.h2,{id:"learn-more",children:"Learn More"}),"\n",(0,s.jsxs)(t.p,{children:["Please visit our ",(0,s.jsx)(t.a,{href:"https://github.com/kubeshop/tracetest/tree/main/examples",children:"examples in GitHub"})," and join our ",(0,s.jsx)(t.a,{href:"https://dub.sh/tracetest-community",children:"Slack Community"})," for more info!"]})]})}function d(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},76667:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/playwright-engine-fd1b71b240a697bdcb171a6c80c9f4a2.gif"},28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var s=n(96540);const r={},i=s.createContext(r);function a(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);