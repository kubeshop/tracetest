"use strict";(self.webpackChunktracetest_docs=self.webpackChunktracetest_docs||[]).push([[2972],{37402:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>o,contentTitle:()=>a,default:()=>p,frontMatter:()=>r,metadata:()=>c,toc:()=>l});var n=s(74848),i=s(28453);const r={id:"creating-tests-graphql",title:"Defining GraphQL Tests as Text Files",description:"Tracetest enables developers to define tests as text files and run them using a CLI. Integrate the execution of tests in your existing CI pipeline.",keywords:["tracetest","trace-based testing","observability","distributed tracing","testing","graphql"],image:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1698686403/docs/Blog_Thumbnail_14_rsvkmo.jpg"},a=void 0,c={id:"cli/creating-tests-graphql",title:"Defining GraphQL Tests as Text Files",description:"Tracetest enables developers to define tests as text files and run them using a CLI. Integrate the execution of tests in your existing CI pipeline.",source:"@site/docs/cli/creating-tests-graphql.mdx",sourceDirName:"cli",slug:"/cli/creating-tests-graphql",permalink:"/cli/creating-tests-graphql",draft:!1,unlisted:!1,editUrl:"https://github.com/kubeshop/tracetest/blob/main/docs/docs/cli/creating-tests-graphql.mdx",tags:[],version:"current",frontMatter:{id:"creating-tests-graphql",title:"Defining GraphQL Tests as Text Files",description:"Tracetest enables developers to define tests as text files and run them using a CLI. Integrate the execution of tests in your existing CI pipeline.",keywords:["tracetest","trace-based testing","observability","distributed tracing","testing","graphql"],image:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1698686403/docs/Blog_Thumbnail_14_rsvkmo.jpg"},sidebar:"tutorialSidebar",previous:{title:"Defining Playwright Engine Tests as Text Files",permalink:"/cli/creating-tests-playwright-engine"},next:{title:"Defining TraceID Tests as Text Files",permalink:"/cli/creating-tests-traceid"}},o={},l=[];function d(e){const t={code:"code",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.p,{children:["When defining a GraphQL trigger, you are required to define a ",(0,n.jsx)(t.code,{children:"graphql"})," object containing the request Tracetest will send to your system. You also define: ",(0,n.jsx)(t.code,{children:"body"})," with ",(0,n.jsx)(t.code,{children:"query"}),", ",(0,n.jsx)(t.code,{children:"variables"})," and ",(0,n.jsx)(t.code,{children:"operationName"}),", ",(0,n.jsx)(t.code,{children:"url"}),", ",(0,n.jsx)(t.code,{children:"headers"}),", and ",(0,n.jsx)(t.code,{children:"SSLVerification"}),", and ",(0,n.jsx)(t.code,{children:"schema"}),"."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-yaml",children:'trigger:\n  type: graphql\n  graphql:\n    url: ${env:GRAPHQL_URL}\n    headers:\n      - key: Content-Type\n        value: application/json\n    body:\n      # path to the query file or the query itself\n      query: ./query.graphql\n      variables: {}\n      operationName: ""\n    sslVerification: false\n    # path to the schema file or the schema itself\n    schema: ./schema.graphql\n'})})]})}function p(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>a,x:()=>c});var n=s(96540);const i={},r=n.createContext(i);function a(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);