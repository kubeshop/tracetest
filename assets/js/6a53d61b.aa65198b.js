"use strict";(self.webpackChunktracetest_docs=self.webpackChunktracetest_docs||[]).push([[2475],{37307:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>l});var s=n(74848),r=n(28453);const a={id:"testing-lambda-functions-with-opentelemetry-tracetest",title:"Testing AWS Lambda Functions (Serverless Framework) with OpenTelemetry and Tracetest",description:"Quickstart on how to configure AWS Lambda functions with OpenTelemetry and Tracetest for enhancing your integration tests with trace-based testing.",hide_table_of_contents:!1,keywords:["tracetest","trace-based testing","observability","distributed tracing","testing","end to end testing","end-to-end testing","integration testing","lambda","aws","serverless testing","testing serverless functions","testing aws lambda","lambda testing","opentelemetry"],image:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1698686403/docs/Blog_Thumbnail_14_rsvkmo.jpg"},i=void 0,o={id:"examples-tutorials/recipes/testing-lambda-functions-with-opentelemetry-tracetest",title:"Testing AWS Lambda Functions (Serverless Framework) with OpenTelemetry and Tracetest",description:"Quickstart on how to configure AWS Lambda functions with OpenTelemetry and Tracetest for enhancing your integration tests with trace-based testing.",source:"@site/docs/examples-tutorials/recipes/testing-lambda-functions-with-opentelemetry-tracetest.mdx",sourceDirName:"examples-tutorials/recipes",slug:"/examples-tutorials/recipes/testing-lambda-functions-with-opentelemetry-tracetest",permalink:"/examples-tutorials/recipes/testing-lambda-functions-with-opentelemetry-tracetest",draft:!1,unlisted:!1,editUrl:"https://github.com/kubeshop/tracetest/blob/main/docs/docs/examples-tutorials/recipes/testing-lambda-functions-with-opentelemetry-tracetest.mdx",tags:[],version:"current",frontMatter:{id:"testing-lambda-functions-with-opentelemetry-tracetest",title:"Testing AWS Lambda Functions (Serverless Framework) with OpenTelemetry and Tracetest",description:"Quickstart on how to configure AWS Lambda functions with OpenTelemetry and Tracetest for enhancing your integration tests with trace-based testing.",hide_table_of_contents:!1,keywords:["tracetest","trace-based testing","observability","distributed tracing","testing","end to end testing","end-to-end testing","integration testing","lambda","aws","serverless testing","testing serverless functions","testing aws lambda","lambda testing","opentelemetry"],image:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1698686403/docs/Blog_Thumbnail_14_rsvkmo.jpg"},sidebar:"guidesSidebar",previous:{title:"Testing Vercel Functions (Next.js) with OpenTelemetry and Tracetest",permalink:"/examples-tutorials/recipes/testing-vercel-functions-with-opentelemetry-tracetest"},next:{title:"Testing Cloudflare Workers with OpenTelemetry and Tracetest",permalink:"/examples-tutorials/recipes/testing-cloudflare-workers-with-opentelemetry-tracetest"}},c={},l=[{value:"Why is this important?",id:"why-is-this-important",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Project Structure",id:"project-structure",level:2},{value:"1. AWS Lambda Function",id:"1-aws-lambda-function",level:3},{value:"2. Tracetest",id:"2-tracetest",level:3},{value:"AWS Lambda Function",id:"aws-lambda-function",level:2},{value:"Set up Environment Variables",id:"set-up-environment-variables",level:2},{value:"The Tracetest Script",id:"the-tracetest-script",level:2},{value:"Tracetest App Results",id:"tracetest-app-results",level:3},{value:"Running the example",id:"running-the-example",level:3},{value:"Learn More",id:"learn-more",level:2}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.admonition,{type:"note",children:(0,s.jsx)(t.p,{children:(0,s.jsx)(t.a,{href:"https://github.com/kubeshop/tracetest/tree/main/examples/quick-start-serverless",children:"Check out the source code on GitHub here."})})}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"https://tracetest.io/",children:"Tracetest"})," is a testing tool based on ",(0,s.jsx)(t.a,{href:"https://opentelemetry.io/",children:"OpenTelemetry"})," that allows you to test your distributed application. It allows you to use data from distributed traces generated by OpenTelemetry to validate and assert if your application has the desired behavior defined by your test definitions."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"https://aws.amazon.com/lambda/",children:"AWS Lambda"})," is a serverless, event-driven compute service that lets you run code for virtually any type of application or backend service without provisioning or managing servers. You can trigger Lambda from over 200 AWS services and software as a service (SaaS) applications, and only pay for what you use."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"https://www.serverless.com/",children:"The Serverless Framework"})," is an open-source framework designed to help developers build and deploy serverless applications more efficiently. It abstracts away the underlying infrastructure management tasks, allowing developers to focus solely on writing code and defining the functions that comprise their applications."]}),"\n",(0,s.jsx)(t.h2,{id:"why-is-this-important",children:"Why is this important?"}),"\n",(0,s.jsx)(t.p,{children:"Testing Serverless Functions has been a pain point for years. Not having visibility into the infrastructure and not knowing where a test fails causes the MTTR to be higher than for other tools. Including OpenTelemetry in AWS Lambda functions exposes telemetry that you can use for both production visibility and trace-based testing."}),"\n",(0,s.jsxs)(t.p,{children:["This sample shows how to run integration tests against AWS Lambda Functions with the help of the Serverless Framework to manage resources, and using ",(0,s.jsx)(t.a,{href:"https://opentelemetry.io/",children:"OpenTelemetry"})," and Tracetest."]}),"\n",(0,s.jsx)(t.p,{children:"The AWS Lambda function will fetch data from an external API, transform the data, and insert it into an AWS DynamoDB table. This particular flow has two failure points that are difficult to test."}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsx)(t.li,{children:"Validating that an external API request from an AWS Lambda function is successful."}),"\n",(0,s.jsx)(t.li,{children:"Validating that the DynamoDB put request is successful."}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Tracetest Account"}),":"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Copy the ",(0,s.jsx)(t.code,{children:".env.template"})," file to ",(0,s.jsx)(t.code,{children:".env"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:["Log into ",(0,s.jsx)(t.strong,{children:"the"})," ",(0,s.jsx)(t.a,{href:"https://app.tracetest.io/",children:"Tracetest app"}),"."]}),"\n",(0,s.jsx)(t.li,{children:"This example is configured to use the OpenTelemetry Collector. Ensure the environment you will be utilizing to run this example is also configured to use the OpenTelemetry Tracing Backend by clicking on Settings, Tracing Backend, OpenTelemetry, and Save."}),"\n",(0,s.jsxs)(t.li,{children:["Configure your environment to use ",(0,s.jsx)(t.a,{href:"https://docs.tracetest.io/concepts/cloud-agent",children:"the cloud agent"}),', click the Click the Settings link and from the Agent tab select the "Run Agent in tracetest cloud" option.']}),"\n",(0,s.jsxs)(t.li,{children:["Fill out the ",(0,s.jsx)(t.a,{href:"https://docs.tracetest.io/concepts/environment-tokens",children:"token"})," and ",(0,s.jsx)(t.a,{href:"https://docs.tracetest.io/concepts/cloud-agent",children:"agent url"})," details by editing your .env file. You can find these values in the Settings area for your environment."]}),"\n",(0,s.jsxs)(t.li,{children:["Have your ",(0,s.jsx)(t.a,{href:"https://aws.amazon.com/",children:"AWS Account"})," with the ",(0,s.jsx)(t.a,{href:"https://aws.amazon.com/cli/",children:"AWS CLI"})," installed and configured."]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"AWS Lambda Functions Example:"})}),"\n",(0,s.jsxs)(t.p,{children:["Clone the ",(0,s.jsx)(t.a,{href:"https://github.com/kubeshop/tracetest",children:"Tracetest GitHub Repo"})," to your local machine, and open the Serverless quick start example app."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",metastring:"title=Terminal",children:"git clone https://github.com/kubeshop/tracetest.git\ncd tracetest/examples/quick-start-serverless\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Before moving forward, run ",(0,s.jsx)(t.code,{children:"npm i"})," in the root folder to install the dependencies."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",metastring:"title=Terminal",children:"npm i\n"})}),"\n",(0,s.jsx)(t.h2,{id:"project-structure",children:"Project Structure"}),"\n",(0,s.jsxs)(t.p,{children:["This is a ",(0,s.jsx)(t.a,{href:"https://www.serverless.com/",children:"Serverless Framework"})," project bootstrapped with ",(0,s.jsx)(t.a,{href:"https://www.npmjs.com/package/serverless#quick-start",children:(0,s.jsx)(t.code,{children:"serverless"})}),"."]}),"\n",(0,s.jsx)(t.h3,{id:"1-aws-lambda-function",children:"1. AWS Lambda Function"}),"\n",(0,s.jsxs)(t.p,{children:["The AWS Lambda Function code can be found in ",(0,s.jsx)(t.code,{children:"src/"})," alongside the ",(0,s.jsx)(t.a,{href:"https://opentelemetry.io/docs/languages/js/serverless/",children:"OpenTelemetry wrapper configured as explained in the OpenTelemetry docs"}),"."]}),"\n",(0,s.jsx)(t.h3,{id:"2-tracetest",children:"2. Tracetest"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"tracetest.ts"})," file contains the script that will execute the trace-based tests based on the serverless deployment."]}),"\n",(0,s.jsx)(t.h2,{id:"aws-lambda-function",children:"AWS Lambda Function"}),"\n",(0,s.jsxs)(t.p,{children:["The AWS Lambda is a simple API, ",(0,s.jsxs)(t.a,{href:"https://github.com/kubeshop/tracetest/blob/main/examples/quick-start-serverless/src/handler.ts",children:["contained in the ",(0,s.jsx)(t.code,{children:"src/handler.ts"})," file"]}),"."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",metastring:"title=src/handler.ts",children:'import { APIGatewayEvent, Handler } from "aws-lambda";\nimport fetch from "node-fetch";\nimport { Pokemon, RawPokemon } from "./types";\nimport DynamoDb from "./dynamodb";\n\nconst Pokemon = (raw: RawPokemon): Pokemon => ({\n  id: raw.id,\n  name: raw.name,\n  types: raw.types.map((type) => type.type.name),\n  imageUrl: raw.sprites.front_default,\n});\n\nconst getPokemon = async (id: string): Promise<Pokemon> => {\n  const url = `https://pokeapi.co/api/v2/pokemon/${id}`;\n  const res = await fetch(url);\n\n  const raw = await res.json();\n\n  return Pokemon(raw);\n};\n\nconst insertPokemon = async (pokemon: Pokemon) => {\n  await DynamoDb.put(pokemon);\n\n  return DynamoDb.get<Pokemon>(pokemon.id);\n};\n\ntype TBody = { id: string };\n\nexport const importPokemon: Handler<APIGatewayEvent> = async (event) => {\n  console.log(event);\n\n  const { id = "" } = JSON.parse(event.body || "") as TBody;\n\n  try {\n    const pokemon = await getPokemon(id);\n    const result = await insertPokemon(pokemon);\n\n    return {\n      statusCode: 200,\n      body: JSON.stringify(result),\n    };\n  } catch (error) {\n    return {\n      statusCode: 400,\n      body: error.message,\n    };\n  }\n};\n'})}),"\n",(0,s.jsxs)(t.p,{children:["The OpenTelemetry tracing is ",(0,s.jsxs)(t.a,{href:"https://github.com/kubeshop/tracetest/blob/main/examples/quick-start-serverless/src/lambda-wrapper.ts",children:["contained in the ",(0,s.jsx)(t.code,{children:"src/lambda-wrapper.ts"})," file"]}),". Traces will be sent to the Tracetest Cloud Agent."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",metastring:"title=src/lambda-wrapper.ts",children:'const api = require("@opentelemetry/api");\nconst { BatchSpanProcessor } = require("@opentelemetry/sdk-trace-base");\nconst { OTLPTraceExporter } = require("@opentelemetry/exporter-trace-otlp-grpc");\nconst { NodeTracerProvider } = require("@opentelemetry/sdk-trace-node");\nconst { registerInstrumentations } = require("@opentelemetry/instrumentation");\nconst { getNodeAutoInstrumentations } = require("@opentelemetry/auto-instrumentations-node");\n\napi.diag.setLogger(new api.DiagConsoleLogger(), api.DiagLogLevel.ALL);\n\nconst { COLLECTOR_ENDPOINT = "" } = process.env;\n\nconst provider = new NodeTracerProvider();\n\nconst spanProcessor = new BatchSpanProcessor(\n  new OTLPTraceExporter({\n    url: COLLECTOR_ENDPOINT,\n  })\n);\n\nprovider.addSpanProcessor(spanProcessor);\nprovider.register();\n\nregisterInstrumentations({\n  instrumentations: [\n    getNodeAutoInstrumentations({\n      "@opentelemetry/instrumentation-aws-lambda": {\n        disableAwsContextPropagation: true,\n      },\n    }),\n  ],\n});\n'})}),"\n",(0,s.jsx)(t.h2,{id:"set-up-environment-variables",children:"Set up Environment Variables"}),"\n",(0,s.jsxs)(t.p,{children:["Copy the ",(0,s.jsx)(t.code,{children:".env.template"})," and create a ",(0,s.jsx)(t.code,{children:".env"})," file in the same directory. Add token and Cloud Agent endpoint."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-txt",metastring:"title=.env",children:"TRACETEST_AGENT_ENDPOINT=<my_agent_endpoint>\nTRACETEST_API_KEY=<my_token_with_engineer_access>\n"})}),"\n",(0,s.jsx)(t.h2,{id:"the-tracetest-script",children:"The Tracetest Script"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"tracetest.ts"})," file contains the script that will execute the trace-based tests based on the serverless deployment."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",metastring:"title=tracetest.ts",children:'import Tracetest from "@tracetest/client";\nimport { TestResource } from "@tracetest/client/dist/modules/openapi-client";\nimport { config } from "dotenv";\n\nconfig();\n\nconst { TRACETEST_API_TOKEN = "", ENDPOINT = "" } = process.env;\n\nconst definition: TestResource = {\n  type: "Test",\n  spec: {\n    id: "ZV1G3v2IR",\n    name: "Serverless: Import Pokemon",\n    trigger: {\n      type: "http",\n      httpRequest: {\n        method: "POST",\n        url: "${var:ENDPOINT}/import",\n        body: \'{"id": "${var:POKEMON_ID}"}\\n\',\n        headers: [\n          {\n            key: "Content-Type",\n            value: "application/json",\n          },\n        ],\n      },\n    },\n    specs: [\n      {\n        selector: \'span[tracetest.span.type="database"]\',\n        name: "All Database Spans: Processing time is less than 100ms",\n        assertions: ["attr:tracetest.span.duration < 100ms"],\n      },\n      {\n        selector: \'span[tracetest.span.type="http"]\',\n        name: "All HTTP Spans: Status  code is 200",\n        assertions: ["attr:http.status_code = 200"],\n      },\n      {\n        selector:\n          \'span[name="tracetest-serverless-dev-api"] span[tracetest.span.type="http" name="GET" http.method="GET"]\',\n        name: "The request matches the pokemon Id",\n        assertions: [\'attr:http.url  =  "https://pokeapi.co/api/v2/pokemon/${var:POKEMON_ID}"\'],\n      },\n    ],\n  },\n};\n\nconst main = async () => {\n  const tracetest = await Tracetest(TRACETEST_API_TOKEN);\n\n  const test = await tracetest.newTest(definition);\n  await tracetest.runTest(test, {\n    variables: [\n      {\n        key: "ENDPOINT",\n        value: ENDPOINT.trim(),\n      },\n      {\n        key: "POKEMON_ID",\n        value: `${Math.floor(Math.random() * 100) + 1}`,\n      },\n    ],\n  });\n  console.log(await tracetest.getSummary());\n};\n\nmain();\n'})}),"\n",(0,s.jsxs)(t.p,{children:["The output from the ",(0,s.jsx)(t.code,{children:"tracetest.ts"})," script will show the test results with links to the Tracetest App."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",metastring:"title=Terminal",children:'> tracetest-serverless@1.0.0 test\n> ENDPOINT="$(serverless info --verbose | grep HttpApiUrl | sed s/HttpApiUrl\\:\\ //g)" ts-node tracetest.ts\n\n\nSuccessful: 1\nFailed: 0\n\n[\u2714\ufe0f Serverless: Import Pokemon] #21 - https://app.tracetest.io/organizations/<YOUR_ORG>/environments/<YOUR_ENV>/test/ZV1G3v2IR/run/21\n'})}),"\n",(0,s.jsx)(t.h3,{id:"tracetest-app-results",children:"Tracetest App Results"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Tracetest App Results",src:n(20281).A+"",width:"2560",height:"1600"})}),"\n",(0,s.jsxs)(t.p,{children:["To run the tests without deploying the serverless stack, you can use the ",(0,s.jsx)(t.code,{children:"npm test"})," command."]}),"\n",(0,s.jsx)(t.h3,{id:"running-the-example",children:"Running the example"}),"\n",(0,s.jsx)(t.p,{children:"Spin up the deployment and test execution."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",metastring:"title=Terminal",children:"npm start\n"})}),"\n",(0,s.jsxs)(t.p,{children:["This will trigger the serverless deploy command and immediately run the ",(0,s.jsx)(t.a,{href:"/tools-and-integrations/typescript",children:"trace-based tests using the Tracetest Typescript integration"})," after completion."]}),"\n",(0,s.jsx)(t.h2,{id:"learn-more",children:"Learn More"}),"\n",(0,s.jsxs)(t.p,{children:["Feel free to check out our ",(0,s.jsx)(t.a,{href:"https://github.com/kubeshop/tracetest/tree/main/examples",children:"examples in GitHub"})," and join our ",(0,s.jsx)(t.a,{href:"https://dub.sh/tracetest-community",children:"Slack Community"})," for more info!"]})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},20281:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/serverless-results-1bb958f71a84b326b6ff01053313ddec.png"},28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>o});var s=n(96540);const r={},a=s.createContext(r);function i(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);