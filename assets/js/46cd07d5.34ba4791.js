"use strict";(self.webpackChunktracetest_docs=self.webpackChunktracetest_docs||[]).push([[2470],{99051:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var n=t(74848),a=t(28453);const r={id:"create-assertions",title:"Create Assertions",description:"Get started with creating test specs and assertions based on traces. Tracetest allows you to quickly build integration and end-to-end tests, powered by your OpenTelemetry traces.",hide_table_of_contents:!1,keywords:["tracetest","trace-based testing","observability","distributed tracing","testing"],image:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1698686403/docs/Blog_Thumbnail_14_rsvkmo.jpg"},i=void 0,o={id:"getting-started/create-assertions",title:"Create Assertions",description:"Get started with creating test specs and assertions based on traces. Tracetest allows you to quickly build integration and end-to-end tests, powered by your OpenTelemetry traces.",source:"@site/docs/getting-started/create-assertions.mdx",sourceDirName:"getting-started",slug:"/getting-started/create-assertions",permalink:"/getting-started/create-assertions",draft:!1,unlisted:!1,editUrl:"https://github.com/kubeshop/tracetest/blob/main/docs/docs/getting-started/create-assertions.mdx",tags:[],version:"current",frontMatter:{id:"create-assertions",title:"Create Assertions",description:"Get started with creating test specs and assertions based on traces. Tracetest allows you to quickly build integration and end-to-end tests, powered by your OpenTelemetry traces.",hide_table_of_contents:!1,keywords:["tracetest","trace-based testing","observability","distributed tracing","testing"],image:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1698686403/docs/Blog_Thumbnail_14_rsvkmo.jpg"},sidebar:"tutorialSidebar",previous:{title:"Create a Trace-based Test",permalink:"/getting-started/create-trace-based-test"},next:{title:"Automate Test Runs",permalink:"/getting-started/automate-test-runs"}},l={},d=[{value:"Selector",id:"selector",level:2},{value:"Assertions",id:"assertions",level:2},{value:"Create Assertions in Two Ways",id:"create-assertions-in-two-ways",level:2},{value:"Create Assertions Programatically in YAML",id:"create-assertions-programatically-in-yaml",level:2},{value:"The Assertions You Defined",id:"the-assertions-you-defined",level:3},{value:"Create Assertions Visually with the Web UI",id:"create-assertions-visually-with-the-web-ui",level:2},{value:"Why Tracetest Assertions are Powerful",id:"why-tracetest-assertions-are-powerful",level:2},{value:"How Do Selectors Work?",id:"how-do-selectors-work",level:2},{value:"How Do Assertions Work?",id:"how-do-assertions-work",level:2},{value:"How Do Expressions Work?",id:"how-do-expressions-work",level:2},{value:"General Span Attributes",id:"general-span-attributes",level:3},{value:"Filters",id:"filters",level:3},{value:"String Interpolation",id:"string-interpolation",level:3}];function c(e){const s={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.p,{children:"Now you know how to generate a trace for every test. This page explains how to create assertions by using real trace data from your distributed trace spans. Assertions are the most crucial part of a test. They allow you to validate that your system behaves as expected."}),"\n",(0,n.jsx)(s.p,{children:"An assertion consists of:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:"Selector"}),"\n",(0,n.jsx)(s.li,{children:"List of assertions"}),"\n",(0,n.jsx)(s.li,{children:"Name (Optional)"}),"\n"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-yaml",children:'- selector: span[tracetest.span.type="http" name="POST /pokemon/import" http.method="POST"]\n    name: POST /pokemon/import was called successfuly\n    assertions:\n    - attr:http.status_code  =  200\n    - attr:http.response.body | json_path \'$.id\' = "143"\n'})}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.img,{src:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1727255867/docs/app.tracetest.io_organizations_ttorg_e66318ba6544b856_environments_ttenv_ed85b0979257d37b_test_UNLBkLgHR_run_5_trace_1_lnyulp.png",alt:"create assertions 1"})}),"\n",(0,n.jsx)(s.h2,{id:"selector",children:"Selector"}),"\n",(0,n.jsx)(s.p,{children:"The selector defines against which spans assertions will be executed. Selectors can match any number of spans\u2014zero, one, twenty, or an unknown number."}),"\n",(0,n.jsx)(s.h2,{id:"assertions",children:"Assertions"}),"\n",(0,n.jsx)(s.p,{children:"Assertions are the validations you define. Here are some examples:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:"Verify that the HTTP response code of the trigger was 200."}),"\n",(0,n.jsx)(s.li,{children:"Parse the response JSON and confirm that the returned object has a non-empty ID field."}),"\n",(0,n.jsx)(s.li,{children:"Use JSON path on the response body to get specific fields, validate list length, perform regex matches, etc."}),"\n",(0,n.jsx)(s.li,{children:"Check response times."}),"\n"]}),"\n",(0,n.jsx)(s.p,{children:"The biggest value comes from analysing the trace itself. For instance:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:"Ensure that any database query took less than 100ms."}),"\n",(0,n.jsx)(s.li,{children:"Verify if a specific service was called, and even validate how many times it was invoked."}),"\n",(0,n.jsx)(s.li,{children:"Examine spans generated by an asynchronous process after the request passes through a message queue like Kafka, RabbitMQ, etc."}),"\n",(0,n.jsx)(s.li,{children:"Validate external asynchronous HTTP requests."}),"\n"]}),"\n",(0,n.jsx)(s.h2,{id:"create-assertions-in-two-ways",children:"Create Assertions in Two Ways"}),"\n",(0,n.jsxs)(s.ol,{children:["\n",(0,n.jsx)(s.li,{children:"Programmatically, in YAML"}),"\n",(0,n.jsx)(s.li,{children:"Visually, in the Web UI"}),"\n"]}),"\n",(0,n.jsx)(s.h2,{id:"create-assertions-programatically-in-yaml",children:"Create Assertions Programatically in YAML"}),"\n",(0,n.jsxs)(s.p,{children:["Taking the test you ran in the previous section, you can add assertions with a ",(0,n.jsx)(s.code,{children:"specs"})," block."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-yaml",children:'type: Test\nspec:\n  name: Import a Pokemon using API and MQ Worker\n  description: Import a Pokemon\n  # Define the trigger\n  trigger:\n    type: http\n    httpRequest:\n      method: POST\n      # Define the app endpoint\n      url: ${var:POKESHOP_API_URL}/pokemon/import\n      body: |\n        {\n          "id": 143\n        }\n      headers:\n      - key: Content-Type\n        value: application/json\n  \n  # Define the assertions to be applied against the resulting trace\n  specs:\n  - selector: span[tracetest.span.type="http" name="POST /pokemon/import" http.method="POST"]\n    name: POST /pokemon/import was called successfuly\n    assertions:\n    - attr:http.status_code  =  200\n    - attr:http.response.body | json_path \'$.id\' = "143"\n  \n  - selector: span[tracetest.span.type="general" name="validate request"]\n    name: The request was validated correctly\n    assertions:\n    - attr:validation.is_valid = "true"\n  \n  - selector: span[tracetest.span.type="messaging" name="queue.synchronizePokemon publish"]\n    name: A message was enqueued to the worker\n    assertions:\n    - attr:messaging.payload | json_path \'$.id\' = "143"\n  \n  - selector: span[tracetest.span.type="messaging" name="queue.synchronizePokemon process"]\n    name: A message was read by the worker\n    assertions:\n    - attr:messaging.payload | json_path \'$.fields.routingKey\' = "queue.synchronizePokemon"\n  \n  - selector: span[tracetest.span.type="general" name="import pokemon"]\n    name: A "import pokemon" action was triggered\n    assertions:\n    - attr:tracetest.selected_spans.count >= 1\n\n  - selector: span[tracetest.span.type="database"]\n    name: All Database Spans Processing time is less than 500ms\n    assertions:\n    - attr:tracetest.span.duration < 500ms\n  \n  - selector: span[tracetest.span.type="database" name="create pokeshop.pokemon"]\n    name: Validate exactly 1 database create operation was executed\n    assertions:\n    - attr:db.operation = "create"\n    - attr:tracetest.selected_spans.count = 1\n\n  - selector: span[tracetest.span.type="database" name="get pokemon_143"]\n    name: Validate the cache was not hit.\n    assertions:\n    - attr:cache.hit = "false"\n\n  - selector: span[tracetest.span.type="database" name="delete pokeshop.pokemon"]\n    name: Validate that no database DELETE operation was made\n    assertions:\n    - attr:tracetest.selected_spans.count = 0\n'})}),"\n",(0,n.jsx)(s.h3,{id:"the-assertions-you-defined",children:"The Assertions You Defined"}),"\n",(0,n.jsxs)(s.ol,{children:["\n",(0,n.jsx)(s.li,{children:"Validating the response of the HTTP request by validating both the response status code and the response body."}),"\n",(0,n.jsxs)(s.li,{children:["Validate the attribute ",(0,n.jsx)(s.code,{children:"is_valid"})," is set to ",(0,n.jsx)(s.code,{children:"true"})," in a custom span called ",(0,n.jsx)(s.code,{children:"validate request"}),"."]}),"\n",(0,n.jsxs)(s.li,{children:["Validate a ",(0,n.jsx)(s.strong,{children:"message"})," with an ",(0,n.jsx)(s.code,{children:"id"})," of ",(0,n.jsx)(s.code,{children:"143"})," was ",(0,n.jsx)(s.strong,{children:"added to a message queue"}),"."]}),"\n",(0,n.jsxs)(s.li,{children:["Validate a ",(0,n.jsx)(s.strong,{children:"message"})," with a ",(0,n.jsx)(s.code,{children:"routingKey"})," of ",(0,n.jsx)(s.code,{children:"queue.synchronizePokemon"})," was ",(0,n.jsx)(s.strong,{children:"read by a message queue"}),"."]}),"\n",(0,n.jsxs)(s.li,{children:["Validate a span called ",(0,n.jsx)(s.code,{children:"import pokemon"})," exists - ",(0,n.jsx)(s.strong,{children:"Validate an action happened"}),"."]}),"\n",(0,n.jsxs)(s.li,{children:["Validate that ",(0,n.jsx)(s.strong,{children:"all the involved database operations"})," took less than ",(0,n.jsx)(s.code,{children:"500ms"}),"."]}),"\n",(0,n.jsxs)(s.li,{children:["Validate that there was exactly one database ",(0,n.jsx)(s.code,{children:"create"})," operation, that the cache was not hit, and that there were zero ",(0,n.jsx)(s.code,{children:"delete"})," operations."]}),"\n"]}),"\n",(0,n.jsx)(s.h2,{id:"create-assertions-visually-with-the-web-ui",children:"Create Assertions Visually with the Web UI"}),"\n",(0,n.jsxs)(s.p,{children:["Add assertions quickly by using the assertion snippets, or selecting a span attribute and clicking ",(0,n.jsx)(s.code,{children:"Create test spec"}),"."]}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.img,{src:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1727259954/docs/Screenshot_2024-09-25_at_12.25.37_g2nwhw.png",alt:"add assertion visually 1"})}),"\n",(0,n.jsx)(s.p,{children:"This opens the assertions engine."}),"\n",(0,n.jsxs)(s.ol,{children:["\n",(0,n.jsx)(s.li,{children:"Validating the response of the HTTP request by validating both the response status code and the response body."}),"\n"]}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.img,{src:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1727255867/docs/app.tracetest.io_organizations_ttorg_e66318ba6544b856_environments_ttenv_ed85b0979257d37b_test_UNLBkLgHR_run_5_trace_1_lnyulp.png",alt:"add assertions visuall 2"})}),"\n",(0,n.jsxs)(s.ol,{start:"2",children:["\n",(0,n.jsxs)(s.li,{children:["Validate the attribute ",(0,n.jsx)(s.code,{children:"is_valid"})," is set to ",(0,n.jsx)(s.code,{children:"true"})," in a custom span called ",(0,n.jsx)(s.code,{children:"validate request"}),"."]}),"\n"]}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.img,{src:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1727260254/docs/app.tracetest.io_organizations_ttorg_e66318ba6544b856_environments_ttenv_ed85b0979257d37b_test_fVPPePgHR_run_3_test_selectedSpan_91e7ec4663f2ce43_rewmb7.png",alt:"add assertions visually 3"})}),"\n",(0,n.jsxs)(s.ol,{start:"3",children:["\n",(0,n.jsxs)(s.li,{children:["Validate a ",(0,n.jsx)(s.strong,{children:"message"})," with an ",(0,n.jsx)(s.code,{children:"id"})," of ",(0,n.jsx)(s.code,{children:"143"})," was ",(0,n.jsx)(s.strong,{children:"added to a message queue"}),"."]}),"\n"]}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.img,{src:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1727260595/docs/app.tracetest.io_organizations_ttorg_e66318ba6544b856_environments_ttenv_ed85b0979257d37b_test_fVPPePgHR_run_3_test_selectedSpan_91e7ec4663f2ce43_1_pleufw.png",alt:"add assertions visually 4"})}),"\n",(0,n.jsxs)(s.ol,{start:"4",children:["\n",(0,n.jsxs)(s.li,{children:["Validate a ",(0,n.jsx)(s.strong,{children:"message"})," with a ",(0,n.jsx)(s.code,{children:"routingKey"})," of ",(0,n.jsx)(s.code,{children:"queue.synchronizePokemon"})," was ",(0,n.jsx)(s.strong,{children:"read by a message queue"}),"."]}),"\n"]}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.img,{src:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1727260916/docs/app.tracetest.io_organizations_ttorg_e66318ba6544b856_environments_ttenv_ed85b0979257d37b_test_fVPPePgHR_run_3_test_selectedSpan_91e7ec4663f2ce43_4_fz87wo.png",alt:"add assertions visually 5"})}),"\n",(0,n.jsxs)(s.ol,{start:"5",children:["\n",(0,n.jsxs)(s.li,{children:["Validate a span called ",(0,n.jsx)(s.code,{children:"import pokemon"})," exists - ",(0,n.jsx)(s.strong,{children:"Validate an action happened"}),"."]}),"\n"]}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.img,{src:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1727260917/docs/app.tracetest.io_organizations_ttorg_e66318ba6544b856_environments_ttenv_ed85b0979257d37b_test_fVPPePgHR_run_3_test_selectedSpan_91e7ec4663f2ce43_5_gvf5u5.png",alt:"add assertions visually 6"})}),"\n",(0,n.jsxs)(s.ol,{start:"6",children:["\n",(0,n.jsxs)(s.li,{children:["Validate that ",(0,n.jsx)(s.strong,{children:"all the involved database operations"})," took less than ",(0,n.jsx)(s.code,{children:"500ms"}),"."]}),"\n"]}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.img,{src:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1727260917/docs/app.tracetest.io_organizations_ttorg_e66318ba6544b856_environments_ttenv_ed85b0979257d37b_test_fVPPePgHR_run_3_test_selectedSpan_91e7ec4663f2ce43_6_cv7v8y.png",alt:"add assertions visually 7"})}),"\n",(0,n.jsxs)(s.ol,{start:"7",children:["\n",(0,n.jsxs)(s.li,{children:["Validate that there was exactly one database ",(0,n.jsx)(s.code,{children:"create"})," operation, that the cache was not hit, and that there were zero ",(0,n.jsx)(s.code,{children:"delete"})," operations."]}),"\n"]}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.img,{src:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1727260918/docs/app.tracetest.io_organizations_ttorg_e66318ba6544b856_environments_ttenv_ed85b0979257d37b_test_fVPPePgHR_run_3_test_selectedSpan_91e7ec4663f2ce43_7_hbi4xl.png",alt:"add assertions visually 8"})}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.img,{src:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1727260918/docs/app.tracetest.io_organizations_ttorg_e66318ba6544b856_environments_ttenv_ed85b0979257d37b_test_fVPPePgHR_run_3_test_selectedSpan_91e7ec4663f2ce43_8_s46uzd.png",alt:"add assertions visually 9"})}),"\n",(0,n.jsx)(s.h2,{id:"why-tracetest-assertions-are-powerful",children:"Why Tracetest Assertions are Powerful"}),"\n",(0,n.jsxs)(s.ol,{children:["\n",(0,n.jsxs)(s.li,{children:["You wrote ",(0,n.jsx)(s.strong,{children:"ZERO"})," lines of programming code. It's all defined in YAML."]}),"\n",(0,n.jsx)(s.li,{children:"You can save them as part of your GitHub repo because it's defined in YAML."}),"\n",(0,n.jsxs)(s.li,{children:["Tracetest has ",(0,n.jsx)(s.strong,{children:"NO"})," access to your database, logs, or any other confidential infrastructure information. Assertions only validate the distributed traces your apps export."]}),"\n",(0,n.jsxs)(s.li,{children:["Tracetest ",(0,n.jsx)(s.strong,{children:"DOES NOT"})," care about how many services were called internally, or which languages your services are written in, or what database you're using. Tracetest ",(0,n.jsx)(s.strong,{children:"only cares about the distributed trace data"})," you expose to use as assertions."]}),"\n",(0,n.jsxs)(s.li,{children:["Tracetest can validate that things that ",(0,n.jsx)(s.strong,{children:"DID"})," or ",(0,n.jsx)(s.strong,{children:"DID NOT"})," happen, with just 3 lines of YAML!"]}),"\n"]}),"\n",(0,n.jsx)(s.h2,{id:"how-do-selectors-work",children:"How Do Selectors Work?"}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.strong,{children:"Selectors"})," works in a similar way as CSS selectors. You can select spans by matching their attributes. Attributes can be generic, like span type, duration, or be defined by your apps."]}),"\n",(0,n.jsx)(s.p,{children:"Here are some examples:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-yaml",children:'# all database spans\n- selector: span[tracetest.span.type="database"]\n\n# all http serving spans\n- selector: span[tracetest.span.type="http"]\n\n# all spans that have the custom defined attribute of myapp.user_id\n- selector: span[myapp.user_id="123"]\n\n# all spans that have the custom defined attribute of myapp.user_id that are database operations\n- selector: span[tracetest.span.type="database" myapp.user_id="123"]\n\n# all spans that have the custom defined attribute of myapp.user_id that are database operations that are children of the user service\n- selector: span[service.name="myapp-user-service"] span[tracetest.span.type="database" myapp.user_id="123"]\n'})}),"\n",(0,n.jsxs)(s.p,{children:["Check the full ",(0,n.jsx)(s.a,{href:"/concepts/selectors",children:"selector docs, here"}),"."]}),"\n",(0,n.jsx)(s.h2,{id:"how-do-assertions-work",children:"How Do Assertions Work?"}),"\n",(0,n.jsx)(s.p,{children:"Assertions are the checks you can apply to the values of all the spans matched by the related selector."}),"\n",(0,n.jsx)(s.p,{children:"Here are some examples:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-yaml",children:'# validate that all spans from myapp-user-service have a non empty user_id attribute\n- selector: span[service.name="myapp-user-service"]\n  assertions:\n  - attr:myapp.user_id != ""\n\n- selector: span[tracetest.span.type="http" name="GET /pokemon?take=10&skip=0" http.method="GET"]\n  assertions:\n  - attr:http.status_code = 200\n  - attr:tracetest.response.body | json_path \'$.items\' | length <= 10\n'})}),"\n",(0,n.jsxs)(s.p,{children:["Check the full ",(0,n.jsx)(s.a,{href:"/concepts/assertions",children:"assertions docs, here"}),"."]}),"\n",(0,n.jsx)(s.h2,{id:"how-do-expressions-work",children:"How Do Expressions Work?"}),"\n",(0,n.jsx)(s.p,{children:"Tracetest allows you to add expressions when writing test specs."}),"\n",(0,n.jsx)(s.h3,{id:"general-span-attributes",children:"General Span Attributes"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.code,{children:"tracetes.span.duration"})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.code,{children:"tracetest.response.body"})}),"\n",(0,n.jsx)(s.li,{children:"and more."}),"\n"]}),"\n",(0,n.jsx)(s.h3,{id:"filters",children:"Filters"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.code,{children:"json_path"})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.code,{children:"lenght"})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.code,{children:"regex"})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.code,{children:"get_index"})}),"\n",(0,n.jsx)(s.li,{children:"and more."}),"\n"]}),"\n",(0,n.jsx)(s.h3,{id:"string-interpolation",children:"String Interpolation"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.code,{children:"${}"})}),"\n"]}),"\n",(0,n.jsxs)(s.p,{children:["Check the full ",(0,n.jsx)(s.a,{href:"/concepts/expressions",children:"expressions docs, here"}),"."]}),"\n",(0,n.jsx)(s.admonition,{title:"Don't have OpenTelemetry installed?",type:"tip",children:(0,n.jsx)(s.p,{children:(0,n.jsx)(s.a,{href:"/getting-started/no-otel",children:"Follow these instructions to install OpenTelemetry in 5 minutes without any code changes!"})})})]})}function h(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},28453:(e,s,t)=>{t.d(s,{R:()=>i,x:()=>o});var n=t(96540);const a={},r=n.createContext(a);function i(e){const s=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),n.createElement(r.Provider,{value:s},e.children)}}}]);