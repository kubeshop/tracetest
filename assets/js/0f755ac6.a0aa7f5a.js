"use strict";(self.webpackChunktracetest_docs=self.webpackChunktracetest_docs||[]).push([[136],{48667:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>a,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var s=r(74848),n=r(28453);const o={id:"running-tracetest-with-new-relic",title:"OpenTelemetry Demo and New Relic",description:"Quick start how to configure the OpenTelemetry Demo to use Tracetest for enhancing your E2E and integration tests with trace-based testing with New Relic as a trace data store.",hide_table_of_contents:!1,keywords:["tracetest","trace-based testing","observability","distributed tracing","testing"],image:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1698686403/docs/Blog_Thumbnail_14_rsvkmo.jpg"},c=void 0,i={id:"examples-tutorials/recipes/running-tracetest-with-new-relic",title:"OpenTelemetry Demo and New Relic",description:"Quick start how to configure the OpenTelemetry Demo to use Tracetest for enhancing your E2E and integration tests with trace-based testing with New Relic as a trace data store.",source:"@site/docs/examples-tutorials/recipes/running-tracetest-with-new-relic.mdx",sourceDirName:"examples-tutorials/recipes",slug:"/examples-tutorials/recipes/running-tracetest-with-new-relic",permalink:"/examples-tutorials/recipes/running-tracetest-with-new-relic",draft:!1,unlisted:!1,editUrl:"https://github.com/kubeshop/tracetest/blob/main/docs/docs/examples-tutorials/recipes/running-tracetest-with-new-relic.mdx",tags:[],version:"current",frontMatter:{id:"running-tracetest-with-new-relic",title:"OpenTelemetry Demo and New Relic",description:"Quick start how to configure the OpenTelemetry Demo to use Tracetest for enhancing your E2E and integration tests with trace-based testing with New Relic as a trace data store.",hide_table_of_contents:!1,keywords:["tracetest","trace-based testing","observability","distributed tracing","testing"],image:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1698686403/docs/Blog_Thumbnail_14_rsvkmo.jpg"},sidebar:"guidesSidebar",previous:{title:"OpenTelemetry Demo and Lightstep",permalink:"/examples-tutorials/recipes/running-tracetest-with-lightstep"},next:{title:"OpenTelemetry Demo and Dash0",permalink:"/examples-tutorials/recipes/running-tracetest-with-dash0"}},a={},l=[{value:"OpenTelemetry Demo <code>v0.3.4-alpha</code> with New Relic, OpenTelemetry and Tracetest",id:"opentelemetry-demo-v034-alpha-with-new-relic-opentelemetry-and-tracetest",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Run This Quckstart Example",id:"run-this-quckstart-example",level:2},{value:"Project Structure",id:"project-structure",level:2},{value:"1. OpenTelemetry Demo",id:"1-opentelemetry-demo",level:3},{value:"Docker Compose Network",id:"docker-compose-network",level:3},{value:"OpenTelemetry Demo",id:"opentelemetry-demo",level:2},{value:"Running the Tests",id:"running-the-tests",level:2},{value:"The Test File",id:"the-test-file",level:3},{value:"View Trace Spans Over Time in New Relic",id:"view-trace-spans-over-time-in-new-relic",level:2},{value:"Learn More",id:"learn-more",level:2}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.admonition,{type:"note",children:(0,s.jsx)(t.p,{children:(0,s.jsx)(t.a,{href:"https://github.com/kubeshop/tracetest/tree/main/examples/tracetest-new-relic",children:"Check out the source code on GitHub here."})})}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"https://tracetest.io/",children:"Tracetest"})," is a testing tool based on ",(0,s.jsx)(t.a,{href:"https://opentelemetry.io/",children:"OpenTelemetry"})," that allows you to test your distributed application. It allows you to use data from distributed traces generated by OpenTelemetry to validate and assert if your application has the desired behavior defined by your test definitions."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"https://newrelic.com/",children:"New Relic"})," is an observability platform that helps you build better software. You can bring in data from any digital source so that you can fully understand your system, analyze that data efficiently and respond to incidents before they become problems."]}),"\n",(0,s.jsxs)(t.h2,{id:"opentelemetry-demo-v034-alpha-with-new-relic-opentelemetry-and-tracetest",children:["OpenTelemetry Demo ",(0,s.jsx)(t.code,{children:"v0.3.4-alpha"})," with New Relic, OpenTelemetry and Tracetest"]}),"\n",(0,s.jsxs)(t.p,{children:["This is a simple sample app on how to configure the ",(0,s.jsxs)(t.a,{href:"https://github.com/open-telemetry/opentelemetry-demo",children:["OpenTelemetry Demo ",(0,s.jsx)(t.code,{children:"v0.3.4-alpha"})]})," to use ",(0,s.jsx)(t.a,{href:"https://tracetest.io/",children:"Tracetest"})," for enhancing your E2E and integration tests with trace-based testing and ",(0,s.jsx)(t.a,{href:"https://newrelic.com/",children:"New Relic"})," as a trace data store."]}),"\n",(0,s.jsx)(t.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Tracetest Account"}),":"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Sign up to ",(0,s.jsx)(t.a,{href:"https://app.tracetest.io",children:(0,s.jsx)(t.code,{children:"app.tracetest.io"})})," or follow the ",(0,s.jsx)(t.a,{href:"/getting-started/overview",children:"get started"})," docs."]}),"\n",(0,s.jsxs)(t.li,{children:["Have access to the environment's ",(0,s.jsx)(t.a,{href:"https://app.tracetest.io/retrieve-token",children:"agent API key"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Docker"}),": Have ",(0,s.jsx)(t.a,{href:"https://docs.docker.com/get-docker/",children:"Docker"})," and ",(0,s.jsx)(t.a,{href:"https://docs.docker.com/compose/install/",children:"Docker Compose"})," installed on your machine."]}),"\n",(0,s.jsx)(t.h2,{id:"run-this-quckstart-example",children:"Run This Quckstart Example"}),"\n",(0,s.jsx)(t.p,{children:"The example below is provided as part of the Tracetest project. You can download and run the example by following these steps:"}),"\n",(0,s.jsx)(t.p,{children:"Clone the Tracetest project and go to the example folder:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"git clone https://github.com/kubeshop/tracetest\ncd tracetest/examples/tracetest-new-relic\n"})}),"\n",(0,s.jsx)(t.p,{children:"Follow these instructions to run the quick start:"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:["Copy the ",(0,s.jsx)(t.code,{children:".env.template"})," file to ",(0,s.jsx)(t.code,{children:".env"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:["Fill out the ",(0,s.jsx)(t.a,{href:"https://app.tracetest.io/retrieve-token",children:"TRACETEST_TOKEN and ENVIRONMENT_ID"})," details by editing your ",(0,s.jsx)(t.code,{children:".env"})," file."]}),"\n",(0,s.jsxs)(t.li,{children:["Fill out the ",(0,s.jsx)(t.a,{href:"https://docs.newrelic.com/docs/more-integrations/open-source-telemetry-integrations/opentelemetry/opentelemetry-setup/#collector-export",children:"NEW_RELIC_INGEST_LICENSE"})," details by editing your ",(0,s.jsx)(t.code,{children:".env"})," file."]}),"\n",(0,s.jsxs)(t.li,{children:["Run ",(0,s.jsx)(t.code,{children:"docker compose run tracetest-run"}),"."]}),"\n",(0,s.jsx)(t.li,{children:"Follow the links in the output to view the test results."}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"Follow the sections below for a detailed breakdown of what the example you just ran did and how it works."}),"\n",(0,s.jsx)(t.h2,{id:"project-structure",children:"Project Structure"}),"\n",(0,s.jsxs)(t.p,{children:["The project is built with Docker Compose. It contains two distinct ",(0,s.jsx)(t.code,{children:"docker-compose.yaml"})," files."]}),"\n",(0,s.jsx)(t.h3,{id:"1-opentelemetry-demo",children:"1. OpenTelemetry Demo"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"docker-compose.yaml"})," file and ",(0,s.jsx)(t.code,{children:".env"})," file in the root directory are for the OpenTelemetry Demo."]}),"\n",(0,s.jsx)(t.h3,{id:"docker-compose-network",children:"Docker Compose Network"}),"\n",(0,s.jsxs)(t.p,{children:["All ",(0,s.jsx)(t.code,{children:"services"})," in the ",(0,s.jsx)(t.code,{children:"docker-compose.yaml"})," are on the same network and will be reachable by hostname from within other services. E.g. ",(0,s.jsx)(t.code,{children:"tracetest-agent:4317"})," in the ",(0,s.jsx)(t.code,{children:"collector.config.yaml"})," will map to the ",(0,s.jsx)(t.code,{children:"tracetest-agent"})," service, where the port ",(0,s.jsx)(t.code,{children:"4317"})," is the port where Tracetest Agent accepts traces."]}),"\n",(0,s.jsx)(t.h2,{id:"opentelemetry-demo",children:"OpenTelemetry Demo"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.a,{href:"https://github.com/open-telemetry/opentelemetry-demo",children:"OpenDelemetry Demo"})," is a sample microservice-based app with the purpose to demo how to correctly set up OpenTelemetry distributed tracing."]}),"\n",(0,s.jsxs)(t.p,{children:["Read more about the OpenTelemetry Demo ",(0,s.jsx)(t.a,{href:"https://opentelemetry.io/blog/2022/announcing-opentelemetry-demo-release/",children:"here"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"docker-compose.yaml"})," contains 12 services."]}),"\n",(0,s.jsx)(t.p,{children:"To start the OpenTelemetry Demo by itself, run this command:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"docker compose build # optional if you haven't already built the images\ndocker compose up\n"})}),"\n",(0,s.jsxs)(t.p,{children:["This will start the OpenTelemetry Demo. Open up ",(0,s.jsx)(t.code,{children:"http://localhost:8084"})," to make sure it's working. But, you're not sending the traces anywhere."]}),"\n",(0,s.jsx)(t.p,{children:"Let's fix this by configuring Tracetest and OpenTelemetry Collector to forward trace data to both New Relic and Tracetest."}),"\n",(0,s.jsx)(t.p,{children:"Here's how to configure the OpenTelemetry Collector."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:"# collector.config.yaml\nreceivers:\n  otlp:\n    protocols:\n      grpc:\n      http:\n\nprocessors:\n  batch:\n    timeout: 100ms\n\nexporters:\n  # OTLP for Tracetest\n  otlp/tracetest:\n    endpoint: tracetest-agent:4317 # Send traces to Tracetest. Read more in docs here:  https://docs.tracetest.io/configuration/connecting-to-data-stores/opentelemetry-collector\n    tls:\n      insecure: true\n  # OTLP for New Relic\n  otlp/newrelic:\n    endpoint: otlp.nr-data.net:443\n    headers:\n      api-key: ${NEW_RELIC_INGEST_LICENSE} # Send traces to New Relic.\n      # Read more in docs here: https://docs.newrelic.com/docs/more-integrations/open-source-telemetry-integrations/opentelemetry/opentelemetry-setup/#collector-export\n      # And here: https://docs.newrelic.com/docs/more-integrations/open-source-telemetry-integrations/opentelemetry/collector/opentelemetry-collector-basic/\n\nservice:\n  pipelines:\n    traces/tracetest:\n      receivers: [otlp]\n      processors: [batch]\n      exporters: [otlp/tracetest]\n    traces/newrelic:\n      receivers: [otlp]\n      processors: [batch]\n      exporters: [otlp/newrelic]\n"})}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Important!"})," Take a closer look at the sampling configs in both the ",(0,s.jsx)(t.code,{children:"collector.config.yaml"}),". It has set sampling to 100%. This is crucial when running trace-based e2e and integration tests."]}),"\n",(0,s.jsx)(t.h2,{id:"running-the-tests",children:"Running the Tests"}),"\n",(0,s.jsx)(t.h3,{id:"the-test-file",children:"The Test File"}),"\n",(0,s.jsxs)(t.p,{children:["Check out the ",(0,s.jsx)(t.code,{children:"resources/test.yaml"})," file."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:'# resources/test.yaml\n\ntype: Test\nspec:\n  id: YJmFC7hVg\n  name: Otel - List Products\n  description: Otel - List Products\n  trigger:\n    type: http\n    httpRequest:\n      url: http://otel-frontend:8084/api/products\n      method: GET\n      headers:\n        - key: Content-Type\n          value: application/json\n  specs:\n    - selector:\n        span[tracetest.span.type="http" name="API HTTP GET" http.target="/api/products"\n        http.method="GET"]\n      assertions:\n        - attr:http.status_code   =   200\n        - attr:tracetest.span.duration  <  50ms\n    - selector: span[tracetest.span.type="rpc" name="grpc.hipstershop.ProductCatalogService/ListProducts"]\n      assertions:\n        - attr:rpc.grpc.status_code = 0\n    - selector:\n        span[tracetest.span.type="rpc" name="hipstershop.ProductCatalogService/ListProducts"\n        rpc.system="grpc" rpc.method="ListProducts" rpc.service="hipstershop.ProductCatalogService"]\n      assertions:\n        - attr:rpc.grpc.status_code = 0\n'})}),"\n",(0,s.jsx)(t.p,{children:"To run the test, run this command in the terminal:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"docker compose run tracetest-run\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Check out the ",(0,s.jsx)(t.code,{children:"test.yaml"})," file."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:'# resurces/test.yaml\ntype: Test\nspec:\n  id: YJmFC7hVg\n  name: Otel - List Products\n  description: Otel - List Products\n  trigger:\n    type: http\n    httpRequest:\n      url: http://otel-frontend:8084/api/products\n      method: GET\n      headers:\n        - key: Content-Type\n          value: application/json\n  specs:\n    - selector:\n        span[tracetest.span.type="http" name="API HTTP GET" http.target="/api/products"\n        http.method="GET"]\n      assertions:\n        - attr:http.status_code   =   200\n        - attr:tracetest.span.duration  <  50ms\n    - selector: span[tracetest.span.type="rpc" name="grpc.hipstershop.ProductCatalogService/ListProducts"]\n      assertions:\n        - attr:rpc.grpc.status_code = 0\n    - selector:\n        span[tracetest.span.type="rpc" name="hipstershop.ProductCatalogService/ListProducts"\n        rpc.system="grpc" rpc.method="ListProducts" rpc.service="hipstershop.ProductCatalogService"]\n      assertions:\n        - attr:rpc.grpc.status_code = 0\n'})}),"\n",(0,s.jsx)(t.p,{children:"This file defines the a test the same way you would through the Web UI."}),"\n",(0,s.jsx)(t.p,{children:"To run the test, run this command in the terminal:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"docker compose run tracetest-run\n"})}),"\n",(0,s.jsxs)(t.p,{children:["This test will fail just like the sample above due to the ",(0,s.jsx)(t.code,{children:"attr:tracetest.span.duration  <  50ms"})," assertion."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:'\u2718 Otel - List Products (http://localhost:11633/test/YJmFC7hVg/run/9/test)\n\t\u2718 span[tracetest.span.type="http" name="API HTTP GET" http.target="/api/products" http.method="GET"]\n\t\t\u2718 #cb68ccf586956db7\n\t\t\t\u2714 attr:http.status_code   =   200 (200)\n\t\t\t\u2718 attr:tracetest.span.duration  <  50ms (72ms) (http://localhost:11633/test/YJmFC7hVg/run/9/test?selectedAssertion=0&selectedSpan=cb68ccf586956db7)\n\t\u2714 span[tracetest.span.type="rpc" name="grpc.hipstershop.ProductCatalogService/ListProducts"]\n\t\t\u2714 #634f965d1b34c1fd\n\t\t\t\u2714 attr:rpc.grpc.status_code = 0 (0)\n\t\u2714 span[tracetest.span.type="rpc" name="hipstershop.ProductCatalogService/ListProducts" rpc.system="grpc" rpc.method="ListProducts" rpc.service="hipstershop.ProductCatalogService"]\n\t\t\u2714 #33a58e95448d8b22\n\t\t\t\u2714 attr:rpc.grpc.status_code = 0 (0)\n'})}),"\n",(0,s.jsx)(t.p,{children:"If you edit the duration as in the Web UI example above, the test will pass!"}),"\n",(0,s.jsx)(t.h2,{id:"view-trace-spans-over-time-in-new-relic",children:"View Trace Spans Over Time in New Relic"}),"\n",(0,s.jsx)(t.p,{children:"To access a historical overview of all the trace spans the OpenTelemetry Demo generates, jump over to your New Relic account."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{src:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1673009546/Blogposts/tracetest-new-relic-partnerships/screely-1673009541979_glib3l.png",alt:""})}),"\n",(0,s.jsx)(t.p,{children:"You can also drill down into a partucular trace as well."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{src:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1673010042/Blogposts/tracetest-new-relic-partnerships/screely-1673010038074_aodp7d.png",alt:""})}),"\n",(0,s.jsx)(t.p,{children:"With New Relic and Tracetest, you get the best of both worlds. You can run trace-based tests and automate running E2E and integration tests against real trace data. And, use New Relic to get a historical overview of all traces your distributed application generates."}),"\n",(0,s.jsx)(t.h2,{id:"learn-more",children:"Learn More"}),"\n",(0,s.jsxs)(t.p,{children:["Feel free to check out our ",(0,s.jsx)(t.a,{href:"https://github.com/kubeshop/tracetest/tree/main/examples",children:"examples in GitHub"})," and join our ",(0,s.jsx)(t.a,{href:"https://dub.sh/tracetest-community",children:"Slack Community"})," for more info!"]})]})}function p(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,t,r)=>{r.d(t,{R:()=>c,x:()=>i});var s=r(96540);const n={},o=s.createContext(n);function c(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:c(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);