"use strict";(self.webpackChunktracetest_docs=self.webpackChunktracetest_docs||[]).push([[6763],{78334:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>l});var s=n(74848),i=n(28453);const r={id:"synthetic-monitoring-trace-based-playwright-tests",title:"Synthetic Monitoring with Trace-based Playwright Tests",description:"Quickstart on how to create True End-To-End Trace-Based Tests with the Tracetest Playwright Engine Trigger and run them as Synthetic Monitors.",hide_table_of_contents:!1,keywords:["tracetest","trace-based testing","observability","distributed tracing","end-to-end testing","tracetest","playwright","trace-based-testing","synthetic monitoring","synthetic testing"],image:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1698686403/docs/Blog_Thumbnail_14_rsvkmo.jpg"},a=void 0,o={id:"examples-tutorials/recipes/synthetic-monitoring-trace-based-playwright-tests",title:"Synthetic Monitoring with Trace-based Playwright Tests",description:"Quickstart on how to create True End-To-End Trace-Based Tests with the Tracetest Playwright Engine Trigger and run them as Synthetic Monitors.",source:"@site/docs/examples-tutorials/recipes/synthetic-monitoring-trace-based-playwright-tests.mdx",sourceDirName:"examples-tutorials/recipes",slug:"/examples-tutorials/recipes/synthetic-monitoring-trace-based-playwright-tests",permalink:"/examples-tutorials/recipes/synthetic-monitoring-trace-based-playwright-tests",draft:!1,unlisted:!1,editUrl:"https://github.com/kubeshop/tracetest/blob/main/docs/docs/examples-tutorials/recipes/synthetic-monitoring-trace-based-playwright-tests.mdx",tags:[],version:"current",frontMatter:{id:"synthetic-monitoring-trace-based-playwright-tests",title:"Synthetic Monitoring with Trace-based Playwright Tests",description:"Quickstart on how to create True End-To-End Trace-Based Tests with the Tracetest Playwright Engine Trigger and run them as Synthetic Monitors.",hide_table_of_contents:!1,keywords:["tracetest","trace-based testing","observability","distributed tracing","end-to-end testing","tracetest","playwright","trace-based-testing","synthetic monitoring","synthetic testing"],image:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1698686403/docs/Blog_Thumbnail_14_rsvkmo.jpg"},sidebar:"guidesSidebar",previous:{title:"Synthetic Monitoring with Trace-based API Tests",permalink:"/examples-tutorials/recipes/synthetic-monitoring-trace-based-api-tests"},next:{title:"Testing Kafka in a Go API with OpenTelemetry and Tracetest",permalink:"/examples-tutorials/recipes/testing-kafka-go-api-with-opentelemetry-tracetest"}},c={},l=[{value:"Why is this important?",id:"why-is-this-important",level:2},{value:"Requirements",id:"requirements",level:2},{value:"Run This Example",id:"run-this-example",level:2},{value:"Project Structure",id:"project-structure",level:2},{value:"Provisioned Resources",id:"provisioned-resources",level:2},{value:"Import Pokemon Test",id:"import-pokemon-test",level:3},{value:"Playwright Synthetic Monitor",id:"playwright-synthetic-monitor",level:3},{value:"Playwright Script",id:"playwright-script",level:3},{value:"Jaeger Tracing Backend",id:"jaeger-tracing-backend",level:3},{value:"The Apply Script",id:"the-apply-script",level:3},{value:"Setting the Environment Variables",id:"setting-the-environment-variables",level:2},{value:"Running the Full Example",id:"running-the-full-example",level:2},{value:"Viewing the Created Resources",id:"viewing-the-created-resources",level:2},{value:"Running Synthetic Monitoring",id:"running-synthetic-monitoring",level:2},{value:"Learn More",id:"learn-more",level:2}];function h(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.admonition,{title:"Version Compatibility",type:"info",children:(0,s.jsxs)(t.p,{children:["The features described here are compatible with the ",(0,s.jsx)(t.a,{href:"https://github.com/kubeshop/tracetest/releases/tag/v1.4.1",children:"Tracetest CLI v1.4.1"})," and above."]})}),"\n",(0,s.jsx)(t.admonition,{type:"note",children:(0,s.jsx)(t.p,{children:(0,s.jsx)(t.a,{href:"https://github.com/kubeshop/tracetest/tree/main/examples/tracetest-synthetic-monitoring",children:"Check out the source code on GitHub here."})})}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"https://tracetest.io/",children:"Tracetest"})," is a synthetic monitoring and testing tool based on ",(0,s.jsx)(t.a,{href:"https://opentelemetry.io/",children:"OpenTelemetry"})," that allows you to test distributed apps. You can use data from distributed traces generated by OpenTelemetry to validate and assert the functionality of your apps."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"https://playwright.dev/",children:"Playwright"})," is an open-source automation framework developed by Microsoft that enables cross-browser automation for web applications. It provides a set of APIs and libraries for automating interactions with web browsers such as Chrome, Firefox, and Microsoft Edge."]}),"\n",(0,s.jsx)(t.h2,{id:"why-is-this-important",children:"Why is this important?"}),"\n",(0,s.jsx)(t.p,{children:"This recipe uses the Tracetest Playwright Engine trigger with Tracetest Monitors for synthetic monitoring."}),"\n",(0,s.jsx)(t.p,{children:"With these two working together you can combine the power of end-to-end tests with trace-based testing to easily capture a full distributed trace from your OpenTelemetry instrumented front-end and back-end system, but also run them on a schedule with enabled alerting when tests fail."}),"\n",(0,s.jsx)(t.p,{children:"Benefits of using traces as test specs alongside synthetic monitoring:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Get faster MTTR for failing performance tests"}),"\n",(0,s.jsx)(t.li,{children:"Assert against the Playwright test execution and the system under test"}),"\n",(0,s.jsx)(t.li,{children:"Validate functionality of other parts of your system that may be broken, even when end-to-end tests are passing"}),"\n",(0,s.jsx)(t.li,{children:"Create synthetic tests that run in defined intervals"}),"\n",(0,s.jsx)(t.li,{children:"Get alerted when synthetic tests fail via a Webhook"}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"requirements",children:"Requirements"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Tracetest Account"}),":"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Sign up to ",(0,s.jsx)(t.a,{href:"https://app.tracetest.io",children:(0,s.jsx)(t.code,{children:"app.tracetest.io"})})," or follow the ",(0,s.jsx)(t.a,{href:"/getting-started/overview",children:"get started"})," docs."]}),"\n",(0,s.jsxs)(t.li,{children:["Have access to the environment's ",(0,s.jsx)(t.a,{href:"https://app.tracetest.io/retrieve-token",children:"agent API key"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Docker"}),": Have ",(0,s.jsx)(t.a,{href:"https://docs.docker.com/get-docker/",children:"Docker"})," and ",(0,s.jsx)(t.a,{href:"https://docs.docker.com/compose/install/",children:"Docker Compose"})," installed on your machine."]}),"\n",(0,s.jsx)(t.h2,{id:"run-this-example",children:"Run This Example"}),"\n",(0,s.jsx)(t.admonition,{title:"View Playwright recipe",type:"info",children:(0,s.jsxs)(t.p,{children:["This recipe uses the ",(0,s.jsx)(t.a,{href:"/examples-tutorials/recipes/running-tests-with-tracetest-playwright-engine",children:"official Playwright Engine recipe"}),"."]})}),"\n",(0,s.jsx)(t.p,{children:"The example below is provided as part of the Tracetest GitHub repo. You can download and run the example by following these steps:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"git clone https://github.com/kubeshop/tracetest\ncd tracetest/examples/tracetest-synthetic-monitoring\n"})}),"\n",(0,s.jsx)(t.p,{children:"Follow these instructions to run the quick start:"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:["Copy the ",(0,s.jsx)(t.code,{children:".env.template"})," file to ",(0,s.jsx)(t.code,{children:".env"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:["Fill out the ",(0,s.jsx)(t.a,{href:"https://app.tracetest.io/retrieve-token",children:"TRACETEST_TOKEN and ENVIRONMENT_ID"})," details by editing your ",(0,s.jsx)(t.code,{children:".env"})," file."]}),"\n",(0,s.jsxs)(t.li,{children:["Run ",(0,s.jsx)(t.code,{children:"docker compose run tracetest-run"}),"."]}),"\n",(0,s.jsx)(t.li,{children:"Follow the links in the output to view the test results."}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"project-structure",children:"Project Structure"}),"\n",(0,s.jsx)(t.p,{children:"The project structure for running Tracetest Playwright Engine tests is as follows:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:".env.template\n.gitignore\n.Dockerfile\ncollector.config.yaml\ndocker-compose.yaml\n/resources\n  apply.sh\n  datastore.yaml\n  test.yaml\n  script.js\n  monitor.yaml\n"})}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.a,{href:"/live-examples/pokeshop/overview",children:"Pokeshop Demo App"})," is a complete example of a distributed application using different back-end and front-end services. We will be launching it and running tests against it as part of this example.\nThe ",(0,s.jsx)(t.code,{children:"docker-compose.yaml"})," file in the root directory of the quick start runs the Pokeshop Demo app, the OpenTelemetry Collector, Jaeger, and the ",(0,s.jsx)(t.a,{href:"/concepts/agent",children:"Tracetest Agent"})," setup."]}),"\n",(0,s.jsxs)(t.p,{children:["The Tracetest resource definitions and scripts are defined under the ",(0,s.jsx)(t.code,{children:"/resources"})," directory. The resources include tests and the tracing backend definition, while the scripts include the ",(0,s.jsx)(t.code,{children:"apply.sh"})," script to apply the resources."]}),"\n",(0,s.jsx)(t.h2,{id:"provisioned-resources",children:"Provisioned Resources"}),"\n",(0,s.jsx)(t.p,{children:"The example provisions the following resources:"}),"\n",(0,s.jsx)(t.h3,{id:"import-pokemon-test",children:"Import Pokemon Test"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",metastring:'title="resources/test.yaml"',children:'type: Test\nspec:\n  id: import-pokemon\n  name: Import Pokemon\n  trigger:\n    type: playwrightengine\n    playwrightEngine:\n      target: http://api:8081\n      script: ./script.js\n      method: importPokemon\n  specs:\n    - selector: span[tracetest.span.type="general" name="documentLoad"]\n      name: Document Load Should be fast\n      assertions:\n        - attr:tracetest.span.duration < 500ms\n    - selector: span[tracetest.span.type="http" http.scheme="http"]\n      name: All HTTP request should return 200\n      assertions:\n        - attr:http.status_code = 200\n    - selector: span[tracetest.span.type="messaging" name="queue.synchronizePokemon\n        process" messaging.system="rabbitmq"\n        messaging.destination="queue.synchronizePokemon"\n        messaging.operation="process"]\n      name: The worker should be processed\n      assertions:\n        - attr:tracetest.selected_spans.count = 1\n    - selector: span[tracetest.span.type="database"]\n      name: "All Database Spans: Processing time is less than 100ms"\n      assertions:\n        - attr:tracetest.span.duration  <  250ms\n'})}),"\n",(0,s.jsx)(t.h3,{id:"playwright-synthetic-monitor",children:"Playwright Synthetic Monitor"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",metastring:'title="resources/monitor.yaml"',children:'type: Monitor\nspec:\n  id: playwright-monitor\n  name: Playwright Synthetic Monitor\n  enabled: true\n  variableSetId: ""\n  tests:\n  - import-pokemon\n  schedule:\n    cron: "*/5 * * * *"\n    timeZone: Etc/UTC\n  alerts:\n  - id: slack-webhook-message\n    type: webhook\n    webhook:\n      body: "{\\n \\"text\\": \\"Monitor ${.Monitor.Name} has failed, follow the link to find the <${.URL}|results>\\"\\n}"\n      method: POST\n      url: <your-webhook-url>\n      headers:\n      - key: Content-Type\n        value: application/json\n    events:\n    - FAILED\n'})}),"\n",(0,s.jsx)(t.h3,{id:"playwright-script",children:"Playwright Script"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",metastring:'title="resources/script.js"',children:'const { expect } = require("@playwright/test");\n\nasync function importPokemon(page) {\n  expect(await page.getByText("Pokeshop")).toBeTruthy();\n\n  await page.click("text=Import");\n  await page.getByLabel("ID").fill("143");\n\n  await Promise.all([\n    page.waitForResponse((resp) => resp.url().includes("/pokemon/import") && resp.status() === 200),\n    page.getByRole("button", { name: "OK", exact: true }).click(),\n  ]);\n}\n\nmodule.exports = { importPokemon };\n'})}),"\n",(0,s.jsx)(t.h3,{id:"jaeger-tracing-backend",children:"Jaeger Tracing Backend"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",metastring:'title="resources/datastore.yaml"',children:'type: DataStore\nspec:\n  id: current\n  name: jaeger\n  type: jaeger\n  default: true\n  jaeger:\n    endpoint: jaeger:16685\n    headers:\n      "": ""\n    tls:\n      insecure: true\n'})}),"\n",(0,s.jsx)(t.h3,{id:"the-apply-script",children:"The Apply Script"}),"\n",(0,s.jsx)(t.p,{children:"The apply script configures and provisions the resources in the Tracetest environment:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",metastring:'title="resources/apply.sh"',children:'#!/bin/sh\n\nset -e\n\nTOKEN=$TRACETEST_API_KEY\nENVIRONMENT_ID=$TRACETEST_ENVIRONMENT_ID\n\napply() {\n  echo "Configuring Tracetest"\n  tracetest configure --token $TOKEN --environment $ENVIRONMENT_ID\n\n  echo "Applying Resources"\n  tracetest apply datastore -f /resources/datastore.yaml\n  tracetest apply test -f /resources/import-pokemon.yaml\n  tracetest apply monitor -f /resources/monitor.yaml\n  tracetest list monitor\n}\n\napply\n'})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",metastring:'title="resources/run.sh"',children:'#!/bin/sh\n\nset -e\n\nTOKEN=$TRACETEST_TOKEN\nENVIRONMENT_ID=$TRACETEST_ENVIRONMENT_ID\n\nrun() {\n  echo "Configuring Tracetest"\n  tracetest configure --token $TOKEN --environment $ENVIRONMENT_ID\n\n  echo "Running Trace-Based Tests..."\n  tracetest run test -f /resources/test.yaml\n  tracetest list monitor\n}\n\nrun\n'})}),"\n",(0,s.jsx)(t.h2,{id:"setting-the-environment-variables",children:"Setting the Environment Variables"}),"\n",(0,s.jsxs)(t.p,{children:["Copy the ",(0,s.jsx)(t.code,{children:".env.template"})," file to ",(0,s.jsx)(t.code,{children:".env"})," and add the Tracetest API token and environment id to the ",(0,s.jsx)(t.code,{children:"TRACETEST_TOKEN"})," and ",(0,s.jsx)(t.code,{children:"TRACETEST_ENVIRONMENT_ID"})," variables."]}),"\n",(0,s.jsx)(t.h2,{id:"running-the-full-example",children:"Running the Full Example"}),"\n",(0,s.jsx)(t.p,{children:"Creating the resources and running the tests is automated for you. You only need to run the following command:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"docker compose run tracetest-run\n"})}),"\n",(0,s.jsx)(t.h2,{id:"viewing-the-created-resources",children:"Viewing the Created Resources"}),"\n",(0,s.jsxs)(t.p,{children:["The output from the Tracetest resource run script should be visible in the console log after running the ",(0,s.jsx)(t.code,{children:"run"})," command."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",metastring:'title="Output"',children:"WARN[0000] /Users/oscar/Documents/kubeshop/t/examples/tracetest-synthetic-monitoring/docker-compose.yaml: `version` is obsolete\n[+] Running 2/2\n \u2714 api Pulled                                                                                                                                                                        0.8s\n \u2714 worker Pulled                                                                                                                                                                     1.1s\n[+] Creating 9/9\n \u2714 Container tracetest-synthetic-monitoring-playwright-engine-otel-collector-1   Running                                                                                             0.0s\n \u2714 Container tracetest-synthetic-monitoring-playwright-engine-queue-1            Running                                                                                             0.0s\n \u2714 Container tracetest-synthetic-monitoring-playwright-engine-postgres-1         Running                                                                                             0.0s\n \u2714 Container tracetest-synthetic-monitoring-playwright-engine-jaeger-1           Running                                                                                             0.0s\n \u2714 Container tracetest-synthetic-monitoring-playwright-engine-cache-1            Running                                                                                             0.0s\n \u2714 Container tracetest-synthetic-monitoring-playwright-engine-worker-1           Running                                                                                             0.0s\n \u2714 Container tracetest-synthetic-monitoring-playwright-engine-tracetest-agent-1  Recreated                                                                                           0.1s\n \u2714 Container tracetest-synthetic-monitoring-playwright-engine-api-1              Running                                                                                             0.0s\n \u2714 Container tracetest-synthetic-monitoring-playwright-engine-tracetest-apply-1  Recreated                                                                                           0.1s\n[+] Running 6/6\n \u2714 Container tracetest-synthetic-monitoring-playwright-engine-tracetest-agent-1  Started                                                                                             0.3s\n \u2714 Container tracetest-synthetic-monitoring-playwright-engine-queue-1            Healthy                                                                                             1.0s\n \u2714 Container tracetest-synthetic-monitoring-playwright-engine-postgres-1         Healthy                                                                                             1.0s\n \u2714 Container tracetest-synthetic-monitoring-playwright-engine-cache-1            Healthy                                                                                             1.0s\n \u2714 Container tracetest-synthetic-monitoring-playwright-engine-api-1              Healthy                                                                                             0.5s\n \u2714 Container tracetest-synthetic-monitoring-playwright-engine-tracetest-apply-1  Started                                                                                             0.1s\n[+] Running 2/2\n \u2714 worker Pulled                                                                                                                                                                     1.0s\n \u2714 api Pulled                                                                                                                                                                        0.9s\nConfiguring Tracetest\n SUCCESS  Successfully configured Tracetest CLI\nRunning Trace-Based Tests...\n\u2714 RunGroup: #2c3uThCSg (https://app.tracetest.io/organizations/ttorg_ced62e34638d965e/environments/ttenv_b42fa137465c6e04/run/2c3uThCSg)\n Summary: 1 passed, 0 failed, 0 pending\n  \u2714 Import Pokemon (https://app.tracetest.io/organizations/ttorg_ced62e34638d965e/environments/ttenv_b42fa137465c6e04/test/import-pokemon/run/66/test) - trace id: f09a1370ec7a6178aa9ba398f05c2f0f\n\t\u2714 Document Load Should be fast\n\t\u2714 All HTTP request should return 200\n\t\u2714 The worker should be processed\n\t\u2714 All Database Spans: Processing time is less than 100ms\n\n ID                   NAME                            VERSION   RUNS   LAST RUN TIME         LAST RUN STATE   URL\n-------------------- ------------------------------- --------- ------ --------------------- ---------------- -----------------------------------------------------\n playwright-monitor   Playwright Synthetic Monitor    1         0                                             https://api.tracetest.io/monitor/playwright-monitor\n JtFYYc9SR            Quick Start Synthetic Monitor   4         6      2024-08-15 19:01:53                    https://api.tracetest.io/monitor/JtFYYc9SR\n"})}),"\n",(0,s.jsx)(t.h2,{id:"running-synthetic-monitoring",children:"Running Synthetic Monitoring"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:["Select ",(0,s.jsx)(t.code,{children:"Monitors"})," in the ",(0,s.jsx)(t.a,{href:"https://app.tracetest.io/",children:"Tracetest"})," sidebar."]}),"\n",(0,s.jsxs)(t.li,{children:["You'll see the Monitor that was created in the ",(0,s.jsx)(t.code,{children:"run"})," script.\n",(0,s.jsx)(t.img,{src:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1722252986/docs/app.tracetest.io_organizations_ttorg_e66318ba6544b856_environments_ttenv_8fca16a31b8b6e24_monitors_oazwzc.png",alt:"apply script monitor"})]}),"\n",(0,s.jsx)(t.li,{children:"It will start running based on the schedule you selected. With this setup, your Monitor will trigger the Playwright test every 5 minutes."}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"learn-more",children:"Learn More"}),"\n",(0,s.jsxs)(t.p,{children:["Please visit our ",(0,s.jsx)(t.a,{href:"https://github.com/kubeshop/tracetest/tree/main/examples",children:"examples in GitHub"})," and join our ",(0,s.jsx)(t.a,{href:"https://dub.sh/tracetest-community",children:"Slack Community"})," for more info!"]})]})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var s=n(96540);const i={},r=s.createContext(i);function a(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);