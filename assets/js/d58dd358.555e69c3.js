"use strict";(self.webpackChunktracetest_docs=self.webpackChunktracetest_docs||[]).push([[1582],{18213:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>o});var i=n(74848),s=n(28453);const r={id:"creating-tests-http",title:"Defining HTTP Tests as Text Files",description:"Tracetest enables developers to define tests as text files and run them using a CLI. Integrate the execution of tests in your existing CI pipeline.",keywords:["tracetest","trace-based testing","observability","distributed tracing","testing"],image:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1698686403/docs/Blog_Thumbnail_14_rsvkmo.jpg"},d=void 0,a={id:"cli/creating-tests-http",title:"Defining HTTP Tests as Text Files",description:"Tracetest enables developers to define tests as text files and run them using a CLI. Integrate the execution of tests in your existing CI pipeline.",source:"@site/docs/cli/creating-tests-http.mdx",sourceDirName:"cli",slug:"/cli/creating-tests-http",permalink:"/cli/creating-tests-http",draft:!1,unlisted:!1,editUrl:"https://github.com/kubeshop/tracetest/blob/main/docs/docs/cli/creating-tests-http.mdx",tags:[],version:"current",frontMatter:{id:"creating-tests-http",title:"Defining HTTP Tests as Text Files",description:"Tracetest enables developers to define tests as text files and run them using a CLI. Integrate the execution of tests in your existing CI pipeline.",keywords:["tracetest","trace-based testing","observability","distributed tracing","testing"],image:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1698686403/docs/Blog_Thumbnail_14_rsvkmo.jpg"},sidebar:"tutorialSidebar",previous:{title:"Defining Tests as Text Files",permalink:"/cli/creating-tests"},next:{title:"Defining gRPC Tests as Text Files",permalink:"/cli/creating-tests-grpc"}},c={},o=[{value:"Authentication",id:"authentication",level:2},{value:"Body",id:"body",level:2},{value:"Generator Functions",id:"generator-functions",level:3}];function l(e){const t={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.p,{children:["When defining an HTTP trigger, you are required to define a ",(0,i.jsx)(t.code,{children:"httpRequest"})," object containing the request Tracetest will send to your system, this is where you define: ",(0,i.jsx)(t.code,{children:"url"}),", ",(0,i.jsx)(t.code,{children:"method"}),", ",(0,i.jsx)(t.code,{children:"headers"}),", ",(0,i.jsx)(t.code,{children:"authentication"}),", and ",(0,i.jsx)(t.code,{children:"body"}),"."]}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsxs)(t.p,{children:["Note: Some APIs require the ",(0,i.jsx)(t.code,{children:"Content-Type"})," header to respond. If you are not able to trigger your application, check if you are sending this header and if its value is correct."]}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-yaml",children:"trigger:\n  type: http\n  httpRequest:\n    url: http://demo-pokemon-api.demo/pokemon/import\n    method: POST\n    headers:\n    - key: Content-Type\n      value: application/json\n    body: '{ \"id\": 52 }'\n"})}),"\n",(0,i.jsx)(t.h2,{id:"authentication",children:"Authentication"}),"\n",(0,i.jsxs)(t.p,{children:["Currently, we support three authentication methods for HTTP requests: ",(0,i.jsx)(t.code,{children:"basic authentication"}),", ",(0,i.jsx)(t.code,{children:"api key"}),", and ",(0,i.jsx)(t.code,{children:"bearer token"}),". Here is one example of each authentication method:"]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"Basic Authentication"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-yaml",children:"trigger:\n    type: http\n    httpRequest:\n        url: http://my-api.com\n        method: GET\n        auth:\n            type: basic\n            basic:\n                user: my-username\n                password: mypassword\n"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"API Key Authentication"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-yaml",children:'trigger:\n    type: http\n    httpRequest:\n        url: http://my-api.com\n        method: GET\n        auth:\n            type: apiKey\n            apiKey:\n                key: X-Key\n                value: my-key\n                in: header # Either "header" or "query"\n'})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"Bearer Token Authentication"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-yaml",children:"trigger:\n    type: http\n    httpRequest:\n        url: http://my-api.com\n        method: GET\n        auth:\n            type: bearer\n            bearer:\n                token: my-token\n"})}),"\n",(0,i.jsx)(t.h2,{id:"body",children:"Body"}),"\n",(0,i.jsxs)(t.p,{children:["Currently, Tracetest supports ",(0,i.jsx)(t.code,{children:"raw"})," body types that enable you to send text formats over HTTP: JSON, for example."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-yaml",children:'trigger:\n    type: http\n    httpRequest:\n        url: http://my-api.com\n        method: POST\n        body: \'{"name": "my Json Object"}\'\n'})}),"\n",(0,i.jsx)(t.h3,{id:"generator-functions",children:"Generator Functions"}),"\n",(0,i.jsx)(t.p,{children:"Sometimes we want to randomize our test data. Maybe we want to try new values or maybe we know our API will fail if the same id is provided more than once. For this use case, you can define generator functions in the test trigger."}),"\n",(0,i.jsxs)(t.p,{children:["Generator functions can be invoked as part of expressions. Therefore, you only need to invoke it as ",(0,i.jsx)(t.code,{children:"uuid()"}),". However, you might want to generate values and concatenate them with static texts as well. For this, you can use the string interpolation feature: ",(0,i.jsx)(t.code,{children:'"your user id is ${uuid()}'}),"."]}),"\n",(0,i.jsx)(t.p,{children:"Available functions:"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Function"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"uuid()"})}),(0,i.jsx)(t.td,{children:"Generates a random v4 uuid."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"firstName()"})}),(0,i.jsx)(t.td,{children:"Generates a random English first name."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"lastName()"})}),(0,i.jsx)(t.td,{children:"Generates a random English last name."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"fullName()"})}),(0,i.jsx)(t.td,{children:"Generates a random English first and last name."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"email()"})}),(0,i.jsx)(t.td,{children:"Generates a random email address."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"phone()"})}),(0,i.jsx)(t.td,{children:"Generates a random phone number."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"creditCard()"})}),(0,i.jsx)(t.td,{children:"Generates a random credit card number (from 12 to 19 digits)."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"creditCardCvv()"})}),(0,i.jsx)(t.td,{children:"Generates a random credit card cvv (3 digits)."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"creditCardExpDate()"})}),(0,i.jsx)(t.td,{children:"Generates a random credit card expiration date (mm/yy)."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"randomInt(min, max)"})}),(0,i.jsxs)(t.td,{children:["Generates a random integer contained in the closed interval defined by [",(0,i.jsx)(t.code,{children:"min"}),", ",(0,i.jsx)(t.code,{children:"max"}),"]."]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"date(format?)"})}),(0,i.jsxs)(t.td,{children:["Get the current date and formats it. Default is ",(0,i.jsx)(t.code,{children:"YYYY-MM-DD"})," but you can specify other formats."]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"dateTime(format?)"})}),(0,i.jsx)(t.td,{children:"Get the current datetime and formats it. Default is RFC3339 but you can specify other formats."})]})]})]}),"\n",(0,i.jsx)(t.admonition,{type:"tip",children:(0,i.jsx)(t.p,{children:(0,i.jsx)(t.a,{href:"https://www.w3.org/TR/NOTE-datetime",children:"Continue reading about date and datetime formats here."})})}),"\n",(0,i.jsx)(t.admonition,{type:"tip",children:(0,i.jsx)(t.p,{children:(0,i.jsx)(t.a,{href:"/cli/creating-test-specifications",children:"Continue reading about Test Specs here."})})}),"\n",(0,i.jsx)(t.admonition,{type:"tip",children:(0,i.jsx)(t.p,{children:(0,i.jsx)(t.a,{href:"/cli/creating-test-outputs",children:"Continue reading about Test Outputs, here."})})})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>d,x:()=>a});var i=n(96540);const s={},r=i.createContext(s);function d(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);