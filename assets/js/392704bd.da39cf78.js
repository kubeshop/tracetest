"use strict";(self.webpackChunktracetest_docs=self.webpackChunktracetest_docs||[]).push([[8800],{10308:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>l});var s=n(74848),i=n(28453);const a={id:"attribute-naming",title:"attribute-naming",description:"Enforce attribute keys to follow common specifications  | The Tracetest Analyzer analyzes OpenTelemetry traces",keywords:["tracetest","trace-based testing","observability","distributed tracing","testing"],image:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1698686403/docs/Blog_Thumbnail_14_rsvkmo.jpg"},r=void 0,o={id:"analyzer/rules/attribute-naming",title:"attribute-naming",description:"Enforce attribute keys to follow common specifications  | The Tracetest Analyzer analyzes OpenTelemetry traces",source:"@site/docs/analyzer/rules/attribute-naming.mdx",sourceDirName:"analyzer/rules",slug:"/analyzer/rules/attribute-naming",permalink:"/analyzer/rules/attribute-naming",draft:!1,unlisted:!1,editUrl:"https://github.com/kubeshop/tracetest/blob/main/docs/docs/analyzer/rules/attribute-naming.mdx",tags:[],version:"current",frontMatter:{id:"attribute-naming",title:"attribute-naming",description:"Enforce attribute keys to follow common specifications  | The Tracetest Analyzer analyzes OpenTelemetry traces",keywords:["tracetest","trace-based testing","observability","distributed tracing","testing"],image:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1698686403/docs/Blog_Thumbnail_14_rsvkmo.jpg"},sidebar:"tutorialSidebar",previous:{title:"span-naming",permalink:"/analyzer/rules/span-naming"},next:{title:"required-attributes",permalink:"/analyzer/rules/required-attributes"}},c={},l=[{value:"Rule Details",id:"rule-details",level:2},{value:"Options",id:"options",level:2},{value:"When Not To Use It",id:"when-not-to-use-it",level:2}];function d(e){const t={code:"code",h2:"h2",li:"li",p:"p",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:"Enforce attribute keys to follow common specifications."}),"\n",(0,s.jsx)(t.h2,{id:"rule-details",children:"Rule Details"}),"\n",(0,s.jsxs)(t.p,{children:["An ",(0,s.jsx)(t.code,{children:"Attribute"})," is a key-value pair, which is encapsulated as part of a span. The attribute key should follow a set of common specifications to be considered valid."]}),"\n",(0,s.jsx)(t.p,{children:"The following OpenTelemetry Semantic Conventions for attribute keys are defined:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"It must be a non-null and non-empty string."}),"\n",(0,s.jsx)(t.li,{children:"It must be a valid Unicode sequence."}),"\n",(0,s.jsxs)(t.li,{children:["It should use namespacing to avoid name clashes. Delimit the namespaces using a dot character. For example ",(0,s.jsx)(t.code,{children:"service.version"})," denotes the service version where ",(0,s.jsx)(t.code,{children:"service"})," is the namespace and ",(0,s.jsx)(t.code,{children:"version"})," is an attribute in that namespace."]}),"\n",(0,s.jsxs)(t.li,{children:["Namespaces can be nested. For example ",(0,s.jsx)(t.code,{children:"telemetry.sdk"})," is a namespace inside top-level ",(0,s.jsx)(t.code,{children:"telemetry"})," namespace and ",(0,s.jsx)(t.code,{children:"telemetry.sdk.name"})," is an attribute inside ",(0,s.jsx)(t.code,{children:"telemetry.sdk"})," namespace."]}),"\n",(0,s.jsxs)(t.li,{children:["For each multi-word separate the words by underscores (use snake_case). For example ",(0,s.jsx)(t.code,{children:"http.status_code"})," denotes the status code in the http namespace."]}),"\n",(0,s.jsxs)(t.li,{children:["Names should not coincide with namespaces. For example if ",(0,s.jsx)(t.code,{children:"service.instance.id"})," is an attribute name then it is no longer valid to have an attribute named ",(0,s.jsx)(t.code,{children:"service.instance"})," because ",(0,s.jsx)(t.code,{children:"service.instance"})," is already a namespace."]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"options",children:"Options"}),"\n",(0,s.jsx)(t.p,{children:"This rule has the following options:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:'"error"'})," requires attribute keys to follow the OTel semantic convention"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:'"disabled"'})," disables the attribute keys verification"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:'"warning"'})," verifies attribute keys to follow the OTel semantic convention but does not impact the analyzer score"]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"when-not-to-use-it",children:"When Not To Use It"}),"\n",(0,s.jsx)(t.p,{children:"If you don\u2019t want to enforce OTel attribute keys, don't enable this rule."})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>o});var s=n(96540);const i={},a=s.createContext(i);function r(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);