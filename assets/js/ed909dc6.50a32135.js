"use strict";(self.webpackChunktracetest_docs=self.webpackChunktracetest_docs||[]).push([[3519],{85902:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>r,default:()=>l,frontMatter:()=>i,metadata:()=>c,toc:()=>d});var s=t(74848),a=t(28453);const i={id:"selectors",title:"Selectors",description:"Advanced selectors enable selecting spans for assertions. Build integration and end-to-end tests with OpenTelemetry traces with Tracetest.",hide_table_of_contents:!1,keywords:["tracetest","trace-based testing","observability","distributed tracing","testing"],image:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1698686403/docs/Blog_Thumbnail_14_rsvkmo.jpg"},r=void 0,c={id:"concepts/selectors",title:"Selectors",description:"Advanced selectors enable selecting spans for assertions. Build integration and end-to-end tests with OpenTelemetry traces with Tracetest.",source:"@site/docs/concepts/selectors.mdx",sourceDirName:"concepts",slug:"/concepts/selectors",permalink:"/concepts/selectors",draft:!1,unlisted:!1,editUrl:"https://github.com/kubeshop/tracetest/blob/main/docs/docs/concepts/selectors.mdx",tags:[],version:"current",frontMatter:{id:"selectors",title:"Selectors",description:"Advanced selectors enable selecting spans for assertions. Build integration and end-to-end tests with OpenTelemetry traces with Tracetest.",hide_table_of_contents:!1,keywords:["tracetest","trace-based testing","observability","distributed tracing","testing"],image:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1698686403/docs/Blog_Thumbnail_14_rsvkmo.jpg"},sidebar:"tutorialSidebar",previous:{title:"Monitors",permalink:"/concepts/monitors"},next:{title:"Expressions",permalink:"/concepts/expressions"}},p={},d=[{value:"<strong>Features</strong>",id:"features",level:2},{value:"<strong>Empty Selector</strong>",id:"empty-selector",level:3},{value:"<strong>Filter by span kind</strong>",id:"filter-by-span-kind",level:3},{value:"<strong>Filter by Attributes</strong>",id:"filter-by-attributes",level:3},{value:"<strong>AND Condition</strong>",id:"and-condition",level:4},{value:"<strong>OR Condition</strong>",id:"or-condition",level:4},{value:"<strong>Contains Operator</strong>",id:"contains-operator",level:4},{value:"<strong>Pseudo-classes Support</strong>",id:"pseudo-classes-support",level:3},{value:"<strong>Parent-child Relation Filtering</strong>",id:"parent-child-relation-filtering",level:3}];function o(e){const n={blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",h4:"h4",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"If you find yourself in a position where you cannot select complex spans, you can use our advanced selectors to help with that task. Advanced selectors enable selecting spans that are impossible to select using just basic selectors."}),"\n",(0,s.jsx)(n.p,{children:"In order to present each selector feature as easily as possible, we will use a theoretical scenario of an e-commerce application."}),"\n",(0,s.jsx)(n.p,{children:"The system that we will inspect has this flow:"}),"\n",(0,s.jsx)(n.mermaid,{value:"flowchart LR\n    start((start))\n    subgraph purchase\n        cart-api\n        purchase-api\n    end\n    subgraph auth\n        auth-api\n        auth-storage[(db)]\n    end\n    subgraph product\n        product-api\n        product-storage[(db)]\n    end\n    subgraph notification\n        notification-api\n        kafka{{kafka}}\n        external-notification-service{{external service}}\n    end\n\n    start --\x3e|1. Close order| cart-api\n    cart-api--\x3e|5. send buy action| purchase-api\n    purchase-api --\x3e |7. Send notification to user|notification-api\n    purchase-api --\x3e|6. can product be bought by user?| auth-api\n    auth-api --\x3e auth-storage\n    cart-api --\x3e|2. is product available?| product-api\n    product-api --\x3e|4. can user view product?| auth-api\n    product-api --\x3e|3. retrieve product| product-storage\n\n    notification-api --\x3e|8| kafka\n    kafka --\x3e|9| external-notification-service"}),"\n",(0,s.jsx)(n.p,{children:"And it generates the following trace:"}),"\n",(0,s.jsx)(n.mermaid,{value:'flowchart TD\n    A[" id: 1\n        close order\n\n        attributes:\n        service.name: cart-api\n        tracetest.span.type: http\n        http.method: POST\n    "]\n    B[" id: 2\n        is product available\n\n        attributes:\n        service.name: product-api\n        tracetest.span.type: http\n        http.method: GET\n    "]\n    C[" id: 3\n        get product information\n\n        attributes:\n        service.name: product-api\n        tracetest.span.type: db\n        db.statement: SELECT * FROM ...\n    "]\n    D[" id: 4\n        get user can access\n\n        attributes:\n        service.name: auth-api\n        tracetest.span.type: http\n        http.method: GET\n    "]\n    E[" id: 5\n        get user auth information\n\n        attributes:\n        service.name: auth-api\n        tracetest.span.type: db\n        db.statement: SELECT * FROM ...\n    "]\n    F[" id: 6\n        purchase products\n\n        attributes:\n        service.name: cart-api\n        tracetest.span.type: http\n        http.method: POST\n    "]\n    G[" id: 7\n        get user can access\n\n        attributes:\n        service.name: auth-api\n        tracetest.span.type: http\n        http.method: GET\n    "]\n    H[" id: 8\n        get user auth information\n\n        attributes:\n        service.name: auth-api\n        tracetest.span.type: db\n        db.statement: SELECT * FROM ...\n    "]\n    I[" id: 9\n        notify user\n\n        attributes:\n        service.name: notification-api\n        tracetest.span.type: http\n        http.method: POST\n    "]\n    J[" id: 10\n        send message to kafka\n\n        attributes:\n        service.name: notification-api\n        tracetest.span.type: messaging\n    "]\n    K[" id: 10\n        send message to users\n\n        attributes:\n        service.name: external-service\n        tracetest.span.type: messaging\n    "]\n\n\n    A --\x3e|1| B\n    B --\x3e|2| C\n    B --\x3e|3| D\n    D --\x3e|4| E\n    A --\x3e|5| F\n    F --\x3e|6| G\n    G --\x3e|7| H\n    F --\x3e|8| I\n    I --\x3e|9| J\n    J --\x3e|10| K'}),"\n",(0,s.jsx)(n.h2,{id:"features",children:(0,s.jsx)(n.strong,{children:"Features"})}),"\n",(0,s.jsx)(n.h3,{id:"empty-selector",children:(0,s.jsx)(n.strong,{children:"Empty Selector"})}),"\n",(0,s.jsxs)(n.p,{children:["By providing an empty selector, all spans from the trace are selected. Note that an empty selector is an empty string. Providing ",(0,s.jsx)(n.code,{children:"span"})," or ",(0,s.jsx)(n.code,{children:"span[]"})," as a selector will result as a syntax error."]}),"\n",(0,s.jsx)(n.h3,{id:"filter-by-span-kind",children:(0,s.jsx)(n.strong,{children:"Filter by span kind"})}),"\n",(0,s.jsx)(n.p,{children:'If you have more than one span with similar attributes, but different span kinds, you can use `span[kind="expected-kind"] to differentiate them.'}),"\n",(0,s.jsx)(n.h3,{id:"filter-by-attributes",children:(0,s.jsx)(n.strong,{children:"Filter by Attributes"})}),"\n",(0,s.jsxs)(n.p,{children:["The most basic way of filtering the spans to apply an assertion to is to use the span's attributes. A good starting example would be filtering all spans of type ",(0,s.jsx)(n.code,{children:"http"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:'span[tracetest.span.type="http"]\n'})}),"\n",(0,s.jsx)(n.p,{children:"This would select the following spans:"}),"\n",(0,s.jsx)(n.mermaid,{value:'flowchart TD\n    A[" id: 1\n        close order\n\n        attributes:\n        service.name: cart-api\n        tracetest.span.type: http\n        http.method: POST\n    "]\n    B[" id: 2\n        is product available\n\n        attributes:\n        service.name: product-api\n        tracetest.span.type: http\n        http.method: GET\n    "]\n    C[" id: 3\n        get product information\n\n        attributes:\n        service.name: product-api\n        tracetest.span.type: db\n        db.statement: SELECT * FROM ...\n    "]\n    D[" id: 4\n        get user can access\n\n        attributes:\n        service.name: auth-api\n        tracetest.span.type: http\n        http.method: GET\n    "]\n    E[" id: 5\n        get user auth information\n\n        attributes:\n        service.name: auth-api\n        tracetest.span.type: db\n        db.statement: SELECT * FROM ...\n    "]\n    F[" id: 6\n        purchase products\n\n        attributes:\n        service.name: cart-api\n        tracetest.span.type: http\n        http.method: POST\n    "]\n    G[" id: 7\n        get user can access\n\n        attributes:\n        service.name: auth-api\n        tracetest.span.type: http\n        http.method: GET\n    "]\n    H[" id: 8\n        get user auth information\n\n        attributes:\n        service.name: auth-api\n        tracetest.span.type: db\n        db.statement: SELECT * FROM ...\n    "]\n    I[" id: 9\n        notify user\n\n        attributes:\n        service.name: notification-api\n        tracetest.span.type: http\n        http.method: POST\n    "]\n    J[" id: 10\n        send message to kafka\n\n        attributes:\n        service.name: notification-api\n        tracetest.span.type: messaging\n    "]\n    K[" id: 10\n        send message to users\n\n        attributes:\n        service.name: external-service\n        tracetest.span.type: messaging\n    "]\n\n\n    A --\x3e|1| B\n    B --\x3e|2| C\n    B --\x3e|3| D\n    D --\x3e|4| E\n    A --\x3e|5| F\n    F --\x3e|6| G\n    G --\x3e|7| H\n    F --\x3e|8| I\n    I --\x3e|9| J\n    J --\x3e|10| K\n\n    classDef selectedSpan fill:#439846, color:#ffffff\n    classDef candidateSpan fill:#FF6905, color:#ffffff\n\n    class A selectedSpan\n    class B selectedSpan\n    class D selectedSpan\n    class F selectedSpan\n    class G selectedSpan\n    class I selectedSpan'}),"\n",(0,s.jsx)(n.h4,{id:"and-condition",children:(0,s.jsx)(n.strong,{children:"AND Condition"})}),"\n",(0,s.jsxs)(n.p,{children:["If you need to narrow down your results, you can provide multiple properties in the selector by separating them using a space. The following will select all ",(0,s.jsx)(n.code,{children:"http"})," spans ",(0,s.jsx)(n.strong,{children:"AND"})," spans that were created by the service ",(0,s.jsx)(n.code,{children:"cart-api"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:'span[tracetest.span.type="http" service.name="cart-api"]\n'})}),"\n",(0,s.jsx)(n.p,{children:"This would select the following spans:"}),"\n",(0,s.jsx)(n.mermaid,{value:'flowchart TD\n    A[" id: 1\n        close order\n\n        attributes:\n        service.name: cart-api\n        tracetest.span.type: http\n        http.method: POST\n    "]\n    B[" id: 2\n        is product available\n\n        attributes:\n        service.name: product-api\n        tracetest.span.type: http\n        http.method: GET\n    "]\n    C[" id: 3\n        get product information\n\n        attributes:\n        service.name: product-api\n        tracetest.span.type: db\n        db.statement: SELECT * FROM ...\n    "]\n    D[" id: 4\n        get user can access\n\n        attributes:\n        service.name: auth-api\n        tracetest.span.type: http\n        http.method: GET\n    "]\n    E[" id: 5\n        get user auth information\n\n        attributes:\n        service.name: auth-api\n        tracetest.span.type: db\n        db.statement: SELECT * FROM ...\n    "]\n    F[" id: 6\n        purchase products\n\n        attributes:\n        service.name: cart-api\n        tracetest.span.type: http\n        http.method: POST\n    "]\n    G[" id: 7\n        get user can access\n\n        attributes:\n        service.name: auth-api\n        tracetest.span.type: http\n        http.method: GET\n    "]\n    H[" id: 8\n        get user auth information\n\n        attributes:\n        service.name: auth-api\n        tracetest.span.type: db\n        db.statement: SELECT * FROM ...\n    "]\n    I[" id: 9\n        notify user\n\n        attributes:\n        service.name: notification-api\n        tracetest.span.type: http\n        http.method: POST\n    "]\n    J[" id: 10\n        send message to kafka\n\n        attributes:\n        service.name: notification-api\n        tracetest.span.type: messaging\n    "]\n    K[" id: 10\n        send message to users\n\n        attributes:\n        service.name: external-service\n        tracetest.span.type: messaging\n    "]\n\n\n    A --\x3e|1| B\n    B --\x3e|2| C\n    B --\x3e|3| D\n    D --\x3e|4| E\n    A --\x3e|5| F\n    F --\x3e|6| G\n    G --\x3e|7| H\n    F --\x3e|8| I\n    I --\x3e|9| J\n    J --\x3e|10| K\n\n    classDef selectedSpan fill:#439846, color:#ffffff\n    classDef candidateSpan fill:#FF6905, color:#ffffff\n\n    class A selectedSpan\n    class F selectedSpan'}),"\n",(0,s.jsx)(n.h4,{id:"or-condition",children:(0,s.jsx)(n.strong,{children:"OR Condition"})}),"\n",(0,s.jsx)(n.p,{children:"Sometimes we want to have a broader result by selecting spans that match different selectors. Let's say we have to get all spans from our services, but not from any other external service."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:'span[service.name="api-product"], span[service.name="api-auth"], span[service.name="api-notification"], span[service.name="api-cart"]\n'})}),"\n",(0,s.jsx)(n.p,{children:"This would select the following spans:"}),"\n",(0,s.jsx)(n.mermaid,{value:'flowchart TD\n    A[" id: 1\n        close order\n\n        attributes:\n        service.name: cart-api\n        tracetest.span.type: http\n        http.method: POST\n    "]\n    B[" id: 2\n        is product available\n\n        attributes:\n        service.name: product-api\n        tracetest.span.type: http\n        http.method: GET\n    "]\n    C[" id: 3\n        get product information\n\n        attributes:\n        service.name: product-api\n        tracetest.span.type: db\n        db.statement: SELECT * FROM ...\n    "]\n    D[" id: 4\n        get user can access\n\n        attributes:\n        service.name: auth-api\n        tracetest.span.type: http\n        http.method: GET\n    "]\n    E[" id: 5\n        get user auth information\n\n        attributes:\n        service.name: auth-api\n        tracetest.span.type: db\n        db.statement: SELECT * FROM ...\n    "]\n    F[" id: 6\n        purchase products\n\n        attributes:\n        service.name: cart-api\n        tracetest.span.type: http\n        http.method: POST\n    "]\n    G[" id: 7\n        get user can access\n\n        attributes:\n        service.name: auth-api\n        tracetest.span.type: http\n        http.method: GET\n    "]\n    H[" id: 8\n        get user auth information\n\n        attributes:\n        service.name: auth-api\n        tracetest.span.type: db\n        db.statement: SELECT * FROM ...\n    "]\n    I[" id: 9\n        notify user\n\n        attributes:\n        service.name: notification-api\n        tracetest.span.type: http\n        http.method: POST\n    "]\n    J[" id: 10\n        send message to kafka\n\n        attributes:\n        service.name: notification-api\n        tracetest.span.type: messaging\n    "]\n    K[" id: 10\n        send message to users\n\n        attributes:\n        service.name: external-service\n        tracetest.span.type: messaging\n    "]\n\n\n    A --\x3e|1| B\n    B --\x3e|2| C\n    B --\x3e|3| D\n    D --\x3e|4| E\n    A --\x3e|5| F\n    F --\x3e|6| G\n    G --\x3e|7| H\n    F --\x3e|8| I\n    I --\x3e|9| J\n    J --\x3e|10| K\n\n    classDef selectedSpan fill:#439846, color:#ffffff\n    classDef candidateSpan fill:#FF6905, color:#ffffff\n\n    class A selectedSpan\n    class B selectedSpan\n    class C selectedSpan\n    class D selectedSpan\n    class E selectedSpan\n    class F selectedSpan\n    class G selectedSpan\n    class H selectedSpan\n    class I selectedSpan\n    class J selectedSpan'}),"\n",(0,s.jsx)(n.p,{children:"Each span selector will be executed individually and the results will be merged together, creating a list of all spans that match any of the provided span selectors."}),"\n",(0,s.jsx)(n.h4,{id:"contains-operator",children:(0,s.jsx)(n.strong,{children:"Contains Operator"})}),"\n",(0,s.jsx)(n.p,{children:"Although it is possible to filter several span selectors at once to get a broader result, it might become verbose very quickly. The previous example can be written in another way to reduce its complexity:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:'span[service.name contains "api"]\n'})}),"\n",(0,s.jsx)(n.p,{children:"This would select the same spans as the previous example:"}),"\n",(0,s.jsx)(n.mermaid,{value:'flowchart TD\n    A[" id: 1\n        close order\n\n        attributes:\n        service.name: cart-api\n        tracetest.span.type: http\n        http.method: POST\n    "]\n    B[" id: 2\n        is product available\n\n        attributes:\n        service.name: product-api\n        tracetest.span.type: http\n        http.method: GET\n    "]\n    C[" id: 3\n        get product information\n\n        attributes:\n        service.name: product-api\n        tracetest.span.type: db\n        db.statement: SELECT * FROM ...\n    "]\n    D[" id: 4\n        get user can access\n\n        attributes:\n        service.name: auth-api\n        tracetest.span.type: http\n        http.method: GET\n    "]\n    E[" id: 5\n        get user auth information\n\n        attributes:\n        service.name: auth-api\n        tracetest.span.type: db\n        db.statement: SELECT * FROM ...\n    "]\n    F[" id: 6\n        purchase products\n\n        attributes:\n        service.name: cart-api\n        tracetest.span.type: http\n        http.method: POST\n    "]\n    G[" id: 7\n        get user can access\n\n        attributes:\n        service.name: auth-api\n        tracetest.span.type: http\n        http.method: GET\n    "]\n    H[" id: 8\n        get user auth information\n\n        attributes:\n        service.name: auth-api\n        tracetest.span.type: db\n        db.statement: SELECT * FROM ...\n    "]\n    I[" id: 9\n        notify user\n\n        attributes:\n        service.name: notification-api\n        tracetest.span.type: http\n        http.method: POST\n    "]\n    J[" id: 10\n        send message to kafka\n\n        attributes:\n        service.name: notification-api\n        tracetest.span.type: messaging\n    "]\n    K[" id: 10\n        send message to users\n\n        attributes:\n        service.name: external-service\n        tracetest.span.type: messaging\n    "]\n\n\n    A --\x3e|1| B\n    B --\x3e|2| C\n    B --\x3e|3| D\n    D --\x3e|4| E\n    A --\x3e|5| F\n    F --\x3e|6| G\n    G --\x3e|7| H\n    F --\x3e|8| I\n    I --\x3e|9| J\n    J --\x3e|10| K\n\n    classDef selectedSpan fill:#439846, color:#ffffff\n    classDef candidateSpan fill:#FF6905, color:#ffffff\n\n    class A selectedSpan\n    class B selectedSpan\n    class C selectedSpan\n    class D selectedSpan\n    class E selectedSpan\n    class F selectedSpan\n    class G selectedSpan\n    class H selectedSpan\n    class I selectedSpan\n    class J selectedSpan'}),"\n",(0,s.jsx)(n.h3,{id:"pseudo-classes-support",children:(0,s.jsx)(n.strong,{children:"Pseudo-classes Support"})}),"\n",(0,s.jsxs)(n.p,{children:["Sometimes filtering by attributes is not enough because we might have two or three identical spans in the tree but we only want to assert one of them. For example, imagine a system that has a ",(0,s.jsx)(n.code,{children:"retry"})," policy for all the HTTP requests it sends. How would we allow a user to validate if the ",(0,s.jsx)(n.code,{children:"third"})," execution was successful without asserting the other two spans?"]}),"\n",(0,s.jsx)(n.p,{children:"This is where pseudo-classes enter the scene. Pseudo-classes are ways of filtering spans by data that is not present in the span itself. For example, the order which the span appears."}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Note"}),": Today we support only ",(0,s.jsx)(n.code,{children:"first"}),", ",(0,s.jsx)(n.code,{children:"last"}),", and ",(0,s.jsx)(n.code,{children:"nth_child"}),". If you think we should implement others, please open an issue and explain why it is important and how it should behave."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["For the examples of the three pseudo-classes, let's consider that we want to select a specific ",(0,s.jsx)(n.code,{children:"http"})," span based on when it happens."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:'span[tracetest.span.type="http"]\n'})}),"\n",(0,s.jsx)(n.p,{children:"This will select the following spans:"}),"\n",(0,s.jsx)(n.mermaid,{value:'flowchart TD\n    A[" id: 1\n        close order\n\n        attributes:\n        service.name: cart-api\n        tracetest.span.type: http\n        http.method: POST\n    "]\n    B[" id: 2\n        is product available\n\n        attributes:\n        service.name: product-api\n        tracetest.span.type: http\n        http.method: GET\n    "]\n    C[" id: 3\n        get product information\n\n        attributes:\n        service.name: product-api\n        tracetest.span.type: db\n        db.statement: SELECT * FROM ...\n    "]\n    D[" id: 4\n        get user can access\n\n        attributes:\n        service.name: auth-api\n        tracetest.span.type: http\n        http.method: GET\n    "]\n    E[" id: 5\n        get user auth information\n\n        attributes:\n        service.name: auth-api\n        tracetest.span.type: db\n        db.statement: SELECT * FROM ...\n    "]\n    F[" id: 6\n        purchase products\n\n        attributes:\n        service.name: cart-api\n        tracetest.span.type: http\n        http.method: POST\n    "]\n    G[" id: 7\n        get user can access\n\n        attributes:\n        service.name: auth-api\n        tracetest.span.type: http\n        http.method: GET\n    "]\n    H[" id: 8\n        get user auth information\n\n        attributes:\n        service.name: auth-api\n        tracetest.span.type: db\n        db.statement: SELECT * FROM ...\n    "]\n    I[" id: 9\n        notify user\n\n        attributes:\n        service.name: notification-api\n        tracetest.span.type: http\n        http.method: POST\n    "]\n    J[" id: 10\n        send message to kafka\n\n        attributes:\n        service.name: notification-api\n        tracetest.span.type: messaging\n    "]\n    K[" id: 10\n        send message to users\n\n        attributes:\n        service.name: external-service\n        tracetest.span.type: messaging\n    "]\n\n\n    A --\x3e|1| B\n    B --\x3e|2| C\n    B --\x3e|3| D\n    D --\x3e|4| E\n    A --\x3e|5| F\n    F --\x3e|6| G\n    G --\x3e|7| H\n    F --\x3e|8| I\n    I --\x3e|9| J\n    J --\x3e|10| K\n\n    classDef selectedSpan fill:#439846, color:#ffffff\n    classDef candidateSpan fill:#FF6905, color:#ffffff\n\n    class A selectedSpan\n    class B selectedSpan\n    class D selectedSpan\n    class F selectedSpan\n    class G selectedSpan\n    class I selectedSpan'}),"\n",(0,s.jsx)(n.h4,{id:"",children:(0,s.jsx)(n.strong,{children:":first"})}),"\n",(0,s.jsx)(n.p,{children:"This would return the first appearing span from the list:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:'span[tracetest.span.type="http"]:first\n'})}),"\n",(0,s.jsx)(n.mermaid,{value:'flowchart TD\n    A[" id: 1\n        close order\n\n        attributes:\n        service.name: cart-api\n        tracetest.span.type: http\n        http.method: POST\n    "]\n    B[" id: 2\n        is product available\n\n        attributes:\n        service.name: product-api\n        tracetest.span.type: http\n        http.method: GET\n    "]\n    C[" id: 3\n        get product information\n\n        attributes:\n        service.name: product-api\n        tracetest.span.type: db\n        db.statement: SELECT * FROM ...\n    "]\n    D[" id: 4\n        get user can access\n\n        attributes:\n        service.name: auth-api\n        tracetest.span.type: http\n        http.method: GET\n    "]\n    E[" id: 5\n        get user auth information\n\n        attributes:\n        service.name: auth-api\n        tracetest.span.type: db\n        db.statement: SELECT * FROM ...\n    "]\n    F[" id: 6\n        purchase products\n\n        attributes:\n        service.name: cart-api\n        tracetest.span.type: http\n        http.method: POST\n    "]\n    G[" id: 7\n        get user can access\n\n        attributes:\n        service.name: auth-api\n        tracetest.span.type: http\n        http.method: GET\n    "]\n    H[" id: 8\n        get user auth information\n\n        attributes:\n        service.name: auth-api\n        tracetest.span.type: db\n        db.statement: SELECT * FROM ...\n    "]\n    I[" id: 9\n        notify user\n\n        attributes:\n        service.name: notification-api\n        tracetest.span.type: http\n        http.method: POST\n    "]\n    J[" id: 10\n        send message to kafka\n\n        attributes:\n        service.name: notification-api\n        tracetest.span.type: messaging\n    "]\n    K[" id: 10\n        send message to users\n\n        attributes:\n        service.name: external-service\n        tracetest.span.type: messaging\n    "]\n\n\n    A --\x3e|1| B\n    B --\x3e|2| C\n    B --\x3e|3| D\n    D --\x3e|4| E\n    A --\x3e|5| F\n    F --\x3e|6| G\n    G --\x3e|7| H\n    F --\x3e|8| I\n    I --\x3e|9| J\n    J --\x3e|10| K\n\n    classDef selectedSpan fill:#439846, color:#ffffff\n    classDef candidateSpan fill:#FF6905, color:#ffffff\n\n    class A selectedSpan\n    class B candidateSpan\n    class D candidateSpan\n    class F candidateSpan\n    class G candidateSpan\n    class I candidateSpan'}),"\n",(0,s.jsx)(n.h4,{id:"-1",children:(0,s.jsx)(n.strong,{children:":last"})}),"\n",(0,s.jsx)(n.p,{children:"This would return the last appearing span from the list:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:'span[tracetest.span.type="http"]:last\n'})}),"\n",(0,s.jsx)(n.mermaid,{value:'flowchart TD\n    A[" id: 1\n        close order\n\n        attributes:\n        service.name: cart-api\n        tracetest.span.type: http\n        http.method: POST\n    "]\n    B[" id: 2\n        is product available\n\n        attributes:\n        service.name: product-api\n        tracetest.span.type: http\n        http.method: GET\n    "]\n    C[" id: 3\n        get product information\n\n        attributes:\n        service.name: product-api\n        tracetest.span.type: db\n        db.statement: SELECT * FROM ...\n    "]\n    D[" id: 4\n        get user can access\n\n        attributes:\n        service.name: auth-api\n        tracetest.span.type: http\n        http.method: GET\n    "]\n    E[" id: 5\n        get user auth information\n\n        attributes:\n        service.name: auth-api\n        tracetest.span.type: db\n        db.statement: SELECT * FROM ...\n    "]\n    F[" id: 6\n        purchase products\n\n        attributes:\n        service.name: cart-api\n        tracetest.span.type: http\n        http.method: POST\n    "]\n    G[" id: 7\n        get user can access\n\n        attributes:\n        service.name: auth-api\n        tracetest.span.type: http\n        http.method: GET\n    "]\n    H[" id: 8\n        get user auth information\n\n        attributes:\n        service.name: auth-api\n        tracetest.span.type: db\n        db.statement: SELECT * FROM ...\n    "]\n    I[" id: 9\n        notify user\n\n        attributes:\n        service.name: notification-api\n        tracetest.span.type: http\n        http.method: POST\n    "]\n    J[" id: 10\n        send message to kafka\n\n        attributes:\n        service.name: notification-api\n        tracetest.span.type: messaging\n    "]\n    K[" id: 10\n        send message to users\n\n        attributes:\n        service.name: external-service\n        tracetest.span.type: messaging\n    "]\n\n\n    A --\x3e|1| B\n    B --\x3e|2| C\n    B --\x3e|3| D\n    D --\x3e|4| E\n    A --\x3e|5| F\n    F --\x3e|6| G\n    G --\x3e|7| H\n    F --\x3e|8| I\n    I --\x3e|9| J\n    J --\x3e|10| K\n\n    classDef selectedSpan fill:#439846, color:#ffffff\n    classDef candidateSpan fill:#FF6905, color:#ffffff\n\n    class A candidateSpan\n    class B candidateSpan\n    class D candidateSpan\n    class F candidateSpan\n    class G candidateSpan\n    class I selectedSpan'}),"\n",(0,s.jsx)(n.h4,{id:"-2",children:(0,s.jsx)(n.strong,{children:":nth_child"})}),"\n",(0,s.jsxs)(n.p,{children:["This enables you to fetch any item from the list based on its index. ",(0,s.jsx)(n.code,{children:"n"})," starts at 1 (first element) and ends at ",(0,s.jsx)(n.code,{children:"length"})," (last element). Any invalid ",(0,s.jsx)(n.code,{children:"n"})," value will return in an empty list of spans being returned:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:'span[tracetest.span.type="http"]:nth_child(3)\n'})}),"\n",(0,s.jsx)(n.mermaid,{value:'flowchart TD\n    A[" id: 1\n        close order\n\n        attributes:\n        service.name: cart-api\n        tracetest.span.type: http\n        http.method: POST\n    "]\n    B[" id: 2\n        is product available\n\n        attributes:\n        service.name: product-api\n        tracetest.span.type: http\n        http.method: GET\n    "]\n    C[" id: 3\n        get product information\n\n        attributes:\n        service.name: product-api\n        tracetest.span.type: db\n        db.statement: SELECT * FROM ...\n    "]\n    D[" id: 4\n        get user can access\n\n        attributes:\n        service.name: auth-api\n        tracetest.span.type: http\n        http.method: GET\n    "]\n    E[" id: 5\n        get user auth information\n\n        attributes:\n        service.name: auth-api\n        tracetest.span.type: db\n        db.statement: SELECT * FROM ...\n    "]\n    F[" id: 6\n        purchase products\n\n        attributes:\n        service.name: cart-api\n        tracetest.span.type: http\n        http.method: POST\n    "]\n    G[" id: 7\n        get user can access\n\n        attributes:\n        service.name: auth-api\n        tracetest.span.type: http\n        http.method: GET\n    "]\n    H[" id: 8\n        get user auth information\n\n        attributes:\n        service.name: auth-api\n        tracetest.span.type: db\n        db.statement: SELECT * FROM ...\n    "]\n    I[" id: 9\n        notify user\n\n        attributes:\n        service.name: notification-api\n        tracetest.span.type: http\n        http.method: POST\n    "]\n    J[" id: 10\n        send message to kafka\n\n        attributes:\n        service.name: notification-api\n        tracetest.span.type: messaging\n    "]\n    K[" id: 10\n        send message to users\n\n        attributes:\n        service.name: external-service\n        tracetest.span.type: messaging\n    "]\n\n\n    A --\x3e|1| B\n    B --\x3e|2| C\n    B --\x3e|3| D\n    D --\x3e|4| E\n    A --\x3e|5| F\n    F --\x3e|6| G\n    G --\x3e|7| H\n    F --\x3e|8| I\n    I --\x3e|9| J\n    J --\x3e|10| K\n\n    classDef selectedSpan fill:#439846, color:#ffffff\n    classDef candidateSpan fill:#FF6905, color:#ffffff\n\n    class A candidateSpan\n    class B candidateSpan\n    class D selectedSpan\n    class F candidateSpan\n    class G candidateSpan\n    class I candidateSpan'}),"\n",(0,s.jsx)(n.h3,{id:"parent-child-relation-filtering",children:(0,s.jsx)(n.strong,{children:"Parent-child Relation Filtering"})}),"\n",(0,s.jsx)(n.p,{children:"Even with all those capabilities, we might have problems with ambiguous selectors returning several spans when just a few were intended."}),"\n",(0,s.jsxs)(n.p,{children:["In our example, ",(0,s.jsx)(n.code,{children:"auth-api"})," is called twice from different parts of the trace. At first by ",(0,s.jsx)(n.code,{children:"product-api"})," and later by ",(0,s.jsx)(n.code,{children:"cart-api"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["What if I want to test if a product only available in US can be bought in UK? The product can be seen by the user, but it cannot be bought if the user is outside the US. Certainly, I cannot apply the same assertions on all ",(0,s.jsx)(n.code,{children:"auth-api"})," spans, otherwise the test will not pass."]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["\u2139\ufe0f"," When you filter by the parent-child relationship, spans are matched recursively in all levels below the parent. This doesn't match only direct children of the parent, but all other spans in the sub-tree."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"For example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:'span[service.name="auth-api" tracetest.span.type="http"]\n'})}),"\n",(0,s.jsx)(n.p,{children:"Will return:"}),"\n",(0,s.jsx)(n.mermaid,{value:'flowchart TD\n    A[" id: 1\n        close order\n\n        attributes:\n        service.name: cart-api\n        tracetest.span.type: http\n        http.method: POST\n    "]\n    B[" id: 2\n        is product available\n\n        attributes:\n        service.name: product-api\n        tracetest.span.type: http\n        http.method: GET\n    "]\n    C[" id: 3\n        get product information\n\n        attributes:\n        service.name: product-api\n        tracetest.span.type: db\n        db.statement: SELECT * FROM ...\n    "]\n    D[" id: 4\n        get user can access\n\n        attributes:\n        service.name: auth-api\n        tracetest.span.type: http\n        http.method: GET\n    "]\n    E[" id: 5\n        get user auth information\n\n        attributes:\n        service.name: auth-api\n        tracetest.span.type: db\n        db.statement: SELECT * FROM ...\n    "]\n    F[" id: 6\n        purchase products\n\n        attributes:\n        service.name: cart-api\n        tracetest.span.type: http\n        http.method: POST\n    "]\n    G[" id: 7\n        get user can access\n\n        attributes:\n        service.name: auth-api\n        tracetest.span.type: http\n        http.method: GET\n    "]\n    H[" id: 8\n        get user auth information\n\n        attributes:\n        service.name: auth-api\n        tracetest.span.type: db\n        db.statement: SELECT * FROM ...\n    "]\n    I[" id: 9\n        notify user\n\n        attributes:\n        service.name: notification-api\n        tracetest.span.type: http\n        http.method: POST\n    "]\n    J[" id: 10\n        send message to kafka\n\n        attributes:\n        service.name: notification-api\n        tracetest.span.type: messaging\n    "]\n    K[" id: 10\n        send message to users\n\n        attributes:\n        service.name: external-service\n        tracetest.span.type: messaging\n    "]\n\n\n    A --\x3e|1| B\n    B --\x3e|2| C\n    B --\x3e|3| D\n    D --\x3e|4| E\n    A --\x3e|5| F\n    F --\x3e|6| G\n    G --\x3e|7| H\n    F --\x3e|8| I\n    I --\x3e|9| J\n    J --\x3e|10| K\n\n    classDef selectedSpan fill:#439846, color:#ffffff\n    classDef candidateSpan fill:#FF6905, color:#ffffff\n\n    class D selectedSpan\n    class G selectedSpan'}),"\n",(0,s.jsxs)(n.p,{children:["This is a problem, because if we apply the same assertion to both spans, one of them will fail. We could try to use ",(0,s.jsx)(n.code,{children:"nth_child"})," but that could break if a http request failed and the retry policy kicked in. Thus, the only way of filtering in this scenario is based on the context when it was generated. For example: using its parent span to do so."]}),"\n",(0,s.jsxs)(n.p,{children:["We could use the ",(0,s.jsx)(n.code,{children:"purchase products"})," parent to ensure just ",(0,s.jsx)(n.code,{children:"http"})," class to the ",(0,s.jsx)(n.code,{children:"auth-api"})," triggered by the ",(0,s.jsx)(n.code,{children:"purchase-api"})," would be selected:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:'span[service.name="cart-api", name="purchase products"] span[service.name="auth-api" tracetest.span.type="http"]\n'})}),"\n",(0,s.jsx)(n.p,{children:"This would find the parent span and only select the spans that are descedents of that parent and match the provided filter:"}),"\n",(0,s.jsx)(n.mermaid,{value:'flowchart TD\n    A[" id: 1\n        close order\n\n        attributes:\n        service.name: cart-api\n        tracetest.span.type: http\n        http.method: POST\n    "]\n    B[" id: 2\n        is product available\n\n        attributes:\n        service.name: product-api\n        tracetest.span.type: http\n        http.method: GET\n    "]\n    C[" id: 3\n        get product information\n\n        attributes:\n        service.name: product-api\n        tracetest.span.type: db\n        db.statement: SELECT * FROM ...\n    "]\n    D[" id: 4\n        get user can access\n\n        attributes:\n        service.name: auth-api\n        tracetest.span.type: http\n        http.method: GET\n    "]\n    E[" id: 5\n        get user auth information\n\n        attributes:\n        service.name: auth-api\n        tracetest.span.type: db\n        db.statement: SELECT * FROM ...\n    "]\n    F[" id: 6\n        purchase products\n\n        attributes:\n        service.name: cart-api\n        tracetest.span.type: http\n        http.method: POST\n    "]\n    G[" id: 7\n        get user can access\n\n        attributes:\n        service.name: auth-api\n        tracetest.span.type: http\n        http.method: GET\n    "]\n    H[" id: 8\n        get user auth information\n\n        attributes:\n        service.name: auth-api\n        tracetest.span.type: db\n        db.statement: SELECT * FROM ...\n    "]\n    I[" id: 9\n        notify user\n\n        attributes:\n        service.name: notification-api\n        tracetest.span.type: http\n        http.method: POST\n    "]\n    J[" id: 10\n        send message to kafka\n\n        attributes:\n        service.name: notification-api\n        tracetest.span.type: messaging\n    "]\n    K[" id: 10\n        send message to users\n\n        attributes:\n        service.name: external-service\n        tracetest.span.type: messaging\n    "]\n\n\n    A --\x3e|1| B\n    B --\x3e|2| C\n    B --\x3e|3| D\n    D --\x3e|4| E\n    A --\x3e|5| F\n    F --\x3e|6| G\n    G --\x3e|7| H\n    F --\x3e|8| I\n    I --\x3e|9| J\n    J --\x3e|10| K\n\n    classDef selectedSpan fill:#439846, color:#ffffff\n    classDef parentSpan fill:#3792cb, color:#ffffff\n\n    class F parentSpan\n    class G selectedSpan'})]})}function l(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>c});var s=t(96540);const a={},i=s.createContext(a);function r(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);