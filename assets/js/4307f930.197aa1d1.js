"use strict";(self.webpackChunktracetest_docs=self.webpackChunktracetest_docs||[]).push([[6209],{69991:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var r=n(74848),s=n(28453);const o={id:"running-python-app-with-opentelemetry-collector-and-tracetest",title:"Python with OpenTelemetry manual instrumention",description:"Quick start how to configure a Python app to use OpenTelemetry instrumentation with traces, and Tracetest for enhancing your e2e and integration tests with trace-based testing.",hide_table_of_contents:!1,keywords:["tracetest","trace-based testing","observability","distributed tracing","testing","python","testing python","python observability","python tracing","opentelemetry"],image:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1698686403/docs/Blog_Thumbnail_14_rsvkmo.jpg"},i=void 0,a={id:"examples-tutorials/recipes/running-python-app-with-opentelemetry-collector-and-tracetest",title:"Python with OpenTelemetry manual instrumention",description:"Quick start how to configure a Python app to use OpenTelemetry instrumentation with traces, and Tracetest for enhancing your e2e and integration tests with trace-based testing.",source:"@site/docs/examples-tutorials/recipes/running-python-app-with-opentelemetry-collector-and-tracetest.mdx",sourceDirName:"examples-tutorials/recipes",slug:"/examples-tutorials/recipes/running-python-app-with-opentelemetry-collector-and-tracetest",permalink:"/examples-tutorials/recipes/running-python-app-with-opentelemetry-collector-and-tracetest",draft:!1,unlisted:!1,editUrl:"https://github.com/kubeshop/tracetest/blob/main/docs/docs/examples-tutorials/recipes/running-python-app-with-opentelemetry-collector-and-tracetest.mdx",tags:[],version:"current",frontMatter:{id:"running-python-app-with-opentelemetry-collector-and-tracetest",title:"Python with OpenTelemetry manual instrumention",description:"Quick start how to configure a Python app to use OpenTelemetry instrumentation with traces, and Tracetest for enhancing your e2e and integration tests with trace-based testing.",hide_table_of_contents:!1,keywords:["tracetest","trace-based testing","observability","distributed tracing","testing","python","testing python","python observability","python tracing","opentelemetry"],image:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1698686403/docs/Blog_Thumbnail_14_rsvkmo.jpg"},sidebar:"guidesSidebar",previous:{title:"Node.js and OpenTelemetry Manual Instrumentation",permalink:"/examples-tutorials/recipes/running-tracetest-without-a-trace-data-store-with-manual-instrumentation"},next:{title:"OpenTelemetry Demo and Lightstep",permalink:"/examples-tutorials/recipes/running-tracetest-with-lightstep"}},c={},l=[{value:"Python app with OpenTelemetry Collector and Tracetest",id:"python-app-with-opentelemetry-collector-and-tracetest",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Run This Quckstart Example",id:"run-this-quckstart-example",level:2},{value:"Project Structure",id:"project-structure",level:2},{value:"Configuring the Python App",id:"configuring-the-python-app",level:2},{value:"Running the Python App and Tracetest",id:"running-the-python-app-and-tracetest",level:2}];function p(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.admonition,{type:"note",children:(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"https://github.com/kubeshop/tracetest/tree/main/examples/quick-start-python",children:"Check out the source code on GitHub here."})})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.a,{href:"https://tracetest.io/",children:"Tracetest"})," is a testing tool based on ",(0,r.jsx)(t.a,{href:"https://opentelemetry.io/",children:"OpenTelemetry"})," that allows you to test your distributed application. It allows you to use data from distributed traces generated by OpenTelemetry to validate and assert if your application has the desired behavior defined by your test definitions."]}),"\n",(0,r.jsx)(t.h2,{id:"python-app-with-opentelemetry-collector-and-tracetest",children:"Python app with OpenTelemetry Collector and Tracetest"}),"\n",(0,r.jsx)(t.p,{children:"This is a simple quick start on how to configure a Python app to use OpenTelemetry instrumentation with traces, and Tracetest for enhancing your e2e and integration tests with trace-based testing."}),"\n",(0,r.jsx)(t.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Tracetest Account"}),":"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["Sign up to ",(0,r.jsx)(t.a,{href:"https://app.tracetest.io",children:(0,r.jsx)(t.code,{children:"app.tracetest.io"})})," or follow the ",(0,r.jsx)(t.a,{href:"/getting-started/overview",children:"get started"})," docs."]}),"\n",(0,r.jsxs)(t.li,{children:["Have access to the environment's ",(0,r.jsx)(t.a,{href:"https://app.tracetest.io/retrieve-token",children:"agent API key"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Docker"}),": Have ",(0,r.jsx)(t.a,{href:"https://docs.docker.com/get-docker/",children:"Docker"})," and ",(0,r.jsx)(t.a,{href:"https://docs.docker.com/compose/install/",children:"Docker Compose"})," installed on your machine."]}),"\n",(0,r.jsx)(t.h2,{id:"run-this-quckstart-example",children:"Run This Quckstart Example"}),"\n",(0,r.jsx)(t.p,{children:"The example below is provided as part of the Tracetest project. You can download and run the example by following these steps:"}),"\n",(0,r.jsx)(t.p,{children:"Clone the Tracetest project and go to the Node.js Quickstart with Manual Instrumentation:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"git clone https://github.com/kubeshop/tracetest\ncd tracetest/examples/quick-start-python\n"})}),"\n",(0,r.jsx)(t.p,{children:"Follow these instructions to run the quick start:"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:["Copy the ",(0,r.jsx)(t.code,{children:".env.template"})," file to ",(0,r.jsx)(t.code,{children:".env"}),"."]}),"\n",(0,r.jsxs)(t.li,{children:["Fill out the ",(0,r.jsx)(t.a,{href:"https://app.tracetest.io/retrieve-token",children:"TRACETEST_TOKEN and ENVIRONMENT_ID"})," details by editing your ",(0,r.jsx)(t.code,{children:".env"})," file."]}),"\n",(0,r.jsxs)(t.li,{children:["Run ",(0,r.jsx)(t.code,{children:"docker compose run tracetest-run"}),"."]}),"\n",(0,r.jsx)(t.li,{children:"Follow the links in the output to view the test results."}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"Follow along with the sections below for a detailed breakdown of what the example you just ran did and how it works."}),"\n",(0,r.jsx)(t.h2,{id:"project-structure",children:"Project Structure"}),"\n",(0,r.jsx)(t.p,{children:"The quick start Python project is built with Docker Compose and contains the Tracetest Agent and a Python Flask app."}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"docker-compose.yaml"})," file in the root directory of the quick start runs the Python app and the ",(0,r.jsx)(t.a,{href:"/concepts/agent",children:"Tracetest Agent"})," setup."]}),"\n",(0,r.jsx)(t.h2,{id:"configuring-the-python-app",children:"Configuring the Python App"}),"\n",(0,r.jsxs)(t.p,{children:["The Python app is a simple Flask app, contained in the ",(0,r.jsx)(t.code,{children:"app.py"})," file."]}),"\n",(0,r.jsxs)(t.p,{children:["Configure the ",(0,r.jsx)(t.code,{children:".env"})," like shown below."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:'# Get the required information here: https://app.tracetest.io/retrieve-token\n\nTRACETEST_TOKEN="<YOUR_TRACETEST_TOKEN>"\nTRACETEST_ENVIRONMENT_ID="<YOUR_ENV_ID>"\n\n# GRPC\nOTEL_EXPORTER_OTLP_TRACES_ENDPOINT="http://tracetest-agent:4317/"\n# or, use HTTP\n# OTEL_EXPORTER_OTLP_TRACES_ENDPOINT="http://tracetest-agent:4318/v1/traces"\n'})}),"\n",(0,r.jsxs)(t.p,{children:["The OpenTelemetry tracing is contained both as automatic and manual instrumentation. Traces will be sent to the Tracetest Agent. Here's the ",(0,r.jsx)(t.code,{children:"requirements.txt"})," with OpenTelemetry libraries."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-text",metastring:'title="requirements.txt"',children:"flask\nopentelemetry-distro\nopentelemetry-exporter-otlp\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Automatic instrumentation is configured in the ",(0,r.jsx)(t.code,{children:"Dockerfile"})," and the ",(0,r.jsx)(t.code,{children:"docker-compose.yaml"}),". The ",(0,r.jsx)(t.code,{children:"command"})," field will include ",(0,r.jsx)(t.code,{children:"opentelemetry-instrument"}),"."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-Dockerfile",metastring:'title="Dockerfile"',children:"FROM python:3.10.1-slim\nWORKDIR /opt/app\nCOPY . .\nRUN pip install --no-cache-dir -r requirements.txt\nRUN opentelemetry-bootstrap -a install\nEXPOSE 8080\n"})}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"docker-compose.yaml"})," contains just one service for the Python app. The service is started with the ",(0,r.jsx)(t.code,{children:"command"})," parameter."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yaml",metastring:'title="docker-compose.yaml"',children:"command: opentelemetry-instrument --traces_exporter otlp --service_name app --exporter_otlp_endpoint ${OTEL_EXPORTER_OTLP_TRACES_ENDPOINT} --exporter_otlp_insecure true flask run --host=0.0.0.0 --port=8080\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Manual instrumentation is configured in the ",(0,r.jsx)(t.code,{children:"app.py"}),"."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"from flask import Flask, request\nimport json\n\nfrom opentelemetry import trace\nfrom opentelemetry.sdk.resources import Resource\nfrom opentelemetry.sdk.trace import TracerProvider\nfrom opentelemetry.sdk.trace.export import BatchSpanProcessor\nfrom opentelemetry.sdk.trace.export import ConsoleSpanExporter\n\nprovider = TracerProvider()\nprocessor = BatchSpanProcessor(ConsoleSpanExporter())\nprovider.add_span_processor(processor)\ntrace.set_tracer_provider(provider)\ntracer = trace.get_tracer(__name__)\n"})}),"\n",(0,r.jsxs)(t.p,{children:["There are 3 endpoints in the Flask app. To see manual instrumentation, trigger the ",(0,r.jsx)(t.code,{children:'"/manual"'})," endpoint. To see the automatic instrumentation, trigger the ",(0,r.jsx)(t.code,{children:'"/automatic"'})," endpoint respectively."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'app = Flask(__name__)\n\n@app.route("/manual")\ndef manual():\n    with tracer.start_as_current_span(\n        "manual",\n        attributes={ "endpoint": "/manual", "foo": "bar" }\n    ):\n        return "App works with a manual instrumentation."\n\n@app.route(\'/automatic\')\ndef automatic():\n    return "App works with automatic instrumentation."\n\n@app.route("/")\ndef home():\n    return "App works."\n'})}),"\n",(0,r.jsx)(t.h2,{id:"running-the-python-app-and-tracetest",children:"Running the Python App and Tracetest"}),"\n",(0,r.jsx)(t.p,{children:"To execute the tests, run this command:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"docker compose run tracetest-run\n"})}),"\n",(0,r.jsx)(t.p,{children:"This will:"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"Start the Python app, the OpenTelemetry Collector, and send the traces to the Tracetest Agent."}),"\n",(0,r.jsx)(t.li,{children:"Start the Tracetest Agent."}),"\n",(0,r.jsx)(t.li,{children:"Configure the tracing backend and create tests in your environment."}),"\n",(0,r.jsx)(t.li,{children:"Run the tests."}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"The output of the test will look similar to this:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"Configuring Tracetest\n SUCCESS  Successfully configured Tracetest CLI\nRunning Trace-Based Tests...\n\u2714 RunGroup: #E1qhw_jIg (https://app.tracetest.io/organizations/xxx/environments/xxx/run/E1qhw_jIg)\n Summary: 1 passed, 0 failed, 0 pending\n  \u2714 Python API (https://app.tracetest.io/organizations/xxx/environments/xxx/test/W656Q0c4g/run/2/test) - trace id: c0eaebfe3ab66360a98d5cd443760a3c\n\t\u2714 It should return status 200.\n"})}),"\n",(0,r.jsx)(t.p,{children:"Here's what that looks like in the WebUI."}),"\n",(0,r.jsx)(t.p,{children:"Selector:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:'span[tracetest.span.type="http" name="/automatic" http.target="/automatic" http.method="GET"]\n'})}),"\n",(0,r.jsx)(t.p,{children:"Assertion:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"attr:http.status_code = 200\n"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{src:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1715620289/docs/app.tracetest.io_organizations_ttorg_e66318ba6544b856_environments_ttenv_8fca16a31b8b6e24_tests_ayy2cq.png",alt:"assertion"})}),"\n",(0,r.jsxs)(t.p,{children:["Feel free to check out our ",(0,r.jsx)(t.a,{href:"https://github.com/kubeshop/tracetest/tree/main/examples",children:"examples in GitHub"}),", and join our ",(0,r.jsx)(t.a,{href:"https://dub.sh/tracetest-community",children:"Slack Community"})," for more info!"]})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>a});var r=n(96540);const s={},o=r.createContext(s);function i(e){const t=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(o.Provider,{value:t},e.children)}}}]);