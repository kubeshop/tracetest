"use strict";(self.webpackChunktracetest_docs=self.webpackChunktracetest_docs||[]).push([[51],{88864:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var a=s(74848),t=s(28453);const i={id:"span-naming",title:"span-naming",description:"Enforce span names that identify a class of Spans, rather than individual Span instances | The Tracetest Analyzer analyzes OpenTelemetry traces",keywords:["tracetest","trace-based testing","observability","distributed tracing","testing"],image:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1698686403/docs/Blog_Thumbnail_14_rsvkmo.jpg"},r=void 0,l={id:"analyzer/rules/span-naming",title:"span-naming",description:"Enforce span names that identify a class of Spans, rather than individual Span instances | The Tracetest Analyzer analyzes OpenTelemetry traces",source:"@site/docs/analyzer/rules/span-naming.mdx",sourceDirName:"analyzer/rules",slug:"/analyzer/rules/span-naming",permalink:"/analyzer/rules/span-naming",draft:!1,unlisted:!1,editUrl:"https://github.com/kubeshop/tracetest/blob/main/docs/docs/analyzer/rules/span-naming.mdx",tags:[],version:"current",frontMatter:{id:"span-naming",title:"span-naming",description:"Enforce span names that identify a class of Spans, rather than individual Span instances | The Tracetest Analyzer analyzes OpenTelemetry traces",keywords:["tracetest","trace-based testing","observability","distributed tracing","testing"],image:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1698686403/docs/Blog_Thumbnail_14_rsvkmo.jpg"},sidebar:"tutorialSidebar",previous:{title:"OTel Semantic Conventions",permalink:"/analyzer/plugins/otel-semantic-conventions"},next:{title:"attribute-naming",permalink:"/analyzer/rules/attribute-naming"}},o={},d=[{value:"Rule Details",id:"rule-details",level:2},{value:"HTTP spans:",id:"http-spans",level:3},{value:"Database spans:",id:"database-spans",level:3},{value:"RPC spans:",id:"rpc-spans",level:3},{value:"Messaging spans:",id:"messaging-spans",level:3},{value:"Options",id:"options",level:2},{value:"When Not To Use It",id:"when-not-to-use-it",level:2}];function c(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"Enforce span names that identify a class of Spans, rather than individual Span instances."}),"\n",(0,a.jsx)(n.h2,{id:"rule-details",children:"Rule Details"}),"\n",(0,a.jsx)(n.p,{children:"The span name concisely identifies the work represented by the Span, for example, an RPC method name, a function name, or the name of a subtask or stage within a larger computation. The span name SHOULD be the most general string that identifies a class of Spans, rather than individual Span instances while still being human-readable."}),"\n",(0,a.jsx)(n.p,{children:"The following OTel semantic conventions for span names are defined:"}),"\n",(0,a.jsx)(n.h3,{id:"http-spans",children:"HTTP spans:"}),"\n",(0,a.jsxs)(n.p,{children:["If span kind is ",(0,a.jsx)(n.code,{children:'"server"'}),", the name should follow this format:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"{http.method} {http.route}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["If span kind is ",(0,a.jsx)(n.code,{children:'"client"'}),", the name should follow this format:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"{http.method}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"database-spans",children:"Database spans:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"{db.operation} {db.name}.{db.sql.table}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["If ",(0,a.jsx)(n.code,{children:"db.sql.table"})," is not available, the name should follow this format:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"{db.operation} {db.name}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"rpc-spans",children:"RPC spans:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"{package}.{service}/{method}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"messaging-spans",children:"Messaging spans:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"{destination name} {operation name}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"options",children:"Options"}),"\n",(0,a.jsx)(n.p,{children:"This rule has the following options:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:'"error"'})," requires span names to follow the OTel semantic convention"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:'"disabled"'})," disables the span name verification"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:'"warning"'})," verifies span names to follow the OTel semantic convention but does not impact the analyzer score"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"when-not-to-use-it",children:"When Not To Use It"}),"\n",(0,a.jsx)(n.p,{children:"If you don\u2019t want to enforce OTel span names, don\u2019t enable this rule."})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>l});var a=s(96540);const t={},i=a.createContext(t);function r(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);