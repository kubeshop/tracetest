"use strict";(self.webpackChunktracetest_docs=self.webpackChunktracetest_docs||[]).push([[9109],{21828:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>a,toc:()=>h});var s=n(74848),i=n(28453);const r={id:"github-actions-pipeline-with-secrets",title:"Github Actions Pipeline with Secrets",description:"Quick start how to configure one repository to use Tracetest and Github Action with Secrets to run trace-based tests",hide_table_of_contents:!1,keywords:["tracetest","trace-based testing","observability","distributed tracing","testing"],image:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1698686403/docs/Blog_Thumbnail_14_rsvkmo.jpg"},o=void 0,a={id:"ci-cd-automation/github-actions-pipeline-with-secrets",title:"Github Actions Pipeline with Secrets",description:"Quick start how to configure one repository to use Tracetest and Github Action with Secrets to run trace-based tests",source:"@site/docs/ci-cd-automation/github-actions-pipeline-with-secrets.mdx",sourceDirName:"ci-cd-automation",slug:"/ci-cd-automation/github-actions-pipeline-with-secrets",permalink:"/ci-cd-automation/github-actions-pipeline-with-secrets",draft:!1,unlisted:!1,editUrl:"https://github.com/kubeshop/tracetest/blob/main/docs/docs/ci-cd-automation/github-actions-pipeline-with-secrets.mdx",tags:[],version:"current",frontMatter:{id:"github-actions-pipeline-with-secrets",title:"Github Actions Pipeline with Secrets",description:"Quick start how to configure one repository to use Tracetest and Github Action with Secrets to run trace-based tests",hide_table_of_contents:!1,keywords:["tracetest","trace-based testing","observability","distributed tracing","testing"],image:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1698686403/docs/Blog_Thumbnail_14_rsvkmo.jpg"},sidebar:"guidesSidebar",previous:{title:"CI/CD Automation",permalink:"/ci-cd-automation/overview"},next:{title:"Testkube Kubernetes-native Test Runner Pipeline",permalink:"/ci-cd-automation/testkube-pipeline"}},c={},h=[{value:"Running trace-based test in Github Actions with Secrets",id:"running-trace-based-test-in-github-actions-with-secrets",level:2},{value:"Creating a GitHub Actions Workflow",id:"creating-a-github-actions-workflow",level:2},{value:"Creating the API Services GitHub Repo",id:"creating-the-api-services-github-repo",level:3},{value:"Creating the GitHub Actions Workflow",id:"creating-the-github-actions-workflow",level:3},{value:"Learn More",id:"learn-more",level:2}];function l(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.admonition,{type:"note",children:(0,s.jsx)(t.p,{children:(0,s.jsx)(t.a,{href:"https://github.com/kubeshop/tracetest/tree/main/examples/tracetest-with-github-action-and-secrets",children:"Check out the source code on GitHub here."})})}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"https://tracetest.io/",children:"Tracetest"})," is a testing tool based on ",(0,s.jsx)(t.a,{href:"https://opentelemetry.io/",children:"OpenTelemetry"})," that allows you to test your distributed application. It allows you to use data from distributed traces generated by OpenTelemetry to validate and assert if your application has the desired behavior defined by your test definitions."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"https://github.com/features/actions",children:"Github Actions"})," is a continuous integration/continuous deployment (CI/CD) automation service provided by GitHub. It allows developers to automate their software workflows directly in their GitHub repositories. These workflows can include building, testing, and deploying applications, as well as many other tasks. Workflows are defined using YAML files and can be triggered by various GitHub events such as push, pull requests, or issue comments."]}),"\n",(0,s.jsx)(t.h2,{id:"running-trace-based-test-in-github-actions-with-secrets",children:"Running trace-based test in Github Actions with Secrets"}),"\n",(0,s.jsxs)(t.p,{children:["When creating CI test scripts in GitHub, you sometimes need to use sensitive information, like passwords and API Keys. To keep this information safe, GitHub provides a feature called ",(0,s.jsx)(t.a,{href:"https://docs.github.com/en/actions/reference/encrypted-secrets",children:"Secrets"}),". Secrets are encrypted environment variables that you create in a repository and are available to use in your workflows."]}),"\n",(0,s.jsx)(t.p,{children:"In this example, you will see how to configure a repository to use Tracetest and Github Actions with Secrets to run trace-based tests, keeping your sensitive information safe."}),"\n",(0,s.jsx)(t.p,{children:"Let's start by using a mini Payment ecosystem with 4 APIs that work together to emulate a Payment system."}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Gateway API"}),": User-facing API that receives payment orders, protected with Basic Auth."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Payment Executor API"}),": Executes a payment order after analyzing the customer profile."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Risk Analysis API"}),": Analyzes a user profile to understand its score."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Wallet API"}),": Retains data about the Wallet balance of each user."]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["These APIs are instrumented with ",(0,s.jsx)(t.a,{href:"https://opentelemetry.io/docs/languages/",children:"OpenTelemetry SDKs"})," and send data to ",(0,s.jsx)(t.a,{href:"https://www.jaegertracing.io/",children:"Jaeger"})," via the ",(0,s.jsx)(t.a,{href:"https://opentelemetry.io/docs/collector/",children:"OpenTelemetry Collector"}),"."]}),"\n",(0,s.jsx)(t.mermaid,{value:'flowchart LR\n    Gateway["Gateway API"]\n    PaymentExecutor["Payment Executor API"]\n    RiskAnalysis["Risk Analysis API"]\n    Wallet["Wallet API"]\n    OTelCollector["OTel Collector"]\n    Jaeger\n    User\n\n    User -- calls --\x3e Gateway\n    subgraph PaymentSystem\n        Gateway -- queries --\x3e Wallet\n        Gateway -- perform order --\x3e PaymentExecutor\n        PaymentExecutor -- queries --\x3e RiskAnalysis\n    end\n    PaymentSystem -- send telemetry --\x3e OTelCollector\n    OTelCollector --\x3e Jaeger'}),"\n",(0,s.jsxs)(t.p,{children:["Each one of these APIs has their code specified inside our source code on GitHub (",(0,s.jsx)(t.a,{href:"https://github.com/kubeshop/tracetest/tree/main/examples/tracetest-with-github-action-and-secrets",children:"here"}),") inside the ",(0,s.jsx)(t.code,{children:"services"})," folder."]}),"\n",(0,s.jsx)(t.admonition,{type:"info",children:(0,s.jsx)(t.p,{children:(0,s.jsx)(t.a,{href:"https://github.com/kubeshop/tracetest/tree/main/examples/tracetest-with-github-action-and-secrets",children:"View the full example code of each API on GitHub, here."})})}),"\n",(0,s.jsx)(t.p,{children:"You can run them together using Docker Compose along with a Tracetest Agent, that we will use soon to test these services, with the following command:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"git clone git@github.com:kubeshop/tracetest.git\ncd ./tracetest/examples/tracetest-with-github-action-and-secrets\nTRACETEST_API_KEY=<your-agent-key> docker compose up\n"})}),"\n",(0,s.jsx)(t.p,{children:"To run a test, you need execute an API call against the Gateway API. It's protected with Basic Auth."}),"\n",(0,s.jsxs)(t.p,{children:["In this tutorial, you will use a Github Secret to store the Basic Auth credentials and use it in our Github Action workflow by adding it to a ",(0,s.jsx)(t.a,{href:"/concepts/variable-sets",children:"VariableSet"})," as a secret."]}),"\n",(0,s.jsx)(t.h2,{id:"creating-a-github-actions-workflow",children:"Creating a GitHub Actions Workflow"}),"\n",(0,s.jsx)(t.p,{children:"To test this recipe, create a repository in your machine, add it to GitHub, and run the workflow."}),"\n",(0,s.jsx)(t.h3,{id:"creating-the-api-services-github-repo",children:"Creating the API Services GitHub Repo"}),"\n",(0,s.jsx)(t.p,{children:"First of all, you need to create a new folder on your machine to store the service code and the repository code. You can do this by running the following commands:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sh",children:"# sandbox folder to store our files\nmkdir github-actions-test\ncd ./github-actions-test\n\nmkdir my-repository\ncd ./my-repository\n"})}),"\n",(0,s.jsx)(t.p,{children:"Now copy the code of the Payment Ecosystem to this repository. You can do this by running the following commands:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sh",children:'cd ..\n\ngit clone git@github.com:kubeshop/tracetest.git\ncp -r ./tracetest/examples/tracetest-with-github-action-and-secrets/services ./my-repository\n\ncd ./my-repository\n\n# remove the .git folder to start a new repository\nrm -rf .git\ngit init\n\ngit add .\ngit commit -m "Initial commit"\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Then, ",(0,s.jsx)(t.a,{href:"https://docs.github.com/en/repositories/creating-and-managing-repositories/quickstart-for-repositories#create-a-repository",children:"create a new repository"})," on GitHub and perform the commands below:"]}),"\n",(0,s.jsx)(t.admonition,{type:"note",children:(0,s.jsxs)(t.p,{children:["Remember to replace ",(0,s.jsx)(t.code,{children:"<your-github-user>"})," and ",(0,s.jsx)(t.code,{children:"<your-github-name>"})," with your Github user and the name of the repository you created."]})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sh",children:"git remote add origin https://github.com/<your-github-user>/<your-github-name>.git\ngit push origin main\n"})}),"\n",(0,s.jsxs)(t.p,{children:["After that, you need to configure a new environment on ",(0,s.jsx)(t.a,{href:"http://app.tracetest.io",children:"Tracetest"})," with ",(0,s.jsx)(t.a,{href:"/concepts/environments",children:"these instructions"})," and generate an environment token for it (",(0,s.jsx)(t.a,{href:"/concepts/environment-tokens",children:"here"}),"). Remember to store the API Key generated for the Tracetest Agent and the environment token as they will be used on next step."]}),"\n",(0,s.jsxs)(t.p,{children:["You need to register three secrets in your GitHub repository using ",(0,s.jsx)(t.a,{href:"https://docs.github.com/en/actions/security-guides/using-secrets-in-github-actions#creating-secrets-for-a-repository",children:"these instructions"}),":"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"TRACETEST_API_KEY"}),": that is the API key used by your ",(0,s.jsx)(t.a,{href:"/concepts/agent",children:"agent"})," to connect to Tracetest"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"TRACETEST_CLI_TOKEN"}),": an ",(0,s.jsx)(t.a,{href:"/concepts/environment-tokens",children:"environment token"})," used by the CI to run a test"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"API_SECRET_PASSWORD"}),": the password used to authenticate on the Gateway API. For demo purposes, its value is ",(0,s.jsx)(t.code,{children:"supersecret"}),"."]}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"creating-the-github-actions-workflow",children:"Creating the GitHub Actions Workflow"}),"\n",(0,s.jsxs)(t.p,{children:["Now that you have the repository set, let's create a new Github Actions workflow file in your repository. First, create a new file in the ",(0,s.jsx)(t.code,{children:".github/workflows"})," folder with the following content:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:"name: Run trace-based tests\n\non:\n  # runs on every push to main\n  push:\n    branches: [main]\n\n  # allows run manually via Actions tab on Github\n  workflow_dispatch:\n\nenv:\n  TRACETEST_API_KEY: ${{secrets.TRACETEST_API_KEY}}\n\njobs:\n  run-trace-based-tests:\n    name: Run trace based tests for Payment Ecosystem\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      # more steps to add\n"})}),"\n",(0,s.jsxs)(t.p,{children:["This file defines a workflow that runs on every push to the ",(0,s.jsx)(t.code,{children:"main"})," branch and can be manually triggered via the Actions tab on GitHub. It also defines an environment variable ",(0,s.jsx)(t.code,{children:"TRACETEST_API_KEY"})," that is set to the value of the secret ",(0,s.jsx)(t.code,{children:"TRACETEST_API_KEY"}),". This value will be used by the Tracetest Agent defined inside our ",(0,s.jsx)(t.code,{children:"docker-compose.yml"})," file. The file also adds the first step that checks out the repository code into the CI container."]}),"\n",(0,s.jsxs)(t.p,{children:["The next step that you will add is to install the Tracetest CLI in the CI container with the ",(0,s.jsx)(t.a,{href:"https://github.com/kubeshop/tracetest-github-action",children:"Tracetest Github Action"})," and configure the CLI. You can do this by adding the following step:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:"# ...\n    steps:\n      # previous steps ...\n\n      - name: Configure Tracetest CLI\n        uses: kubeshop/tracetest-github-action@v1\n        with:\n          token: ${{secrets.TRACETEST_CLI_TOKEN}}\n\n      # more steps to add\n"})}),"\n",(0,s.jsx)(t.p,{children:"Then, the two following steps will start the APIs locally using Docker Compose and configure Tracetest Agent to read traces from the Jaeger instance running inside of the Docker Compose network:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:"# ...\n    steps:\n      # previous steps ...\n\n      - name: Run APIs locally with docker compose\n        run: |\n          docker-compose up -d\n          docker compose logs -f > /tmp/docker-log &\n\n      - name: Configure Tracing Backend\n        run: |\n          tracetest datastore apply --file ./tracing-backend.yaml\n\n      # more steps to add\n\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Now, you will set up a ",(0,s.jsx)(t.a,{href:"/concepts/variable-sets",children:"VariableSet"})," with the id ",(0,s.jsx)(t.code,{children:"tracetesting-vars"})," that will have all variables used in your test context, including the ",(0,s.jsx)(t.code,{children:"API_SECRET_PASSWORD"})," secret. This will make Tracetest understand that this variable is a secret and should not be presented on the UI and CLI outputs. You can do this by adding the following step to the workflow file:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:"# ...\n    steps:\n      # previous steps ...\n\n      - name: Inject secrets as a variable set in Tracetest\n        run: |\n          cat << EOF > vars.yaml\n          type: VariableSet\n          spec:\n            id: tracetesting-vars\n            name: AuthKeys for test\n            description: Variables used in basic auth for my API\n            values:\n            - key: USER\n              value: admin\n            - key: PASSWORD\n              value: ${{secrets.API_SECRET_PASSWORD}}\n              type: secret\n          EOF\n\n          tracetest apply variableset --file ./vars.yaml\n\n      # more steps to add\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Finally, you will run the test using the Tracetest CLI, passing the ",(0,s.jsx)(t.code,{children:"tracetesting-vars"})," Variable Set with the ",(0,s.jsx)(t.code,{children:"--vars"})," argument and the test file ",(0,s.jsx)(t.code,{children:"trace-based-test.yaml"})," that contains the test definition. You can do this by adding the following step to the workflow file:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:"# ...\n    steps:\n      # previous steps ...\n\n      - name: Run trace-based tests\n        run: |\n          tracetest run test --vars tracetesting-vars --file ./trace-based-test.yaml\n\n      # more steps to add\n"})}),"\n",(0,s.jsxs)(t.p,{children:["You can run the test by pushing a new commit to the ",(0,s.jsx)(t.code,{children:"main"})," branch with:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sh",children:'# assuming that you are on "my-repository" folder\n\ngit add .\ngit commit -m "Add Tracetest Github Action workflow"\ngit push origin main\n'})}),"\n",(0,s.jsx)(t.p,{children:'After a while, you can go to the "Actions" on Github and see the workflow running, as shown below.'}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{src:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1717457464/docs/github-action-screenshot_xb2bwj.png",alt:""})}),"\n",(0,s.jsx)(t.p,{children:"Drill down to see the jobs contained in this workflow."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{src:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1717457464/docs/github-action-steps_ji02ev.png",alt:""})}),"\n",(0,s.jsx)(t.p,{children:"You can also see the execution of this workflow."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{src:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1717457464/docs/github-action-running-step_w9supy.png",alt:""})}),"\n",(0,s.jsxs)(t.p,{children:["Once it's finished, you can see the results of the test in the Tracetest Web UI by going to your environment on ",(0,s.jsx)(t.a,{href:"https://app.tracetest.io",children:"app.tracetest.io"}),' and clicking on "Runs".']}),"\n",(0,s.jsx)(t.h2,{id:"learn-more",children:"Learn More"}),"\n",(0,s.jsxs)(t.p,{children:["Please visit our ",(0,s.jsx)(t.a,{href:"https://github.com/kubeshop/tracetest/tree/main/examples",children:"examples in GitHub"})," and join our ",(0,s.jsx)(t.a,{href:"https://dub.sh/tracetest-community",children:"Slack Community"})," for more info!"]})]})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>a});var s=n(96540);const i={},r=s.createContext(i);function o(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);