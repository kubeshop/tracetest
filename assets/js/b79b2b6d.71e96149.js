"use strict";(self.webpackChunktracetest_docs=self.webpackChunktracetest_docs||[]).push([[1613],{43537:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var i=n(74848),s=n(28453);const r={id:"creating-tests-playwright-engine",title:"Defining Playwright Engine Tests as Text Files",description:"Tracetest enables developers to define tests as text files and run them using a CLI. Integrate the execution of Playwright Engine tests in your existing CI pipeline.",keywords:["tracetest","trace-based testing","observability","distributed tracing","testing","playwright","playwright engine"],image:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1698686403/docs/Blog_Thumbnail_14_rsvkmo.jpg"},a=void 0,o={id:"cli/creating-tests-playwright-engine",title:"Defining Playwright Engine Tests as Text Files",description:"Tracetest enables developers to define tests as text files and run them using a CLI. Integrate the execution of Playwright Engine tests in your existing CI pipeline.",source:"@site/docs/cli/creating-tests-playwright-engine.mdx",sourceDirName:"cli",slug:"/cli/creating-tests-playwright-engine",permalink:"/cli/creating-tests-playwright-engine",draft:!1,unlisted:!1,editUrl:"https://github.com/kubeshop/tracetest/blob/main/docs/docs/cli/creating-tests-playwright-engine.mdx",tags:[],version:"current",frontMatter:{id:"creating-tests-playwright-engine",title:"Defining Playwright Engine Tests as Text Files",description:"Tracetest enables developers to define tests as text files and run them using a CLI. Integrate the execution of Playwright Engine tests in your existing CI pipeline.",keywords:["tracetest","trace-based testing","observability","distributed tracing","testing","playwright","playwright engine"],image:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1698686403/docs/Blog_Thumbnail_14_rsvkmo.jpg"},sidebar:"tutorialSidebar",previous:{title:"Defining Kafka Tests as Text Files",permalink:"/cli/creating-tests-kafka"},next:{title:"Defining GraphQL Tests as Text Files",permalink:"/cli/creating-tests-graphql"}},l={},c=[];function g(e){const t={a:"a",admonition:"admonition",code:"code",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.admonition,{title:"How is Playwright Engine different from the Playwright npm module integration?",type:"info",children:(0,i.jsxs)(t.p,{children:["Read the migration guide ",(0,i.jsx)(t.a,{href:"/examples-tutorials/recipes/migrating-tests-from-playwright-integration-to-playwright-engine",children:"here"}),"."]})}),"\n",(0,i.jsx)(t.p,{children:"The Playwright Testing Engine executes your testing scripts natively in the platform, by specifying three things:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"The target URL of your website (private or public)."}),"\n",(0,i.jsx)(t.li,{children:"A JavaScript file with your tests."}),"\n",(0,i.jsx)(t.li,{children:"And the exported method you want to execute."}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"Tracetest Playwright Engine test definition YAML:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-yaml",children:"trigger:\n  type: playwrightengine\n  playwrightEngine:\n    target: ${env:TARGET_URL}\n    script: ./script.js\n    method: importPokemon\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Playwright ",(0,i.jsx)(t.code,{children:"script.js"})," definition:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:'const { expect } = require("@playwright/test");\n\n// [...]\n\nasync function importPokemon(page) {\n  expect(await page.getByText("Pokeshop")).toBeTruthy();\n\n  await page.click("text=Import");\n  await page.getByLabel("ID").fill("143");\n\n  await Promise.all([\n    page.waitForResponse(\n      (resp) => resp.url().includes("/pokemon/import") && resp.status() === 200\n    ),\n    page.getByRole("button", { name: "OK", exact: true }).click(),\n  ]);\n}\n\nmodule.exports = { importPokemon };\n'})})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(g,{...e})}):g(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var i=n(96540);const s={},r=i.createContext(s);function a(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);