"use strict";(self.webpackChunktracetest_docs=self.webpackChunktracetest_docs||[]).push([[2622],{71628:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>c,toc:()=>p});var r=n(74848),s=n(28453),a=n(49489),i=n(7227);n(2250),n(92945);const o={id:"configure-trace-ingestion",title:"Configure Trace Ingestion",description:"Get started by configuring trace ingestion to connect traces to tests. Tracetest allows you to quickly build integration and end-to-end tests, powered by your OpenTelemetry traces.",hide_table_of_contents:!1,keywords:["tracetest","trace-based testing","observability","distributed tracing","testing","trace ingestion","trace testing","ingest traces"],image:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1698686403/docs/Blog_Thumbnail_14_rsvkmo.jpg"},l=void 0,c={id:"getting-started/configure-trace-ingestion",title:"Configure Trace Ingestion",description:"Get started by configuring trace ingestion to connect traces to tests. Tracetest allows you to quickly build integration and end-to-end tests, powered by your OpenTelemetry traces.",source:"@site/docs/getting-started/configure-trace-ingestion.mdx",sourceDirName:"getting-started",slug:"/getting-started/configure-trace-ingestion",permalink:"/getting-started/configure-trace-ingestion",draft:!1,unlisted:!1,editUrl:"https://github.com/kubeshop/tracetest/blob/main/docs/docs/getting-started/configure-trace-ingestion.mdx",tags:[],version:"current",frontMatter:{id:"configure-trace-ingestion",title:"Configure Trace Ingestion",description:"Get started by configuring trace ingestion to connect traces to tests. Tracetest allows you to quickly build integration and end-to-end tests, powered by your OpenTelemetry traces.",hide_table_of_contents:!1,keywords:["tracetest","trace-based testing","observability","distributed tracing","testing","trace ingestion","trace testing","ingest traces"],image:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1698686403/docs/Blog_Thumbnail_14_rsvkmo.jpg"},sidebar:"tutorialSidebar",previous:{title:"Create a Response-based Test",permalink:"/getting-started/create-response-based-test"},next:{title:"Create a Trace-based Test",permalink:"/getting-started/create-trace-based-test"}},d={},p=[{value:"Enable Trace Ingestion with an OTLP Endpoint",id:"enable-trace-ingestion-with-an-otlp-endpoint",level:2},{value:"Configure Trace Exporters to Send Traces to Tracetest Agent",id:"configure-trace-exporters-to-send-traces-to-tracetest-agent",level:2}];function h(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.a,{href:"/concepts/agent",children:"Tracetest Agent"})," runs alongside your apps, in the same environment/network, to do two things:"]}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"Run tests against your apps."}),"\n",(0,r.jsx)(t.li,{children:"Ingest traces from your apps."}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"This page explains (2), how to ingest traces into Tracetest Agent to enable trace-based testing."}),"\n",(0,r.jsx)(t.h2,{id:"enable-trace-ingestion-with-an-otlp-endpoint",children:"Enable Trace Ingestion with an OTLP Endpoint"}),"\n",(0,r.jsxs)(t.p,{children:["Create a file called ",(0,r.jsx)(t.code,{children:"trace-ingestion.yaml"}),". And, run it with the CLI."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yaml",metastring:'title="trace-ingestion.yaml"',children:"type: DataStore\nspec:\n  name: Opentelemetry Collector pipeline\n  type: otlp\n  default: true\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",metastring:'title="Terminal"',children:"tracetest apply datastore -f ./trace-ingestion.yaml\n"})}),"\n",(0,r.jsx)(t.p,{children:'Or, use the Web UI. Go to Settings > Trace Ingestion. Toggle "Enable Trace Ingestion" to on and select OpenTelemetry.'}),"\n",(0,r.jsxs)("p",{align:"center",children:[(0,r.jsx)("img",{src:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1727178199/docs/app.tracetest.io_organizations_ttorg_e66318ba6544b856_environments_ttenv_ed85b0979257d37b_tests_page_1_3_l0v8wp.png",alt:"trace ingestion 1",width:"50%"}),(0,r.jsx)("img",{src:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1727178201/docs/app.tracetest.io_organizations_ttorg_e66318ba6544b856_environments_ttenv_ed85b0979257d37b_tests_page_1_4_fyhu3d.png",alt:"trace ingestion 2",width:"50%"})]}),"\n",(0,r.jsx)(t.h2,{id:"configure-trace-exporters-to-send-traces-to-tracetest-agent",children:"Configure Trace Exporters to Send Traces to Tracetest Agent"}),"\n",(0,r.jsxs)(t.p,{children:["Once configured, Tracetest Agent exposes OTLP ports ",(0,r.jsx)(t.code,{children:"4317"})," (gRPC) and ",(0,r.jsx)(t.code,{children:"4318"})," (HTTP) for trace ingestion. Configure your trace exporters to send traces to the Tracetest Agent OTLP endpoint."]}),"\n",(0,r.jsxs)(a.A,{groupId:"installation",children:[(0,r.jsxs)(i.A,{value:"cli",label:"Tracetest CLI",default:!0,children:[(0,r.jsx)(t.p,{children:"With the Tracetest Agent running locally, the trace ingestion OTLP endpoints will be:"}),(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["gRPC: ",(0,r.jsx)(t.code,{children:"http://localhost:4317"})]}),"\n",(0,r.jsxs)(t.li,{children:["HTTP: ",(0,r.jsx)(t.code,{children:"http://localhost:4318/v1/traces"})]}),"\n"]})]}),(0,r.jsxs)(i.A,{value:"docker",label:"Docker",children:[(0,r.jsxs)(t.p,{children:["With the Tracetest Agent running in Docker with ",(0,r.jsx)(t.code,{children:"tracetest-agent"})," as the service name, the trace ingestion OTLP endpoints will be:"]}),(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["gRPC: ",(0,r.jsx)(t.code,{children:"http://tracetest-agent:4317"})]}),"\n",(0,r.jsxs)(t.li,{children:["HTTP: ",(0,r.jsx)(t.code,{children:"http://tracetest-agent:4318/v1/traces"})]}),"\n"]})]}),(0,r.jsxs)(i.A,{value:"docker-compose",label:"Docker Compose",children:[(0,r.jsxs)(t.p,{children:["With the Tracetest Agent running in Docker with ",(0,r.jsx)(t.code,{children:"tracetest-agent"})," as the service name, the trace ingestion OTLP endpoints will be:"]}),(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["gRPC: ",(0,r.jsx)(t.code,{children:"http://tracetest-agent:4317"})]}),"\n",(0,r.jsxs)(t.li,{children:["HTTP: ",(0,r.jsx)(t.code,{children:"http://tracetest-agent:4318/v1/traces"})]}),"\n"]})]}),(0,r.jsxs)(i.A,{value:"kubernetes",label:"Kubernetes",children:[(0,r.jsxs)(t.p,{children:["With the Tracetest Agent running in Kubernetes with ",(0,r.jsx)(t.code,{children:"tracetest-agent"})," as the service name, the trace ingestion OTLP endpoints will be:"]}),(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["gRPC: ",(0,r.jsx)(t.code,{children:"http://tracetest-agent.default.svc.cluster.local:4317"})]}),"\n",(0,r.jsxs)(t.li,{children:["HTTP: ",(0,r.jsx)(t.code,{children:"http://tracetest-agent.default.svc.cluster.local:4318/v1/traces"})]}),"\n"]})]}),(0,r.jsxs)(i.A,{value:"helm",label:"Helm",children:[(0,r.jsxs)(t.p,{children:["With the Tracetest Agent running in Kubernetes with ",(0,r.jsx)(t.code,{children:"agent"})," as the Helm ",(0,r.jsx)(t.code,{children:"<release-name>"}),", the trace ingestion OTLP endpoints will be:"]}),(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["gRPC: ",(0,r.jsx)(t.code,{children:"http://agent-tracetest-agent:4317"})]}),"\n",(0,r.jsxs)(t.li,{children:["HTTP: ",(0,r.jsx)(t.code,{children:"http://agent-tracetest-agent:4318/v1/traces"})]}),"\n"]})]})]}),"\n",(0,r.jsx)(t.p,{children:"OpenTelemetry auto-instrumentation allows you to send basic data quickly using the OpenTelemetry industry standard, before adding custom context."}),"\n",(0,r.jsxs)(a.A,{groupId:"exporters",children:[(0,r.jsxs)(i.A,{value:"nodejs",label:"Node.js",default:!0,children:[(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"Install Dependencies"}),"\n"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",metastring:'title="Terminal"',children:"npm install --save @opentelemetry/auto-instrumentations-node\n"})}),(0,r.jsxs)(t.ol,{start:"2",children:["\n",(0,r.jsx)(t.li,{children:"Initilize Tracing"}),"\n"]}),(0,r.jsxs)(t.p,{children:["Create an initialization file called ",(0,r.jsx)(t.code,{children:"tracing.js"}),". Import it as the first step in your application lifecycle or include it with the ",(0,r.jsx)(t.code,{children:"-r"})," / ",(0,r.jsx)(t.code,{children:"--require"})," Node.js CLI option."]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",metastring:'title="tracing.js"',children:"const opentelemetry = require('@opentelemetry/sdk-node');\nconst { OTLPTraceExporter } =  require('@opentelemetry/exporter-trace-otlp-http');\nconst { getNodeAutoInstrumentations } = require('@opentelemetry/auto-instrumentations-node');\n\nconst sdk = new opentelemetry.NodeSDK({\n  // environment vars are loaded in the start step\n  traceExporter: new OTLPTraceExporter(),\n  instrumentations: [\n    getNodeAutoInstrumentations({\n      // we recommend disabling fs autoinstrumentation since it can be noisy and expensive during startup\n      '@opentelemetry/instrumentation-fs': {\n          enabled: false,\n      },\n    }),\n  ],\n});\n\nsdk.start();\n"})}),(0,r.jsxs)(t.ol,{start:"3",children:["\n",(0,r.jsx)(t.li,{children:"Configure and Run"}),"\n"]}),(0,r.jsxs)(t.p,{children:["Configure OpenTelemetry to send traces to Tracetest using environment variables. Run the Node.js app by preloading the OpenTelemetry initialization file with ",(0,r.jsx)(t.code,{children:"-r"}),"."]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",metastring:'title="Terminal"',children:'export OTEL_SERVICE_NAME=my-service-name\nexport OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf\nexport OTEL_EXPORTER_OTLP_ENDPOINT="http://<tracetest-agent>:4318"\n# export OTEL_EXPORTER_OTLP_HEADERS="x-tracetest-token=<token>"\n\nnode -r ./tracing.js app.js\n'})}),(0,r.jsx)(t.admonition,{title:"View a code sample",type:"note",children:(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"https://github.com/kubeshop/tracetest/tree/main/examples/getting-started/nodejs",children:"Visit the example in GitHub, here."})})})]}),(0,r.jsxs)(i.A,{value:"python",label:"Python",children:[(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"Install Packages"}),"\n"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"python -m pip install opentelemetry-instrumentation \\\n                      opentelemetry-distro \\\n                      opentelemetry-exporter-otlp\n"})}),(0,r.jsxs)(t.ol,{start:"2",children:["\n",(0,r.jsx)(t.li,{children:"Initilize Tracing"}),"\n"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"opentelemetry-bootstrap --action=install\n"})}),(0,r.jsxs)(t.ol,{start:"3",children:["\n",(0,r.jsx)(t.li,{children:"Configure and Run"}),"\n"]}),(0,r.jsxs)(t.p,{children:["Configure OpenTelemetry to send traces to Tracetest using environment variables. Run the Python app by using the ",(0,r.jsx)(t.code,{children:"opentelemetry-instrument"})," module."]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:'export OTEL_SERVICE_NAME=my-service-name\nexport OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf\nexport OTEL_EXPORTER_OTLP_ENDPOINT="http://<tracetest-agent>:4318"\n# export OTEL_EXPORTER_OTLP_HEADERS="x-tracetest-token=<token>"\n\nopentelemetry-instrument python app.py\n'})}),(0,r.jsx)(t.admonition,{title:"View a code sample",type:"note",children:(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"https://github.com/kubeshop/tracetest/tree/main/examples/getting-started/python",children:"Visit the example in GitHub, here."})})})]}),(0,r.jsxs)(i.A,{value:"go",label:"Go",children:[(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"Install Dependencies"}),"\n"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",metastring:'title="Terminal"',children:"go get \\\n  github.com/gorilla/mux v1.8.1 \\\n  go.opentelemetry.io/contrib/instrumentation/github.com/gorilla/mux/otelmux v0.56.0 \\\n  go.opentelemetry.io/otel v1.31.0 \\\n  go.opentelemetry.io/otel/exporters/otlp/otlptrace v1.31.0 \\\n  go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracehttp v1.31.0 \\\n  go.opentelemetry.io/otel/sdk v1.31.0 \\\n  go.opentelemetry.io/otel/trace v1.31.0\n"})}),(0,r.jsxs)(t.ol,{start:"2",children:["\n",(0,r.jsx)(t.li,{children:"Initialize Tracing"}),"\n"]}),(0,r.jsxs)(t.p,{children:["Update your ",(0,r.jsx)(t.code,{children:"main.go"})," file."]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-go",metastring:'title="main.go"',children:'package main\n\nimport (\n\t"context"\n\t"fmt"\n\t"log"\n\t"net/http"\n\t"os"\n\n\t"github.com/gorilla/mux"\n\t"go.opentelemetry.io/contrib/instrumentation/github.com/gorilla/mux/otelmux"\n\t"go.opentelemetry.io/otel"\n\t"go.opentelemetry.io/otel/attribute"\n\t"go.opentelemetry.io/otel/exporters/otlp/otlptrace"\n\t"go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracehttp"\n\t"go.opentelemetry.io/otel/propagation"\n\t"go.opentelemetry.io/otel/sdk/resource"\n\tsdktrace "go.opentelemetry.io/otel/sdk/trace"\n\tsemconv "go.opentelemetry.io/otel/semconv/v1.26.0"\n\t"go.opentelemetry.io/otel/trace"\n)\n\nvar svcName = os.Getenv("OTEL_SERVICE_NAME")\nvar tracer trace.Tracer\n\nfunc newExporter(ctx context.Context) (sdktrace.SpanExporter, error) {\n\totlpTraceExporter, err := otlptrace.New(ctx, otlptracehttp.NewClient())\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\treturn otlpTraceExporter, nil\n}\n\nfunc newTraceProvider(exp sdktrace.SpanExporter) *sdktrace.TracerProvider {\n\t// Ensure default SDK resources and the required service name are set.\n\tr, err := resource.Merge(\n\t\tresource.Default(),\n\t\tresource.NewWithAttributes(\n\t\t\tsemconv.SchemaURL,\n\t\t\tsemconv.ServiceNameKey.String(svcName),\n\t\t),\n\t)\n\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\ttp := sdktrace.NewTracerProvider(\n\t\tsdktrace.WithBatcher(exp),\n\t\tsdktrace.WithResource(r),\n\t)\n\n\totel.SetTextMapPropagator(\n\t\tpropagation.NewCompositeTextMapPropagator(\n\t\t\tpropagation.TraceContext{},\n\t\t\tpropagation.Baggage{},\n\t\t),\n\t)\n\n\treturn tp\n}\n\nfunc homePage(w http.ResponseWriter, r *http.Request) {\n\t_, span := tracer.Start(r.Context(), "Homepage")\n\tdefer span.End()\n\n\tspan.SetAttributes(\n\t\tattribute.Bool("home.endpoint.hit", true),\n\t)\n\n\tfmt.Fprintf(w, "Welcome to the HomePage!")\n\tfmt.Println("Endpoint Hit: homePage")\n}\n\nfunc main() {\n\tctx := context.Background()\n\n\texp, err := newExporter(ctx)\n\tif err != nil {\n\t\tlog.Fatalf("failed to initialize exporter: %v", err)\n\t}\n\n\t// Create a new tracer provider with a batch span processor and the given exporter.\n\ttp := newTraceProvider(exp)\n\n\t// Handle shutdown properly so nothing leaks.\n\tdefer func() { _ = tp.Shutdown(ctx) }()\n\n\totel.SetTracerProvider(tp)\n\n\t// Finally, set the tracer that can be used for this package.\n\ttracer = tp.Tracer(svcName)\n\n\tr := mux.NewRouter()\n\tr.Use(otelmux.Middleware(svcName))\n\tr.HandleFunc("/", homePage)\n\thttp.Handle("/", r)\n\n\tfmt.Println("Server Started at http://localhost:8080")\n\tlog.Fatal(http.ListenAndServe(":8080", nil))\n}\n'})}),(0,r.jsxs)(t.ol,{start:"3",children:["\n",(0,r.jsx)(t.li,{children:"Configure and Run"}),"\n"]}),(0,r.jsx)(t.p,{children:"Configure OpenTelemetry to send traces to Tracetest using environment variables. Run the Go app by exporting environment variables."}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",metastring:'title="Terminal"',children:'export OTEL_SERVICE_NAME=my-service-name\nexport OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf\nexport OTEL_EXPORTER_OTLP_ENDPOINT="http://<tracetest-agent>:4318"\n# export OTEL_EXPORTER_OTLP_HEADERS="x-tracetest-token=<token>"\n\ngo run .\n'})}),(0,r.jsx)(t.admonition,{title:"View a code sample",type:"note",children:(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"https://github.com/kubeshop/tracetest/tree/main/examples/getting-started/go",children:"Visit the example in GitHub, here."})})})]}),(0,r.jsxs)(i.A,{value:"java",label:"Java",children:[(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"Download OpenTelemetry Java Agent"}),"\n"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",metastring:'title="Terminal"',children:"curl -L -O https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent.jar\n"})}),(0,r.jsxs)(t.ol,{start:"2",children:["\n",(0,r.jsx)(t.li,{children:"Run with Jar and Include the OpenTelemetry Java Agent"}),"\n"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:'export OTEL_SERVICE_NAME=my-service-name\nexport OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf\nexport OTEL_EXPORTER_OTLP_ENDPOINT="http://<tracetest-agent>:4318"\n# export OTEL_EXPORTER_OTLP_HEADERS="x-token=<token>"\n\njava -javaagent:opentelemetry-javaagent.jar -jar /path/to/app.jar\n'})}),(0,r.jsx)(t.admonition,{title:"View a code sample",type:"note",children:(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"https://github.com/kubeshop/tracetest/tree/main/examples/getting-started/java",children:"Visit the example in GitHub, here."})})})]}),(0,r.jsxs)(i.A,{value:"dotnet",label:".NET",children:[(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"Add Dependencies"}),"\n"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",metastring:'title="Terminal"',children:"dotnet add package OpenTelemetry\ndotnet add package OpenTelemetry.Extensions.Hosting\ndotnet add package OpenTelemetry.Exporter.OpenTelemetryProtocol\ndotnet add package OpenTelemetry.Instrumentation.AspNetCore\ndotnet add package OpenTelemetry.Instrumentation.Http\n"})}),(0,r.jsxs)(t.ol,{start:"2",children:["\n",(0,r.jsx)(t.li,{children:"Initialize Tracing"}),"\n"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",metastring:'title="Program.cs"',children:"// Import OpenTelemetry SDK\nusing OpenTelemetry.Trace;\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services.AddControllers();\n// Configure OpenTelemetry Tracing\nbuilder.Services.AddOpenTelemetry().WithTracing(builder =>\n{\n  builder\n      // Configure ASP.NET Core Instrumentation\n      .AddAspNetCoreInstrumentation()\n      // Configure HTTP Client Instrumentation\n      .AddHttpClientInstrumentation()\n      // Configure OpenTelemetry Protocol (OTLP) Exporter\n      .AddOtlpExporter();\n});\n"})}),(0,r.jsxs)(t.ol,{start:"3",children:["\n",(0,r.jsx)(t.li,{children:"Configure and Run"}),"\n"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",metastring:'title="Terminal"',children:'export OTEL_SERVICE_NAME=my-service-name\nexport OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf\nexport OTEL_EXPORTER_OTLP_ENDPOINT="http://<tracetest-agent>:4318"\n# export OTEL_EXPORTER_OTLP_HEADERS="x-tracetest-token=<token>"\n\ndotnet run\n'})}),(0,r.jsx)(t.admonition,{title:"View a code sample",type:"note",children:(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"https://github.com/kubeshop/tracetest/tree/main/examples/getting-started/dotnet",children:"Visit the example in GitHub, here."})})})]}),(0,r.jsxs)(i.A,{value:"ruby",label:"Ruby",children:[(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"Install Dependencies"}),"\n"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",metastring:'title="Terminal"',children:"gem install opentelemetry-sdk\n            opentelemetry-exporter-otlp\n            opentelemetry-instrumentation-all\n"})}),(0,r.jsxs)(t.ol,{start:"2",children:["\n",(0,r.jsx)(t.li,{children:"Initialize Tracing"}),"\n"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ruby",metastring:'title="config/initializers/opentelemetry.rb"',children:"require 'opentelemetry/sdk'\nrequire 'opentelemetry/exporter/otlp'\nrequire 'opentelemetry/instrumentation/all'\n\nOpenTelemetry::SDK.configure do |c|\n    c.use_all() # enables all instrumentation!\nend\n"})}),(0,r.jsxs)(t.ol,{start:"3",children:["\n",(0,r.jsx)(t.li,{children:"Configure and Run"}),"\n"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",metastring:'title="Terminal"',children:'export OTEL_SERVICE_NAME=my-service-name\nexport OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf\nexport OTEL_EXPORTER_OTLP_ENDPOINT="http://<tracetest-agent>:4318"\n# export OTEL_EXPORTER_OTLP_HEADERS="x-tracetest-token=<token>"\n\nrails server -p 8080\n'})}),(0,r.jsx)(t.admonition,{title:"View a code sample",type:"note",children:(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"https://github.com/kubeshop/tracetest/tree/main/examples/getting-started/ruby",children:"Visit the example in GitHub, here."})})})]}),(0,r.jsxs)(i.A,{value:"browser",label:"Browser",children:[(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"Install the Tracetest Web SDK"}),"\n"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",metastring:'title="Terminal"',children:"npm i @tracetest/opentelemetry-web\n"})}),(0,r.jsxs)(t.ol,{start:"2",children:["\n",(0,r.jsx)(t.li,{children:"Initialize Tracing"}),"\n"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",metastring:'title="instrumentation.js"',children:'import TracetestWebSDK from "@tracetest/opentelemetry-web";\n\nconst sdk = new TracetestWebSDK({\n  serviceName: "browser-app",\n  endpoint: "http://<tracetest-agent>:4318/v1/traces",\n});\n\nsdk.start();\n'})}),(0,r.jsxs)(t.p,{children:["Load the ",(0,r.jsx)(t.code,{children:"instrumentation.js"})," at the top of your browser app's header or ",(0,r.jsx)(t.code,{children:"index.js"})," entrypoint file."]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",metastring:'title="index.js"',children:'import "./instrumentation";\n\n// rest of the app\'s entrypoint code\n'})}),(0,r.jsx)(t.admonition,{title:"View a code sample",type:"note",children:(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"https://github.com/kubeshop/tracetest/tree/main/examples/getting-started/browser",children:"Visit the example in GitHub, here."})})})]}),(0,r.jsxs)(i.A,{value:"docker",label:"Docker",children:[(0,r.jsxs)(t.p,{children:["You can configure ",(0,r.jsx)(t.a,{href:"https://grafana.com/oss/beyla-ebpf/",children:"Grafana Beyla"})," to auto-instrument Docker services and export traces to Tracetest."]}),(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:["Add Beyla to your ",(0,r.jsx)(t.code,{children:"docker-compose.yaml"})]}),"\n"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yaml",metastring:'title="docker-compose.yaml"',children:'services:\n  autoinstrument:\n    image: grafana/beyla:latest\n    privileged: true\n    environment:\n      OTEL_EXPORTER_OTLP_ENDPOINT: "http://<tracetest-agent>:4317"\n      # OTEL_EXPORTER_OTLP_HEADERS: "x-tracetest-token:<token>"\n      BEYLA_OPEN_PORT: "3000,8080" # Beyla will autoinstrument services on these ports\n      BEYLA_TRACE_PRINTER: "text"\n\n# ...\n'})}),(0,r.jsxs)(t.ol,{start:"2",children:["\n",(0,r.jsxs)(t.li,{children:["Add ",(0,r.jsx)(t.code,{children:"pid: service:autoinstrument"})," to services in ",(0,r.jsx)(t.code,{children:"docker-compose.yaml"})]}),"\n"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yaml",metastring:'title="docker-compose.yaml"',children:'services:\n  # ...\n\n  service1:\n    pid: service:autoinstrument # Add this line for Beyla to know what to instrument\n    build: ./service1\n    ports:\n      - "3000:3000"\n\n  service2:\n    pid: service:autoinstrument # Add this line for Beyla to know what to instrument\n    build: ./service2\n    ports:\n      - "8080:8080"\n'})}),(0,r.jsxs)(t.ol,{start:"3",children:["\n",(0,r.jsx)(t.li,{children:"Run Docker Compose"}),"\n"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",metastring:'title="Terminal"',children:"docker compose up\n"})}),(0,r.jsx)(t.p,{children:"This will automatically instrument your Docker Compose services with Beyla using eBPF and send the traces to Tracetest."})]}),(0,r.jsxs)(i.A,{value:"opentelemetry-operator",label:"Kubernetes",default:!0,children:[(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:["Install ",(0,r.jsx)(t.a,{href:"https://cert-manager.io/",children:(0,r.jsx)(t.code,{children:"cert-manager"})})]}),"\n"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.11.0/cert-manager.yaml\n"})}),(0,r.jsxs)(t.ol,{start:"2",children:["\n",(0,r.jsxs)(t.li,{children:["Install the ",(0,r.jsx)(t.a,{href:"https://opentelemetry.io/docs/k8s-operator/",children:"OpenTelemetry Operator"})," to inject automatic instrumentation in Kubernetes"]}),"\n"]}),(0,r.jsx)(t.p,{children:"Traces will be generated and collected automatically."}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"kubectl apply -f https://github.com/open-telemetry/opentelemetry-operator/releases/latest/download/opentelemetry-operator.yaml\n"})}),(0,r.jsxs)(t.ol,{start:"3",children:["\n",(0,r.jsxs)(t.li,{children:["Create a file named ",(0,r.jsx)(t.code,{children:"otel-collector.yaml"})," for the OpenTelemetry config"]}),"\n"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yaml",metastring:'title="otel-collector.yaml"',children:'apiVersion: opentelemetry.io/v1alpha1\nkind: Instrumentation\nmetadata:\nname: otel-instrumentation\nspec:\nexporter:\n    endpoint: http://otel-collector:4317\npropagators:\n    - tracecontext\n    - baggage\n    - b3\n\n---\napiVersion: opentelemetry.io/v1alpha1\nkind: OpenTelemetryCollector\nmetadata:\nname: otel\nspec:\nconfig: |\n  receivers:\n    otlp:\n      protocols:\n        grpc:\n        http:\n  processors:\n    batch:\n        timeout: 100ms\n  exporters:\n    otlp/tracetest:\n      endpoint: <tracetest-agent>:4317\n      # headers:\n      #   "x-tracetest-token": "<token>"\n      tls:\n        insecure: true\n  service:\n    pipelines:\n        traces:\n            receivers: [otlp]\n            processors: [batch]\n            exporters: [otlp/tracetest]\n'})}),(0,r.jsx)(t.p,{children:"You configure 2 separate things:"}),(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"The Instrumentation, which is an init-container that will run on any pod you explictly mark (see step 5)."}),"\n",(0,r.jsx)(t.li,{children:"The OpenTelemetry collector, which will collect the traces from the init-container and send them to Tracetest."}),"\n"]}),(0,r.jsxs)(t.ol,{start:"4",children:["\n",(0,r.jsxs)(t.li,{children:["Apply the ",(0,r.jsx)(t.code,{children:"otel-collector.yaml"})," config file"]}),"\n"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",metastring:'title="Terminal"',children:"kubectl apply -f otel-collector.yaml\n"})}),(0,r.jsxs)(t.ol,{start:"5",children:["\n",(0,r.jsx)(t.li,{children:"Update any service you want to instrument"}),"\n"]}),(0,r.jsxs)(t.p,{children:["Use the ",(0,r.jsx)(t.a,{href:"https://opentelemetry.io/docs/k8s-operator/automatic/",children:"following annotations as seen in the OpenTelemetry docs"}),":"]}),(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:".NET"}),": ",(0,r.jsx)(t.code,{children:'instrumentation.opentelemetry.io/inject-dotnet: "true"'})]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Java"}),": ",(0,r.jsx)(t.code,{children:'instrumentation.opentelemetry.io/inject-java: "true"'})]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Node.js"}),": ",(0,r.jsx)(t.code,{children:'instrumentation.opentelemetry.io/inject-nodejs: "true"'})]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Python"}),": ",(0,r.jsx)(t.code,{children:'instrumentation.opentelemetry.io/inject-python: "true"'})]}),"\n"]}),(0,r.jsx)(t.admonition,{type:"note",children:(0,r.jsxs)(t.p,{children:["Add an environment variable named ",(0,r.jsx)(t.code,{children:"SERVICE_NAME"})," to your service so that you can\nlater identify it in the tests."]})}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yaml",children:"apiVersion: apps/v1\nkind: Deployment\nmetadata:\nname: your-service\nspec:\nreplicas: 1\ntemplate:\n  annotations:\n    instrumentation.opentelemetry.io/inject-nodejs: 'true'\nspec:\n    containers:\n      var:\n        - name: SERVICE_NAME\n          value: 'your-service'\n"})}),(0,r.jsx)(t.p,{children:"This will automatically instrument your service with OpenTelemetry and send the traces to the OpenTelemetry collector."})]}),(0,r.jsxs)(i.A,{value:"otelcol",label:"OTel Collector",children:[(0,r.jsxs)(t.p,{children:["You can configure OpenTelemetry SDKs to export traces to an ",(0,r.jsx)(t.a,{href:"https://opentelemetry.io/docs/collector/",children:"OpenTelemetry Collector"})," first. Then, configure an exporter and service pipeline to forward traces to Tracetest."]}),(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"Configure Exporters"}),"\n"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yaml",children:'exporters:\n  # This is the exporter that will send traces to Tracetest\n  otlp/tracetest:\n    endpoint: http://<tracetest-agent>:4317\n    # headers:\n    #   "x-tracetest-token": "<token>"\n    tls:\n      insecure: true\n'})}),(0,r.jsxs)(t.ol,{start:"2",children:["\n",(0,r.jsx)(t.li,{children:"Add a Service Pipeline"}),"\n"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yaml",children:"service:\n  pipelines:\n    # You most likely have a traces pipeline. You don't have to change it.\n    # Add this one to your configuration. Make sure to not have two\n    # pipelines with the same name.\n    traces/tracetest:\n      receivers: [otlp] # your receiver\n      processors: [batch]\n      exporters: [otlp/tracetest] # your exporter pointing to the Tracetest OTLP endpoint\n"})})]})]}),"\n",(0,r.jsx)(t.admonition,{title:"Need more detailed guidance?",type:"note",children:(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"/configuration/connecting-to-data-stores/overview",children:"Refer to the Trace Ingestion docs, here."})})}),"\n",(0,r.jsx)(t.admonition,{title:"Don't have OpenTelemetry installed?",type:"tip",children:(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"/getting-started/no-otel",children:"Follow these instructions to install OpenTelemetry in 5 minutes without any code changes!"})})})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},7227:(e,t,n)=>{n.d(t,{A:()=>i});n(96540);var r=n(34164);const s={tabItem:"tabItem_Ymn6"};var a=n(74848);function i(e){let{children:t,hidden:n,className:i}=e;return(0,a.jsx)("div",{role:"tabpanel",className:(0,r.A)(s.tabItem,i),hidden:n,children:t})}},49489:(e,t,n)=>{n.d(t,{A:()=>f});var r=n(96540),s=n(34164),a=n(24245),i=n(56347),o=n(36494),l=n(62814),c=n(45167),d=n(81269);function p(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??function(e){return p(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:s}}=e;return{value:t,label:n,attributes:r,default:s}}))}(n);return function(e){const t=(0,c.X)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function u(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:n}=e;const s=(0,i.W6)(),a=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,l.aZ)(a),(0,r.useCallback)((e=>{if(!a)return;const t=new URLSearchParams(s.location.search);t.set(a,e),s.replace({...s.location,search:t.toString()})}),[a,s])]}function g(e){const{defaultValue:t,queryString:n=!1,groupId:s}=e,a=h(e),[i,l]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!u({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:a}))),[c,p]=m({queryString:n,groupId:s}),[g,x]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[s,a]=(0,d.Dv)(n);return[s,(0,r.useCallback)((e=>{n&&a.set(e)}),[n,a])]}({groupId:s}),j=(()=>{const e=c??g;return u({value:e,tabValues:a})?e:null})();(0,o.A)((()=>{j&&l(j)}),[j]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!u({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);l(e),p(e),x(e)}),[p,x,a]),tabValues:a}}var x=n(11062);const j={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=n(74848);function T(e){let{className:t,block:n,selectedValue:r,selectValue:i,tabValues:o}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,a.a_)(),d=e=>{const t=e.currentTarget,n=l.indexOf(t),s=o[n].value;s!==r&&(c(t),i(s))},p=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=l.indexOf(e.currentTarget)+1;t=l[n]??l[0];break}case"ArrowLeft":{const n=l.indexOf(e.currentTarget)-1;t=l[n]??l[l.length-1];break}}t?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":n},t),children:o.map((e=>{let{value:t,label:n,attributes:a}=e;return(0,b.jsx)("li",{role:"tab",tabIndex:r===t?0:-1,"aria-selected":r===t,ref:e=>l.push(e),onKeyDown:p,onClick:d,...a,className:(0,s.A)("tabs__item",j.tabItem,a?.className,{"tabs__item--active":r===t}),children:n??t},t)}))})}function y(e){let{lazy:t,children:n,selectedValue:s}=e;const a=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=a.find((e=>e.props.value===s));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:a.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==s})))})}function v(e){const t=g(e);return(0,b.jsxs)("div",{className:(0,s.A)("tabs-container",j.tabList),children:[(0,b.jsx)(T,{...e,...t}),(0,b.jsx)(y,{...e,...t})]})}function f(e){const t=(0,x.A)();return(0,b.jsx)(v,{...e,children:p(e.children)},String(t))}},92945:(e,t,n)=>{n.d(t,{A:()=>o});n(96540);var r=n(49489),s=n(7227),a=n(2250),i=n(74848);function o(){function e(e){let{event:t,installationPlatform:n}=e;window.dataLayer=window.dataLayer||[],window.dataLayer.push({installationPlatform:n,event:"installationPlatform"})}return(0,i.jsxs)(r.A,{groupId:"operating-systems",children:[(0,i.jsx)(s.A,{value:"mac",label:"MAC",default:!0,children:(0,i.jsx)("div",{onClick:()=>e({installationPlatform:"MacOS"}),children:(0,i.jsx)(a.A,{language:"bash",title:"Terminal",children:"brew install kubeshop/tracetest/tracetest"})})}),(0,i.jsx)(s.A,{value:"linux",label:"LINUX",children:(0,i.jsx)("div",{onClick:()=>e({installationPlatform:"Linux"}),children:(0,i.jsx)(a.A,{language:"bash",title:"Terminal",children:"curl -L https://raw.githubusercontent.com/kubeshop/tracetest/main/install-cli.sh | bash"})})}),(0,i.jsx)(s.A,{value:"win",label:"WINDOWS",children:(0,i.jsx)("div",{onClick:()=>e({installationPlatform:"Windows"}),children:(0,i.jsx)(a.A,{language:"bash",title:"Terminal",children:"choco source add --name=kubeshop_repo --source=https://chocolatey.kubeshop.io/chocolatey ; choco install tracetest"})})})]})}}}]);