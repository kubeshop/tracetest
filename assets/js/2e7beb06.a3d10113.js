"use strict";(self.webpackChunktracetest_docs=self.webpackChunktracetest_docs||[]).push([[5508],{70386:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var s=n(74848),a=n(28453);const i={id:"variable-sets",title:"Variable Sets",description:"Tracetest allows you to organize different environments configurations using global objects called Variable Sets.",keywords:["tracetest","trace-based testing","observability","distributed tracing","testing"],image:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1698686403/docs/Blog_Thumbnail_14_rsvkmo.jpg"},r=void 0,o={id:"concepts/variable-sets",title:"Variable Sets",description:"Tracetest allows you to organize different environments configurations using global objects called Variable Sets.",source:"@site/docs/concepts/variable-sets.mdx",sourceDirName:"concepts",slug:"/concepts/variable-sets",permalink:"/concepts/variable-sets",draft:!1,unlisted:!1,editUrl:"https://github.com/kubeshop/tracetest/blob/main/docs/docs/concepts/variable-sets.mdx",tags:[],version:"current",frontMatter:{id:"variable-sets",title:"Variable Sets",description:"Tracetest allows you to organize different environments configurations using global objects called Variable Sets.",keywords:["tracetest","trace-based testing","observability","distributed tracing","testing"],image:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1698686403/docs/Blog_Thumbnail_14_rsvkmo.jpg"},sidebar:"tutorialSidebar",previous:{title:"Assertions",permalink:"/concepts/assertions"},next:{title:"Ad-hoc Testing",permalink:"/concepts/ad-hoc-testing"}},c={},l=[{value:"Secrets Management",id:"secrets-management",level:2},{value:"How Variable Sets Work",id:"how-variable-sets-work",level:2}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",img:"img",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:"A common use case for tests is to assert the same behavior across multiple environments (dev, staging, and production, for example). To make sure all of these environments will have the same behavior, it is important that the tests executed against those environments test the same aspects."}),"\n",(0,s.jsxs)(t.p,{children:["To reduce the risks of diverging tests, Tracetest allows you to organize different environments configurations using global objects called ",(0,s.jsx)(t.strong,{children:"Variable Sets"}),"."]}),"\n",(0,s.jsx)(t.admonition,{type:"tip",children:(0,s.jsxs)(t.p,{children:["For details on creating and editing varaible sets in the CLI, please visit ",(0,s.jsx)(t.a,{href:"/cli/creating-variable-sets",children:"CLI Creating Variable Sets"}),"."]})}),"\n",(0,s.jsx)(t.admonition,{type:"tip",children:(0,s.jsxs)(t.p,{children:["For details on creating and editing varaible sets in the Web UI, please visit ",(0,s.jsx)(t.a,{href:"/web-ui/creating-variable-sets",children:"Web UI Creating Variable Sets"}),"."]})}),"\n",(0,s.jsx)(t.h2,{id:"secrets-management",children:"Secrets Management"}),"\n",(0,s.jsx)(t.admonition,{title:"Commercial Feature",type:"tip",children:(0,s.jsx)(t.p,{children:(0,s.jsx)(t.a,{href:"https://tracetest.io/pricing",children:"Secrets management feature is available only in Cloud-based Managed Tracetest & Enterprise Self-hosted Tracetest."})})}),"\n",(0,s.jsxs)(t.p,{children:["Variable Sets can accept secrets. A variable can be a ",(0,s.jsx)(t.code,{children:"secret"})," or a ",(0,s.jsx)(t.code,{children:"raw"})," variable in the Web UI and CLI."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Create Variable Set Values",src:n(74803).A+"",width:"1422",height:"630"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:"type: VariableSet\nspec:\n  id: test-1\n  name: Test 1\n  description: test\n  values:\n  - key: SOME_SECRET\n    value: my-precious\n    type: secret\n  - key: NO_SO_SECRET\n    value: aha!\n    type: raw\n"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sh",children:"tracetest apply variableset -f <variableset.yaml>\n"})}),"\n",(0,s.jsx)(t.h2,{id:"how-variable-sets-work",children:"How Variable Sets Work"}),"\n",(0,s.jsxs)(t.p,{children:["Variable sets are objects containing variables that can be referenced by tests. You can use a single test and provide the information on which environment object will be used to run the test. To illustrate this, consider an app that is deployed in three stages: ",(0,s.jsx)(t.code,{children:"dev"}),", ",(0,s.jsx)(t.code,{children:"staging"}),", and ",(0,s.jsx)(t.code,{children:"production"}),". We can execute the same test in all those environments, however, both ",(0,s.jsx)(t.code,{children:"URL"})," and ",(0,s.jsx)(t.code,{children:"credentials"})," change from environment to environment. To run the same test against the three deployments of the app, you can create three variable sets:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:"# dev.env\ntype: VariableSet\nspec:\n  name: dev.env\n  id: dev.env\n  values:\n    - key: URL\n      value: https://app-dev.com\n    - key: API_TOKEN\n      value: dev-key\n"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:"# staging.env\ntype: VariableSet\nspec:\n  name: staging.env\n  id: staging.env\n  values:\n    - key: URL\n      value: https://app-staging.com\n    - key: API_TOKEN\n      value: staging-key\n"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:"# production.env\ntype: VariableSet\nspec:\n  name: production.env\n  id: production.env\n  values:\n    - key: URL\n      value: https://app-prod.com\n    - key: API_TOKEN\n      value: prod-key\n"})}),"\n",(0,s.jsx)(t.p,{children:"Now consider the following test:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:'type: Test\nspecs:\n  name: Test user creation\n  trigger:\n    type: http\n    httpRequest:\n        url: "${var:URL}/api/users"\n        method: POST\n        body: \'{}\'\n        authentication:\n          type: bearer\n          bearer:\n            token: "${var:API_TOKEN}"\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Both ",(0,s.jsx)(t.code,{children:"var:URL"})," and ",(0,s.jsx)(t.code,{children:"var:API_TOKEN"})," would be replaced by the variables defined in the chosen variable set where the test will run. So, if the chosen variable set was ",(0,s.jsx)(t.code,{children:"dev.env"}),", its values would be replaced by ",(0,s.jsx)(t.code,{children:"https://app-dev.com"})," and ",(0,s.jsx)(t.code,{children:"dev-key"}),", respectively."]})]})}function p(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},74803:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/create-variable-set-values-7c057c6806a97861dbf551f34319b47c.png"},28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>o});var s=n(96540);const a={},i=s.createContext(a);function r(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);