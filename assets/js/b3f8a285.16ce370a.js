"use strict";(self.webpackChunktracetest_docs=self.webpackChunktracetest_docs||[]).push([[2736],{64991:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var o=n(74848),s=n(28453);const r={id:"on-prem-helm",title:"Install with Helm",hide_table_of_contents:!1,description:"Installation and deployment instructions for using Helm to deploy Enterprise self-hosted Tracetest and use the On-Prem Tracetest Control Plane / Dashboard.",keywords:["tracetest","trace-based testing","observability","distributed tracing","testing"],image:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1698686403/docs/Blog_Thumbnail_14_rsvkmo.jpg"},a=void 0,l={id:"install/on-prem-helm",title:"Install with Helm",description:"Installation and deployment instructions for using Helm to deploy Enterprise self-hosted Tracetest and use the On-Prem Tracetest Control Plane / Dashboard.",source:"@site/docs/install/on-prem-helm.mdx",sourceDirName:"install",slug:"/install/on-prem-helm",permalink:"/install/on-prem-helm",draft:!1,unlisted:!1,editUrl:"https://github.com/kubeshop/tracetest/blob/main/docs/docs/install/on-prem-helm.mdx",tags:[],version:"current",frontMatter:{id:"on-prem-helm",title:"Install with Helm",hide_table_of_contents:!1,description:"Installation and deployment instructions for using Helm to deploy Enterprise self-hosted Tracetest and use the On-Prem Tracetest Control Plane / Dashboard.",keywords:["tracetest","trace-based testing","observability","distributed tracing","testing"],image:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1698686403/docs/Blog_Thumbnail_14_rsvkmo.jpg"},sidebar:"tutorialSidebar",previous:{title:"Install with Helm in Kind (Simplified)",permalink:"/install/on-prem-helm-kind"},next:{title:"Install in GCP",permalink:"/install/gcp"}},i={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Install Tracetest On-Premises with Helm",id:"install-tracetest-on-premises-with-helm",level:2},{value:"Configuration",id:"configuration",level:2}];function d(e){const t={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components},{Details:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.p,{children:"Installation and deployment instructions for using Helm to deploy Enterprise self-hosted Tracetest and use the On-Prem Tracetest Control Plane/Dashboard."}),"\n",(0,o.jsx)(t.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"A running Kubernetes cluster."}),"\n",(0,o.jsxs)(t.li,{children:["A Tracetest license key. If you don't have one, you can request a trial license key ",(0,o.jsx)(t.a,{href:"https://tracetest.io/on-prem-installation",children:"here"}),"."]}),"\n",(0,o.jsxs)(t.li,{children:["Install ",(0,o.jsx)(t.a,{href:"https://kubernetes.io/docs/tasks/tools/#kubectl",children:(0,o.jsx)(t.code,{children:"kubectl"})}),"."]}),"\n",(0,o.jsxs)(t.li,{children:["Install ",(0,o.jsx)(t.a,{href:"https://helm.sh/",children:"Helm"}),"."]}),"\n"]}),"\n",(0,o.jsx)(t.h2,{id:"install-tracetest-on-premises-with-helm",children:"Install Tracetest On-Premises with Helm"}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsxs)(t.a,{href:"https://github.com/kubeshop/tracetest-cloud-charts/tree/main/charts/tracetest-onprem",children:["main chart for this repository is called ",(0,o.jsx)(t.code,{children:"tracetest-onprem"})]})," and contains all components necessary to run Enterprise self-hosted Tracetest on-premises in a cluster that fits the ",(0,o.jsx)(t.a,{href:"/install/deployment-architecture",children:"deployment architecture"}),"."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-js",metastring:'title="Terminal"',children:"helm repo add tracetestcloud https://kubeshop.github.io/tracetest-cloud-charts --force-update  && \\\n\nhelm install <release-name> -n <namespace> tracetestcloud/tracetest-onprem \\\n  --set global.licenseKey=<YOUR_TRACETEST_LICENSE> \\\n  --values values.yaml\n"})}),"\n",(0,o.jsx)(t.h2,{id:"configuration",children:"Configuration"}),"\n",(0,o.jsxs)(t.p,{children:["Configure the Helm installation with the ",(0,o.jsx)(t.code,{children:"values.yaml"})," file. View the ",(0,o.jsxs)(t.a,{href:"https://github.com/kubeshop/tracetest-cloud-charts/blob/main/charts/tracetest-onprem/values.yaml",children:[(0,o.jsx)(t.code,{children:"values.yaml"})," default values, here."]})]}),"\n",(0,o.jsxs)(n,{children:[(0,o.jsx)("summary",{children:(0,o.jsxs)("b",{children:["Click to expand the ",(0,o.jsx)(t.code,{children:"values.yaml"})," default values."]})}),(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-yaml",children:'global:\n  # License Key provided by Tracetest team to run this instance. Default: `""`\n  licenseKey: ""\n  \n  # This value defines if clients should expect a valid SSL certificate from the server. If you are using a self-signed certificate, you should set this to false. Default: `true`\n  validCertificate: true\n  \n  # Pull secrets name used to fetch images from a private registry if needed. If set empty, this chart will use the public registry. For more details see: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/ Default: `""`\n  imagePullSecret: ""\n  # Registry name used to fetch images. If set empty, this chart will use the public registry. For more details see: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/ Default: `""`\n  tracetestImageRegistry: ""\n\n  sso:\n    google:\n      # Google OAuth2 client ID. You can get these from the Google Developer Console. Default: `""`\n      clientID: "" \n      # Google OAuth2 secret. You can get these from the Google Developer Console. Default: `""`\n      clientSecret: ""\n    github:\n      # Github OAuth2 client ID. You can get these from the Github Developer Console. Default: `"example client ID"`\n      clientID: "Ov23li8WMwQlvjFNNiCy"\n      # Github OAuth2 secret. You can get these from the Github Developer Console. Default: `"example client secret"`\n      clientSecret: "e317c15e43909757d1e75e78373d130c374f6601"\n\n  # If you don\'t want to use the default NATS server, you can specify your own NATS server here\n  # natsEndpointOverride: "://nats:4222"\n\n  postgresql:\n    auth:\n      # Postgres host address. Default: `""`\n      host: ""\n      # Postgres username that Tracetest APIs will use. Default: `""`\n      username: ""\n      # Postgres password that Tracetest APIs will use. Default: `""`\n      password: ""\n      # Postgres database name for Tracetest OnPrem. Default: `"tracetest"`\n      database: "tracetest"\n      # Postgres port. Default: `"5432"`\n      port: "5432"\n    \n  mongodb:\n    auth:\n      # MongoDB connection protocol. Default: `"mongodb"`\n      protocol: "mongodb"\n      # MongoDB host address. Default: `""`\n      host: ""\n      # MongoDB username that Tracetest APIs will use. Default: `""`\n      username: ""\n      # MongoDB password that Tracetest APIs will use. Default: `""`\n      password: ""\n      # MongoDB database name for Tracetest OnPrem. Default: `"tracetest"`\n      database: ""\n      # MongoDB connection options as a key-value object. Default: `"{}"`\n      options: {}\n\n  \n  # URLs section with addresses used by clients to connect to the Tracetest OnPrem instance\n  urls:\n    protocol: &protocol "https"\n    port: &port "30000"\n    rootDomain: &rootDomain "tracetest.localdev"\n    cookieDomain: *rootDomain\n    \n    web:\n      protocol: *protocol\n      hostname: *rootDomain\n      port: *port\n      path: "/"\n    \n    api:\n      protocol: *protocol\n      hostname: *rootDomain\n      port: *port\n      path: "/api"\n\n    auth:\n      protocol: *protocol\n      hostname: *rootDomain\n      port: *port\n      path: "/auth"\n    \n    agents:\n      domain: *rootDomain\n      port: *port\n    \n    controlPlane:\n      protocol: *protocol\n      hostname: *rootDomain\n      port: *port\n      path: "/"\n\nnats:\n  enabled: true\n  \n  config:\n    jetstream:\n      enabled: true\n      fileStore:\n        enabled: true\n        dir: /data\n        pvc:\n          enabled: true\n          size: 10Gi\n      memoryStore:\n          enabled: true\n          maxSize: 1Gi\n\n    natsBox:\n      container:\n        env:\n          # different from k8s units, suffix must be B, KiB, MiB, GiB, or TiB\n          # should be ~90% of memory limit\n          GOMEMLIMIT: 900MiB\n        merge:\n          # recommended limit is at least 2 CPU cores and 8Gi Memory for production JetStream clusters\n          resources:\n            requests:\n              cpu: 250m # one entire CPU\n              memory: 1Gi\n            limits:\n              memory: 1Gi\n'})})]}),"\n",(0,o.jsxs)(n,{children:[(0,o.jsx)("summary",{children:(0,o.jsxs)("b",{children:["Click to expand the ",(0,o.jsx)(t.code,{children:"values.yaml"})," with SSO and a database."]})}),(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-yaml",children:'global:\n  validCertificate: false # defines if the certificate is generated by an external issuer of if the self-signed issuer is used\n\n  urls:\n    protocol: &protocol "https"\n    port: &port "30000" \n    rootDomain: &rootDomain "tracetest.mydomain.com" # DNS that the users will use to access the Tracetest\n    cookieDomain: *rootDomain\n    \n    web:\n      protocol: *protocol\n      hostname: *rootDomain\n      port: *port\n    \n    api:\n      protocol: *protocol\n      hostname: *rootDomain\n      port: *port\n\n    auth:\n      protocol: *protocol\n      hostname: *rootDomain\n      port: *port\n    \n    agents:\n      domain: *rootDomain\n      port: *port\n    \n    controlPlane:\n      protocol: *protocol\n      hostname: *rootDomain\n      port: *port\n\n  postgresql:\n    auth:\n      host: "path.to.my.postgres.instance"\n      username: "some-pg-user"\n      password: "some-pg-password"\n      database: "tracetest"\n\n  mongodb:\n    auth:\n      protocol: "mongodb"\n      host: "path.to.my.mongodb.instance"\n      username: "some-mongo-user"\n      password: "some-mongo-password"\n      database: "tracetest"\n      options:\n        retryWrites: "true"\n        authSource: admin\n'})})]})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>l});var o=n(96540);const s={},r=o.createContext(s);function a(e){const t=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),o.createElement(r.Provider,{value:t},e.children)}}}]);