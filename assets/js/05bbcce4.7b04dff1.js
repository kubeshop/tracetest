"use strict";(self.webpackChunktracetest_docs=self.webpackChunktracetest_docs||[]).push([[2915],{91691:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var r=n(74848),s=n(28453);const o={id:"running-tracetest-with-grafana-tempo-pokeshop",title:"Pokeshop and Grafana Tempo",description:"Quick start on how to configure the Pokeshop Demo app with OpenTelemetry traces, Grafana Tempo as a trace data store, and Tracetest for enhancing your E2E and integration tests with trace-based testing.",hide_table_of_contents:!1,keywords:["tracetest","trace-based testing","observability","distributed tracing","testing","grafana tempo","grafana traces","grafana observability","opentelemetry"],image:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1698686403/docs/Blog_Thumbnail_14_rsvkmo.jpg"},a=void 0,i={id:"examples-tutorials/recipes/running-tracetest-with-grafana-tempo-pokeshop",title:"Pokeshop and Grafana Tempo",description:"Quick start on how to configure the Pokeshop Demo app with OpenTelemetry traces, Grafana Tempo as a trace data store, and Tracetest for enhancing your E2E and integration tests with trace-based testing.",source:"@site/docs/examples-tutorials/recipes/running-tracetest-with-grafana-tempo-pokeshop.mdx",sourceDirName:"examples-tutorials/recipes",slug:"/examples-tutorials/recipes/running-tracetest-with-grafana-tempo-pokeshop",permalink:"/examples-tutorials/recipes/running-tracetest-with-grafana-tempo-pokeshop",draft:!1,unlisted:!1,editUrl:"https://github.com/kubeshop/tracetest/blob/main/docs/docs/examples-tutorials/recipes/running-tracetest-with-grafana-tempo-pokeshop.mdx",tags:[],version:"current",frontMatter:{id:"running-tracetest-with-grafana-tempo-pokeshop",title:"Pokeshop and Grafana Tempo",description:"Quick start on how to configure the Pokeshop Demo app with OpenTelemetry traces, Grafana Tempo as a trace data store, and Tracetest for enhancing your E2E and integration tests with trace-based testing.",hide_table_of_contents:!1,keywords:["tracetest","trace-based testing","observability","distributed tracing","testing","grafana tempo","grafana traces","grafana observability","opentelemetry"],image:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1698686403/docs/Blog_Thumbnail_14_rsvkmo.jpg"},sidebar:"guidesSidebar",previous:{title:"Node.js and Grafana Tempo",permalink:"/examples-tutorials/recipes/running-tracetest-with-tempo"},next:{title:"Node.js and Grafana Cloud Tempo",permalink:"/examples-tutorials/recipes/running-tracetest-with-grafana-cloud-tempo"}},c={},l=[{value:"Pokeshop API with Grafana Tempo, OpenTelemetry and Tracetest",id:"pokeshop-api-with-grafana-tempo-opentelemetry-and-tracetest",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Run This Quckstart Example",id:"run-this-quckstart-example",level:2},{value:"Project Structure",id:"project-structure",level:2},{value:"1. Tracetest",id:"1-tracetest",level:3},{value:"2. Grafana Tempo",id:"2-grafana-tempo",level:3},{value:"Docker Compose Network",id:"docker-compose-network",level:3},{value:"Pokeshop API",id:"pokeshop-api",level:2},{value:"Tracetest",id:"tracetest",level:2},{value:"Grafana Tempo",id:"grafana-tempo",level:2},{value:"Run the Pokeshop API, Grafana and Tracetest",id:"run-the-pokeshop-api-grafana-and-tracetest",level:2},{value:"Trace-Based Tests",id:"trace-based-tests",level:2},{value:"View Trace Spans Over Time in Grafana",id:"view-trace-spans-over-time-in-grafana",level:2},{value:"Learn More",id:"learn-more",level:2}];function p(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.admonition,{type:"note",children:(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"https://github.com/kubeshop/tracetest/tree/main/examples/tracetest-grafana-tempo-pokeshop",children:"Check out the source code on GitHub here."})})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.a,{href:"https://tracetest.io/",children:"Tracetest"})," is a testing tool based on ",(0,r.jsx)(t.a,{href:"https://opentelemetry.io/",children:"OpenTelemetry"})," that allows you to test your distributed application. It allows you to use data from distributed traces generated by OpenTelemetry to validate and assert if your application has the desired behavior defined by your test definitions."]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.a,{href:"https://grafana.com/oss/tempo/",children:"Grafana Tempo"})," is an open-source, high-scale distributed tracing data store. It utilizes object storage to minimize costs, allowing you to store more information at a lower cost. It is deeply integrated with Grafana, Prometheus, and Loki. Grafana Tempo is also available as a paid hosted service at Grafana Cloud."]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.a,{href:"https://docs.tracetest.io/live-examples/pokeshop/overview",children:"Pokeshop API"})," is a testing ground, the team at Tracetest has implemented a sample instrumented API around the ",(0,r.jsx)(t.a,{href:"https://pokeapi.co/",children:"PokeAPI"}),"."]}),"\n",(0,r.jsx)(t.h2,{id:"pokeshop-api-with-grafana-tempo-opentelemetry-and-tracetest",children:"Pokeshop API with Grafana Tempo, OpenTelemetry and Tracetest"}),"\n",(0,r.jsx)(t.p,{children:"This is a simple quick start guide on how to configure a fully instrumented API to be used with Tracetest for enhancing your E2E and integration tests with trace-based testing. The infrastructure will use Grafana Tempo as the trace data store and the Pokeshop API to generate the telemetry data."}),"\n",(0,r.jsx)(t.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Tracetest Account"}),":"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["Sign up to ",(0,r.jsx)(t.a,{href:"https://app.tracetest.io",children:(0,r.jsx)(t.code,{children:"app.tracetest.io"})})," or follow the ",(0,r.jsx)(t.a,{href:"/getting-started/overview",children:"get started"})," docs."]}),"\n",(0,r.jsxs)(t.li,{children:["Have access to the environment's ",(0,r.jsx)(t.a,{href:"https://app.tracetest.io/retrieve-token",children:"agent API key"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Docker"}),": Have ",(0,r.jsx)(t.a,{href:"https://docs.docker.com/get-docker/",children:"Docker"})," and ",(0,r.jsx)(t.a,{href:"https://docs.docker.com/compose/install/",children:"Docker Compose"})," installed on your machine."]}),"\n",(0,r.jsx)(t.h2,{id:"run-this-quckstart-example",children:"Run This Quckstart Example"}),"\n",(0,r.jsx)(t.p,{children:"The example below is provided as part of the Tracetest project. You can download and run the example by following these steps:"}),"\n",(0,r.jsx)(t.p,{children:"Clone the Tracetest project and go to the Grafana Tempo Node.js Quickstart:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"git clone https://github.com/kubeshop/tracetest\ncd tracetest/examples/tracetest-grafana-tempo-pokeshop\n"})}),"\n",(0,r.jsx)(t.p,{children:"Follow these instructions to run the quick start:"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:["Copy the ",(0,r.jsx)(t.code,{children:".env.template"})," file to ",(0,r.jsx)(t.code,{children:".env"}),"."]}),"\n",(0,r.jsxs)(t.li,{children:["Fill out the ",(0,r.jsx)(t.a,{href:"https://app.tracetest.io/retrieve-token",children:"TRACETEST_TOKEN and ENVIRONMENT_ID"})," details by editing your ",(0,r.jsx)(t.code,{children:".env"})," file."]}),"\n",(0,r.jsxs)(t.li,{children:["Run ",(0,r.jsx)(t.code,{children:"docker compose run tracetest-run"}),"."]}),"\n",(0,r.jsx)(t.li,{children:"Follow the links in the output to view the test results."}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"Follow the sections below for a detailed breakdown of what the example you just ran did and how it works."}),"\n",(0,r.jsx)(t.h2,{id:"project-structure",children:"Project Structure"}),"\n",(0,r.jsx)(t.p,{children:"The project is built with Docker Compose."}),"\n",(0,r.jsx)(t.h3,{id:"1-tracetest",children:"1. Tracetest"}),"\n",(0,r.jsxs)(t.p,{children:["The project contains ",(0,r.jsx)(t.a,{href:"/getting-started/install-agent",children:"Tracetest Agent"}),", ",(0,r.jsx)(t.a,{href:"https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main",children:"OpenTelemetry Collector"}),", and a Node.js app."]}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"docker-compose.yaml"})," file in the root directory of the quick start runs the Node.js app and the ",(0,r.jsx)(t.a,{href:"/concepts/agent",children:"Tracetest Agent"})," setup."]}),"\n",(0,r.jsxs)(t.p,{children:["Configure the ",(0,r.jsx)(t.code,{children:".env"})," as shown below."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:'# Get the required information here: https://app.tracetest.io/retrieve-token\n\nTRACETEST_TOKEN="<YOUR_TRACETEST_TOKEN>"\nTRACETEST_ENVIRONMENT_ID="<YOUR_ENV_ID>"\n'})}),"\n",(0,r.jsx)(t.h3,{id:"2-grafana-tempo",children:"2. Grafana Tempo"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"grafana.config.yaml"})," and ",(0,r.jsx)(t.code,{children:"tempo.config.yaml"})," in the root directory contains all files required to configure Grafana and Tempo."]}),"\n",(0,r.jsx)(t.h3,{id:"docker-compose-network",children:"Docker Compose Network"}),"\n",(0,r.jsxs)(t.p,{children:["All ",(0,r.jsx)(t.code,{children:"services"})," in the ",(0,r.jsx)(t.code,{children:"docker-compose.yaml"})," are on the same network and will be reachable by hostname from within other services. E.g. ",(0,r.jsx)(t.code,{children:"tracetest:4317"})," in the ",(0,r.jsx)(t.code,{children:"tracetest/collector.config.yaml"})," will map to the ",(0,r.jsx)(t.code,{children:"tracetest-agent"})," service, where the port ",(0,r.jsx)(t.code,{children:"4317"})," is the port where Tracetest accepts telemetry data."]}),"\n",(0,r.jsx)(t.h2,{id:"pokeshop-api",children:"Pokeshop API"}),"\n",(0,r.jsx)(t.p,{children:"The Pokeshop API is a fully instrumented REST API that makes use of different services to mimic a real life scenario."}),"\n",(0,r.jsxs)(t.p,{children:["It is instrumented using the ",(0,r.jsx)(t.a,{href:"https://opentelemetry.io/docs/instrumentation/js/getting-started/nodejs/",children:"OpenTelemetry standards for Node.js"}),", sending the data to the ADOT collector that will be pushing the telemetry information to both the AWS X-Ray service."]}),"\n",(0,r.jsxs)(t.p,{children:["This is a fragment from the main tracing file from the ",(0,r.jsx)(t.a,{href:"https://github.com/kubeshop/pokeshop",children:"Pokeshop API repo."})]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"import { BatchSpanProcessor } from '@opentelemetry/sdk-trace-base';\nimport * as opentelemetry from '@opentelemetry/api';\nimport { api, NodeSDK } from '@opentelemetry/sdk-node';\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-grpc';\nimport { Resource } from '@opentelemetry/resources';\nimport * as dotenv from 'dotenv';\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { IORedisInstrumentation } from '@opentelemetry/instrumentation-ioredis';\nimport { PgInstrumentation } from '@opentelemetry/instrumentation-pg';\nimport { AmqplibInstrumentation } from '@opentelemetry/instrumentation-amqplib';\nimport { SpanStatusCode } from '@opentelemetry/api';\nimport { B3Propagator } from '@opentelemetry/propagator-b3';\n\ndotenv.config();\napi.propagation.setGlobalPropagator(new B3Propagator());\n\nconst { COLLECTOR_ENDPOINT = '', SERVICE_NAME = 'pokeshop' } = process.env;\n\nlet globalTracer: opentelemetry.Tracer | null = null;\n\nasync function createTracer(): Promise<opentelemetry.Tracer> {\n  const collectorExporter = new OTLPTraceExporter({\n    url: COLLECTOR_ENDPOINT,\n  });\n\n  const spanProcessor = new BatchSpanProcessor(collectorExporter);\n  const sdk = new NodeSDK({\n    traceExporter: collectorExporter,\n    // @ts-ignore\n    instrumentations: [new IORedisInstrumentation(), new PgInstrumentation(), new AmqplibInstrumentation()],\n  });\n\n  sdk.configureTracerProvider({}, spanProcessor);\n  sdk.addResource(\n    new Resource({\n      [SemanticResourceAttributes.SERVICE_NAME]: SERVICE_NAME,\n    })\n  );\n\n  await sdk.start();\n  process.on('SIGTERM', () => {\n    sdk\n      .shutdown()\n      .then(\n        () => console.log('SDK shut down successfully'),\n        err => console.log('Error shutting down SDK', err)\n      )\n      .finally(() => process.exit(0));\n  });\n\n  const tracer = opentelemetry.trace.getTracer(SERVICE_NAME);\n\n  globalTracer = tracer;\n\n  return globalTracer;\n}\n"})}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"docker-compose.yaml"})," file includes the definitions for all of the required services by the Pokeshop API, which includes:"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsxs)(t.a,{href:"https://opentelemetry.io/docs/collector/getting-started/",children:[(0,r.jsx)(t.strong,{children:"OpenTelemetry Collector"}),")"]})," - Vendor-agnostic way to receive, process and export telemetry data."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Postgres"})," - To save Pokemon information."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Redis"})," - For in memory strage."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"RabbitMQ"})," - For async processing use cases."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"API"})," - The Pokeshop API main container."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Worker"})," - The Pokeshop worker instance."]}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yaml",children:'version: "3"\n\n#...\n\nservices:\n  #...\n\n  # Demo\n  postgres:\n    image: postgres:14\n    environment:\n      POSTGRES_PASSWORD: postgres\n      POSTGRES_USER: postgres\n    healthcheck:\n      test: pg_isready -U "$$POSTGRES_USER" -d "$$POSTGRES_DB"\n      interval: 1s\n      timeout: 5s\n      retries: 60\n    ports:\n      - 5432:5432\n\n  demo-cache:\n    image: redis:6\n    restart: unless-stopped\n    healthcheck:\n      test: ["CMD", "redis-cli", "ping"]\n      interval: 1s\n      timeout: 3s\n      retries: 60\n\n  demo-queue:\n    image: rabbitmq:3.8-management\n    restart: unless-stopped\n    healthcheck:\n      test: rabbitmq-diagnostics -q check_running\n      interval: 1s\n      timeout: 5s\n      retries: 60\n\n  demo-api:\n    image: kubeshop/demo-pokemon-api:latest\n    restart: unless-stopped\n    pull_policy: always\n    environment:\n      REDIS_URL: demo-cache\n      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/postgres?schema=public\n      RABBITMQ_HOST: demo-queue\n      POKE_API_BASE_URL: https://pokeapi.co/api/v2\n      COLLECTOR_ENDPOINT: http://otel-collector:4317\n      NPM_RUN_COMMAND: api\n    ports:\n      - "8081:8081"\n    healthcheck:\n      test: ["CMD", "wget", "--spider", "localhost:8081"]\n      interval: 1s\n      timeout: 3s\n      retries: 60\n    depends_on:\n      postgres:\n        condition: service_healthy\n      demo-cache:\n        condition: service_healthy\n      demo-queue:\n        condition: service_healthy\n\n  demo-worker:\n    image: kubeshop/demo-pokemon-api:latest\n    restart: unless-stopped\n    pull_policy: always\n    environment:\n      REDIS_URL: demo-cache\n      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/postgres?schema=public\n      RABBITMQ_HOST: demo-queue\n      POKE_API_BASE_URL: https://pokeapi.co/api/v2\n      COLLECTOR_ENDPOINT: http://otel-collector:4317\n      NPM_RUN_COMMAND: worker\n    depends_on:\n      postgres:\n        condition: service_healthy\n      demo-cache:\n        condition: service_healthy\n      demo-queue:\n        condition: service_healthy\n\n  demo-rpc:\n    image: kubeshop/demo-pokemon-api:latest\n    restart: unless-stopped\n    pull_policy: always\n    environment:\n      REDIS_URL: demo-cache\n      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/postgres?schema=public\n      RABBITMQ_HOST: demo-queue\n      POKE_API_BASE_URL: https://pokeapi.co/api/v2\n      COLLECTOR_ENDPOINT: http://otel-collector:4317\n      NPM_RUN_COMMAND: rpc\n    ports:\n      - 8082:8082\n    healthcheck:\n      test: ["CMD", "lsof", "-i", "8082"]\n      interval: 1s\n      timeout: 3s\n      retries: 60\n    depends_on:\n      postgres:\n        condition: service_healthy\n      demo-cache:\n        condition: service_healthy\n      demo-queue:\n        condition: service_healthy\n  # Demo End\n'})}),"\n",(0,r.jsx)(t.h2,{id:"tracetest",children:"Tracetest"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"docker-compose.yaml"})," includes two services related to Tracetest."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yaml",children:'version: "3"\nservices:\n  # Cloud-based Managed Tracetest\n  tracetest-agent:\n    image: kubeshop/tracetest-agent:latest\n    environment:\n      # Get the required information here: https://app.tracetest.io/retrieve-token\n      - TRACETEST_API_KEY=${TRACETEST_TOKEN}\n      - TRACETEST_ENVIRONMENT_ID=${TRACETEST_ENVIRONMENT_ID}\n  tracetest-apply:\n    build:\n      dockerfile: Dockerfile.tracetest\n    volumes:\n      - ./resources:/resources\n    environment:\n      TRACETEST_TOKEN: ${TRACETEST_TOKEN}\n      TRACETEST_ENVIRONMENT_ID: ${TRACETEST_ENVIRONMENT_ID}\n    entrypoint:\n      - bash\n      - /resources/apply.sh\n    networks:\n      default: null\n    depends_on:\n      demo-api:\n        condition: service_started\n      tracetest-agent:\n        condition: service_started\n\n  tracetest-run:\n    build:\n      dockerfile: Dockerfile.tracetest\n    volumes:\n      - ./resources:/resources\n    environment:\n      TRACETEST_TOKEN: ${TRACETEST_TOKEN}\n      TRACETEST_ENVIRONMENT_ID: ${TRACETEST_ENVIRONMENT_ID}\n    entrypoint:\n      - bash\n      - /resources/run.sh\n    networks:\n      default: null\n    depends_on:\n      tracetest-apply:\n        condition: service_completed_successfully\n\n  # Tracetest End\n'})}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"collector.config.yaml"})," file contains the OpenTelemetry Collector configuration that enables routing traces from the Pokeshop API to Tempo."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yaml",children:"# collector.config.yaml\n\nreceivers:\n  otlp:\n    protocols:\n      grpc:\n      http:\n\nprocessors:\n  batch:\n    timeout: 100ms\n\nexporters:\n  logging:\n    loglevel: debug\n  otlp/tempo:\n    endpoint: tempo:4317\n    tls:\n      insecure: true\n\nservice:\n  pipelines:\n    traces:\n      receivers: [otlp]\n      processors: [batch]\n      exporters: [otlp/tempo]\n"})}),"\n",(0,r.jsx)(t.p,{children:"How do traces reach Grafana Tempo?"}),"\n",(0,r.jsx)(t.p,{children:"The Pokeshop API code uses the native Node.js OpenTelemetry modules which send information to the OpenTelemetry Collector to be processed and then sent to Grafana Tempo."}),"\n",(0,r.jsx)(t.h2,{id:"grafana-tempo",children:"Grafana Tempo"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"docker-compose.yaml"})," includes 3 services related to Grafana Tempo."]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"OpenTelemetry Collector"}),"\n",(0,r.jsx)(t.li,{children:"Grafana Tempo"}),"\n",(0,r.jsx)(t.li,{children:"Grafana (Dashboards)"}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yaml",children:'version: "3"\n\n# ...\nservices:\n\n  # ...\n  # Grafana\n  otel-collector:\n    image: otel/opentelemetry-collector-contrib:0.59.0\n    command:\n      - "--config"\n      - "/otel-local-config.yaml"\n    volumes:\n      - ./collector.config.yaml:/otel-local-config.yaml\n    depends_on:\n      - tempo\n  tempo:\n    image: grafana/tempo:latest\n    command: [ "-config.file=/etc/tempo.yaml" ]\n    volumes:\n      - ./tempo.config.yaml:/etc/tempo.yaml\n      - ./tempo-data:/tmp/tempo\n    ports:\n      - "3200:3200"   # tempo http\n      - "9095:9095"   # tempo grpc\n      - "4317"  # otlp grpc\n      - "4318"  # otlp http\n  grafana:\n    image: grafana/grafana:9.4.3\n    volumes:\n      - ./grafana.config.yaml:/etc/grafana/provisioning/datasources/datasources.yaml\n    environment:\n      - GF_AUTH_ANONYMOUS_ENABLED=true\n      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin\n      - GF_AUTH_DISABLE_LOGIN_FORM=true\n      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor\n    ports:\n      - "3000:3000"\n  # Grafana End\n'})}),"\n",(0,r.jsx)(t.h2,{id:"run-the-pokeshop-api-grafana-and-tracetest",children:"Run the Pokeshop API, Grafana and Tracetest"}),"\n",(0,r.jsx)(t.p,{children:"To start all the services, and run the Tracetest tests, run this command:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"docker compose run tracetest-run\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Make sure to use the ",(0,r.jsx)(t.code,{children:"http://demo-api:8081/"})," URL in your test creation, because your Pokeshop API and Tracetest are in the same network."]}),"\n",(0,r.jsx)(t.h2,{id:"trace-based-tests",children:"Trace-Based Tests"}),"\n",(0,r.jsxs)(t.p,{children:["Check out the ",(0,r.jsx)(t.code,{children:"resources/test.yaml"})," file."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yaml",children:'# resources/test.yaml\n\ntype: Test\nspec:\n  id: ZVJwkpC4g\n  name: Pokeshop - Import\n  description: Import a Pokemon\n  trigger:\n    type: http\n    httpRequest:\n      method: POST\n      url: http://demo-api:8081/pokemon/import\n      body: \'{"id":6}\'\n      headers:\n      - key: Content-Type\n        value: application/json\n  specs:\n  - selector: span[tracetest.span.type="http"]\n    name: "All HTTP Spans: Status  code is 200"\n    assertions:\n    - attr:http.status_code = 200\n  - selector: span[tracetest.span.type="general" name="import pokemon"]\n    name: Validate that this span always exists after the message queue\n    assertions:\n    - attr:tracetest.selected_spans.count  =  1\n    - attr:span.events not-contains "exception"\n  - selector: span[tracetest.span.type="database" name="get pokemon_6" db.system="redis" db.operation="get" db.redis.database_index="0"]\n    name: Validate that Redis is using Charizard.\n    assertions:\n    - attr:db.payload = \'{"key":"pokemon_6"}\'\n  - selector: span[tracetest.span.type="database" name="create postgres.pokemon" db.system="postgres" db.name="postgres" db.user="postgres" db.operation="create" db.sql.table="pokemon"]\n    name: Validate that the Postgres has Charizard.\n    assertions:\n    - attr:db.result contains "charizard"\n'})}),"\n",(0,r.jsx)(t.h2,{id:"view-trace-spans-over-time-in-grafana",children:"View Trace Spans Over Time in Grafana"}),"\n",(0,r.jsxs)(t.p,{children:["To access a historical overview of all the trace spans the Pokeshop App generates, jump over to Grafana on ",(0,r.jsx)(t.code,{children:"http://localhost:3000"}),"."]}),"\n",(0,r.jsx)(t.p,{children:"With Grafana and Tracetest you can run trace-based tests and automate running E2E and integration tests against real trace data. And, use Grafana to get a historical overview of all traces your distributed application generates."}),"\n",(0,r.jsx)(t.h2,{id:"learn-more",children:"Learn More"}),"\n",(0,r.jsxs)(t.p,{children:["Feel free to check out our ",(0,r.jsx)(t.a,{href:"https://github.com/kubeshop/tracetest/tree/main/examples",children:"examples in GitHub"})," and join our ",(0,r.jsx)(t.a,{href:"https://dub.sh/tracetest-community",children:"Slack Community"})," for more info!"]})]})}function d(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>i});var r=n(96540);const s={},o=r.createContext(s);function a(e){const t=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(o.Provider,{value:t},e.children)}}}]);