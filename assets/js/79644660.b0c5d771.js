"use strict";(self.webpackChunktracetest_docs=self.webpackChunktracetest_docs||[]).push([[7697],{65800:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var n=s(74848),a=s(28453);const i={id:"creating-test-outputs",title:"Defining Test Outputs in Text Files",description:"Test outputs allow for exporting values from a test so they become available in Variable Sets of a Test Suite.",keywords:["tracetest","trace-based testing","observability","distributed tracing","testing"],image:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1698686403/docs/Blog_Thumbnail_14_rsvkmo.jpg"},r=void 0,l={id:"cli/creating-test-outputs",title:"Defining Test Outputs in Text Files",description:"Test outputs allow for exporting values from a test so they become available in Variable Sets of a Test Suite.",source:"@site/docs/cli/creating-test-outputs.mdx",sourceDirName:"cli",slug:"/cli/creating-test-outputs",permalink:"/cli/creating-test-outputs",draft:!1,unlisted:!1,editUrl:"https://github.com/kubeshop/tracetest/blob/main/docs/docs/cli/creating-test-outputs.mdx",tags:[],version:"current",frontMatter:{id:"creating-test-outputs",title:"Defining Test Outputs in Text Files",description:"Test outputs allow for exporting values from a test so they become available in Variable Sets of a Test Suite.",keywords:["tracetest","trace-based testing","observability","distributed tracing","testing"],image:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1698686403/docs/Blog_Thumbnail_14_rsvkmo.jpg"},sidebar:"tutorialSidebar",previous:{title:"Defining Test Specifications in Text Files",permalink:"/cli/creating-test-specifications"},next:{title:"Running Tests From the Command Line Interface (CLI)",permalink:"/cli/running-tests"}},o={},c=[{value:"Outputs are Expression Results",id:"outputs-are-expression-results",level:2},{value:"Examples",id:"examples",level:2},{value:"Basic Expression",id:"basic-expression",level:3},{value:"Extract a Value from a JSON",id:"extract-a-value-from-a-json",level:3},{value:"Multiple Values",id:"multiple-values",level:3}];function u(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.p,{children:["Outputs are really useful when running ",(0,n.jsx)(t.a,{href:"/concepts/test-suites",children:"Test Suites"}),". They allow for exporting values from a test so they become available in the ",(0,n.jsx)(t.a,{href:"/concepts/variable-sets",children:"Variable Sets"})," of the current Test Suite."]}),"\n",(0,n.jsx)(t.h2,{id:"outputs-are-expression-results",children:"Outputs are Expression Results"}),"\n",(0,n.jsxs)(t.p,{children:["An output exports the result of an ",(0,n.jsx)(t.a,{href:"/concepts/expressions",children:"Expression"})," and assigns it to a name, so it can be injected into the variable set of a running Test Suite.\nA ",(0,n.jsx)(t.code,{children:"selector"})," is needed only if the provided expression refers to a/some span/s attribute or meta attributes."]}),"\n",(0,n.jsx)(t.p,{children:"It can be defined using the following YAML definition:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-yaml",children:'outputs:\n  - name: USER_ID\n    selector: span[name = "user creation"]\n    value: attr:myapp.users.created_id\n'})}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"value"})," attribute is an ",(0,n.jsx)(t.code,{children:"expression"})," and is a very powerful tool."]}),"\n",(0,n.jsx)(t.h2,{id:"examples",children:"Examples"}),"\n",(0,n.jsx)(t.h3,{id:"basic-expression",children:"Basic Expression"}),"\n",(0,n.jsx)(t.p,{children:"You can output basic expressions:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-yaml",children:'outputs:\n\n- name: ARITHMETIC_RESULT\n  value: 1 + 1\n  # results in ARITHMETIC_RESULT = 2\n\n- name: INTERPOLATE_STRING\n  # assume PRE_EXISTING_VALUE=someValue from env vars\n  value: "the value ${var:PRE_EXISTING_VALUE} comes from the env var PRE_EXISTING_VALUE"\n  # results in INTERPOLATE_STRING = "the value someValue comes from the env var PRE_EXISTING_VALUE\n'})}),"\n",(0,n.jsx)(t.h3,{id:"extract-a-value-from-a-json",children:"Extract a Value from a JSON"}),"\n",(0,n.jsxs)(t.p,{children:["Imagine a hypotetical ",(0,n.jsx)(t.code,{children:"/users/create"})," endpoint that returns the full ",(0,n.jsx)(t.code,{children:"user"})," object, including the new ID, when the operation is successful."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-yaml",children:"outputs:\n- name: USER_ID\n  selector: span[name = \"POST /user/create\"]\n  value: attr:http.response.body | json_path '.id'\n"})}),"\n",(0,n.jsx)(t.h3,{id:"multiple-values",children:"Multiple Values"}),"\n",(0,n.jsx)(t.p,{children:"Using the same hypotethical user creation endpoint, a user creation might result on multiple sql queries, for example:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.code,{children:"INSERT INTO users ..."})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.code,{children:"INSERT INTO permissions..."})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.code,{children:"SELECT remaining_users FROM accounts"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.code,{children:"UPDATE accounts SET remaining_users ..."})}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["In this case, the service is instrumented so that each query generates a span of type ",(0,n.jsx)(t.code,{children:"database"}),".\nYou can get a list of SQL operations:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-yaml",children:'outputs:\n- name: SQL_OPS\n  selector: span[tracetest.span.type = "database"]\n  value: attr:sql.operation\n  # result: SQL_OPS = ["INSERT", "INSERT", "SELECT", "UPDATE"]\n'})}),"\n",(0,n.jsx)(t.p,{children:"Since the value is an array, you can also apply filters to it:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-yaml",children:'outputs:\n- name: LAST_SQL_OP\n  selector: span[tracetest.span.type = "database"]\n  value: attr:sql.operation | get_index \'last\'\n  # result: LAST_SQL_OP = "INSERT"\n'})})]})}function d(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(u,{...e})}):u(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>r,x:()=>l});var n=s(96540);const a={},i=n.createContext(a);function r(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);