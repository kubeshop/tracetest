"use strict";(self.webpackChunktracetest_docs=self.webpackChunktracetest_docs||[]).push([[8180],{1885:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>l,frontMatter:()=>a,metadata:()=>c,toc:()=>d});var n=s(74848),i=s(28453);const a={id:"assertions",title:"Assertions",description:"Assertions are added to set a value for a step in the trace to determine success or failure. Build integration and end-to-end tests with OpenTelemetry traces with Tracetest.",keywords:["tracetest","trace-based testing","observability","distributed tracing","testing"],image:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1698686403/docs/Blog_Thumbnail_14_rsvkmo.jpg"},r=void 0,c={id:"concepts/assertions",title:"Assertions",description:"Assertions are added to set a value for a step in the trace to determine success or failure. Build integration and end-to-end tests with OpenTelemetry traces with Tracetest.",source:"@site/docs/concepts/assertions.mdx",sourceDirName:"concepts",slug:"/concepts/assertions",permalink:"/concepts/assertions",draft:!1,unlisted:!1,editUrl:"https://github.com/kubeshop/tracetest/blob/main/docs/docs/concepts/assertions.mdx",tags:[],version:"current",frontMatter:{id:"assertions",title:"Assertions",description:"Assertions are added to set a value for a step in the trace to determine success or failure. Build integration and end-to-end tests with OpenTelemetry traces with Tracetest.",keywords:["tracetest","trace-based testing","observability","distributed tracing","testing"],image:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1698686403/docs/Blog_Thumbnail_14_rsvkmo.jpg"},sidebar:"tutorialSidebar",previous:{title:"Expressions",permalink:"/concepts/expressions"},next:{title:"Variable Sets",permalink:"/concepts/variable-sets"}},o={},d=[];function p(e){const t={img:"img",p:"p",strong:"strong",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.p,{children:"Test Specifications may be added to a trace to set a value for a step in the trace to determine success or failure. If test specs have already been added to a test, they will be on the Test screen:"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Test Spec List",src:s(59450).A+"",width:"2874",height:"1582"})}),"\n",(0,n.jsxs)(t.p,{children:["After you have created a test and your test run is complete, click the ",(0,n.jsx)(t.strong,{children:"Add Test Spec"})," button at the bottom right of the Test screen."]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Add Test Spec",src:s(31945).A+"",width:"2874",height:"1582"})}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.strong,{children:"Add Test Spec"})," dialog opens."]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Create Test Spec",src:s(4100).A+"",width:"2874",height:"1586"})}),"\n",(0,n.jsx)(t.p,{children:"The span that the new test spec will apply to is hightlighted in the graph view on the left:"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Selected Span",src:s(32459).A+"",width:"2874",height:"1584"})}),"\n",(0,n.jsx)(t.p,{children:"To add an assertion to a span, click the first drop down to see the list of attributes that apply to the selected span:"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Assertion Attributes",src:s(44603).A+"",width:"2874",height:"1582"})}),"\n",(0,n.jsx)(t.p,{children:"Then select the operator for your assertion:"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Assertion Operators",src:s(53995).A+"",width:"2874",height:"1586"})}),"\n",(0,n.jsx)(t.p,{children:"And add the value for comparison:"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Assertion Values",src:s(12444).A+"",width:"2874",height:"1586"})}),"\n",(0,n.jsxs)(t.p,{children:["Finally, you can give your test spec an optional name and click ",(0,n.jsx)(t.strong,{children:"Save Test Spec"}),":"]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Save Test Spec",src:s(29393).A+"",width:"2874",height:"1586"})})]})}function l(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(p,{...e})}):p(e)}},31945:(e,t,s)=>{s.d(t,{A:()=>n});const n=s.p+"assets/images/add-test-spec-0.11-06c42a7246fbf55897d741ff2ceaf620.png"},44603:(e,t,s)=>{s.d(t,{A:()=>n});const n=s.p+"assets/images/assertion-attributes-0.11-70b59a9e08b0209252b6b753fd08b2b6.png"},53995:(e,t,s)=>{s.d(t,{A:()=>n});const n=s.p+"assets/images/assertion-operators-0.11-98717360e132b63e4888085fa504d402.png"},12444:(e,t,s)=>{s.d(t,{A:()=>n});const n=s.p+"assets/images/assertion-values-0.11-7943bee09c7387d2137cf020dcd595a4.png"},4100:(e,t,s)=>{s.d(t,{A:()=>n});const n=s.p+"assets/images/create-test-spec-0.11-76e9ab352c1565608e34435ea388588f.png"},29393:(e,t,s)=>{s.d(t,{A:()=>n});const n=s.p+"assets/images/save-test-spec-0.11-448a7184c399de501d67a727833603a0.png"},32459:(e,t,s)=>{s.d(t,{A:()=>n});const n=s.p+"assets/images/selected-span-0.11-8bb791745c1c12de41e5d8b65fc6a8f2.png"},59450:(e,t,s)=>{s.d(t,{A:()=>n});const n=s.p+"assets/images/test-spec-list-0.11-0d46775e2cded07d3349b6afe247ba2f.png"},28453:(e,t,s)=>{s.d(t,{R:()=>r,x:()=>c});var n=s(96540);const i={},a=n.createContext(i);function r(e){const t=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),n.createElement(a.Provider,{value:t},e.children)}}}]);