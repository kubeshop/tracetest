/*
 * TraceTest
 *
 * OpenAPI definition for TraceTest endpoint and resources
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

// SpanLink - A pointer from the current span to another span in the same trace or in a different trace. For example, this can be used in batching operations, where a single batch handler processes multiple requests from different traces or when the handler receives a request from a different project.
type SpanLink struct {

	// A unique identifier of a trace that this linked span is part of. The ID is a 16-byte array.
	TraceId string `json:"traceId,omitempty"`

	// A unique identifier for the linked span. The ID is an 8-byte array.
	SpanId string `json:"spanId,omitempty"`

	// The trace_state associated with the link.
	TraceState string `json:"traceState,omitempty"`

	// attributes is a collection of attribute key/value pairs on the link. Attribute keys MUST be unique (it is not allowed to have more than one attribute with the same key).
	Attributes []V1KeyValue `json:"attributes,omitempty"`

	// dropped_attributes_count is the number of dropped attributes. If the value is 0, then no attributes were dropped.
	DroppedAttributesCount int64 `json:"droppedAttributesCount,omitempty"`
}

// AssertSpanLinkRequired checks if the required fields are not zero-ed
func AssertSpanLinkRequired(obj SpanLink) error {
	for _, el := range obj.Attributes {
		if err := AssertV1KeyValueRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertRecurseSpanLinkRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of SpanLink (e.g. [][]SpanLink), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseSpanLinkRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aSpanLink, ok := obj.(SpanLink)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertSpanLinkRequired(aSpanLink)
	})
}
