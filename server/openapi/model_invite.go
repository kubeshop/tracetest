/*
 * TraceTest
 *
 * OpenAPI definition for TraceTest endpoint and resources
 *
 * API version: 0.2.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"time"
)

type Invite struct {
	Id string `json:"id"`

	Role Role `json:"role"`

	To string `json:"to"`

	CreatedAt time.Time `json:"createdAt,omitempty"`

	SentAt time.Time `json:"sentAt,omitempty"`

	Type string `json:"type,omitempty"`

	Status string `json:"status,omitempty"`

	ReturnTo string `json:"returnTo,omitempty"`

	Environments []InviteEnvironment `json:"environments,omitempty"`
}

// AssertInviteRequired checks if the required fields are not zero-ed
func AssertInviteRequired(obj Invite) error {
	elements := map[string]interface{}{
		"id":   obj.Id,
		"role": obj.Role,
		"to":   obj.To,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.Environments {
		if err := AssertInviteEnvironmentRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertRecurseInviteRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of Invite (e.g. [][]Invite), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseInviteRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aInvite, ok := obj.(Invite)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertInviteRequired(aInvite)
	})
}
