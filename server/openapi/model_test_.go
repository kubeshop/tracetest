/*
 * TraceTest
 *
 * OpenAPI definition for TraceTest endpoint and resources
 *
 * API version: 0.2.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"time"
)

type Test struct {
	Id string `json:"id,omitempty"`

	Name string `json:"name,omitempty"`

	Description string `json:"description,omitempty"`

	// version number of the test
	Version int32 `json:"version,omitempty"`

	CreatedAt time.Time `json:"createdAt,omitempty"`

	Trigger Trigger `json:"trigger,omitempty"`

	// If true, the test will not collect a trace
	SkipTraceCollection bool `json:"skipTraceCollection,omitempty"`

	// ID of the polling profile to be used for this test
	PollingProfile string `json:"pollingProfile,omitempty"`

	// specification of assertions that are going to be made
	Specs []TestSpec `json:"specs,omitempty"`

	// define test outputs, in a key/value format. The value is processed as an expression
	Outputs []TestOutput `json:"outputs,omitempty"`

	Summary TestSummary `json:"summary,omitempty"`
}

// AssertTestRequired checks if the required fields are not zero-ed
func AssertTestRequired(obj Test) error {
	if err := AssertTriggerRequired(obj.Trigger); err != nil {
		return err
	}
	for _, el := range obj.Specs {
		if err := AssertTestSpecRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Outputs {
		if err := AssertTestOutputRequired(el); err != nil {
			return err
		}
	}
	if err := AssertTestSummaryRequired(obj.Summary); err != nil {
		return err
	}
	return nil
}

// AssertRecurseTestRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of Test (e.g. [][]Test), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseTestRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aTest, ok := obj.(Test)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertTestRequired(aTest)
	})
}
