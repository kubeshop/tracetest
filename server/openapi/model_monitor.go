/*
 * TraceTest
 *
 * OpenAPI definition for TraceTest endpoint and resources
 *
 * API version: 0.2.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"time"
)

type Monitor struct {
	Id string `json:"id,omitempty"`

	Version int32 `json:"version,omitempty"`

	Name string `json:"name,omitempty"`

	CreatedAt time.Time `json:"createdAt,omitempty"`

	DeletedAt time.Time `json:"deletedAt,omitempty"`

	UpdatedAt time.Time `json:"updatedAt,omitempty"`

	Enabled bool `json:"enabled,omitempty"`

	// list of steps of the Monitor containing just each test id
	Tests []string `json:"tests,omitempty"`

	// list of steps of the Monitor containing just each test suite id
	TestSuites []string `json:"testSuites,omitempty"`

	// list of steps of the Monitor containing the whole test object
	FullTests []Test `json:"fullTests,omitempty"`

	// list of steps of the Monitor containing the whole test suite object
	FullTestSuites []TestSuite `json:"fullTestSuites,omitempty"`

	VariableSetId string `json:"variableSetId,omitempty"`

	TokenId string `json:"tokenId,omitempty"`

	Schedule Schedule `json:"schedule,omitempty"`

	Alerts []Alert `json:"alerts,omitempty"`

	Summary Summary `json:"summary,omitempty"`
}

// AssertMonitorRequired checks if the required fields are not zero-ed
func AssertMonitorRequired(obj Monitor) error {
	for _, el := range obj.FullTests {
		if err := AssertTestRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.FullTestSuites {
		if err := AssertTestSuiteRequired(el); err != nil {
			return err
		}
	}
	if err := AssertScheduleRequired(obj.Schedule); err != nil {
		return err
	}
	for _, el := range obj.Alerts {
		if err := AssertAlertRequired(el); err != nil {
			return err
		}
	}
	if err := AssertSummaryRequired(obj.Summary); err != nil {
		return err
	}
	return nil
}

// AssertRecurseMonitorRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of Monitor (e.g. [][]Monitor), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseMonitorRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aMonitor, ok := obj.(Monitor)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertMonitorRequired(aMonitor)
	})
}
