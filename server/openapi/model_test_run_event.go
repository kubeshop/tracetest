/*
 * TraceTest
 *
 * OpenAPI definition for TraceTest endpoint and resources
 *
 * API version: 0.2.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"time"
)

type TestRunEvent struct {
	Type string `json:"type,omitempty"`

	Stage string `json:"stage,omitempty"`

	Title string `json:"title,omitempty"`

	Description string `json:"description,omitempty"`

	CreatedAt time.Time `json:"createdAt,omitempty"`

	TestId string `json:"testId,omitempty"`

	RunId int32 `json:"runId,omitempty"`

	DataStoreConnection ConnectionResult `json:"dataStoreConnection,omitempty"`

	Polling PollingInfo `json:"polling,omitempty"`

	Outputs []OutputInfo `json:"outputs,omitempty"`
}

// AssertTestRunEventRequired checks if the required fields are not zero-ed
func AssertTestRunEventRequired(obj TestRunEvent) error {
	if err := AssertConnectionResultRequired(obj.DataStoreConnection); err != nil {
		return err
	}
	if err := AssertPollingInfoRequired(obj.Polling); err != nil {
		return err
	}
	for _, el := range obj.Outputs {
		if err := AssertOutputInfoRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertRecurseTestRunEventRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of TestRunEvent (e.g. [][]TestRunEvent), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseTestRunEventRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aTestRunEvent, ok := obj.(TestRunEvent)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertTestRunEventRequired(aTestRunEvent)
	})
}
