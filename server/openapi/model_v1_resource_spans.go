/*
 * TraceTest
 *
 * OpenAPI definition for TraceTest endpoint and resources
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

// V1ResourceSpans - A collection of InstrumentationLibrarySpans from a Resource.
type V1ResourceSpans struct {
	Resource V1Resource `json:"resource,omitempty"`

	// A list of InstrumentationLibrarySpans that originate from a resource.
	InstrumentationLibrarySpans []V1InstrumentationLibrarySpans `json:"instrumentationLibrarySpans,omitempty"`

	// This schema_url applies to the data in the \"resource\" field. It does not apply to the data in the \"instrumentation_library_spans\" field which have their own schema_url field.
	SchemaUrl string `json:"schemaUrl,omitempty"`
}

// AssertV1ResourceSpansRequired checks if the required fields are not zero-ed
func AssertV1ResourceSpansRequired(obj V1ResourceSpans) error {
	if err := AssertV1ResourceRequired(obj.Resource); err != nil {
		return err
	}
	for _, el := range obj.InstrumentationLibrarySpans {
		if err := AssertV1InstrumentationLibrarySpansRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertRecurseV1ResourceSpansRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of V1ResourceSpans (e.g. [][]V1ResourceSpans), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseV1ResourceSpansRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aV1ResourceSpans, ok := obj.(V1ResourceSpans)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertV1ResourceSpansRequired(aV1ResourceSpans)
	})
}
