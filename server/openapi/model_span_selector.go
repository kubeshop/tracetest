/*
 * TraceTest
 *
 * OpenAPI definition for TraceTest endpoint and resources
 *
 * API version: 0.2.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

type SpanSelector struct {
	Filters []SelectorFilter `json:"filters"`

	PseudoClass *SelectorPseudoClass `json:"pseudoClass,omitempty"`

	ChildSelector *SpanSelector `json:"childSelector,omitempty"`
}

// AssertSpanSelectorRequired checks if the required fields are not zero-ed
func AssertSpanSelectorRequired(obj SpanSelector) error {
	elements := map[string]interface{}{
		"filters": obj.Filters,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.Filters {
		if err := AssertSelectorFilterRequired(el); err != nil {
			return err
		}
	}
	if obj.PseudoClass != nil {
		if err := AssertSelectorPseudoClassRequired(*obj.PseudoClass); err != nil {
			return err
		}
	}
	if obj.ChildSelector != nil {
		if err := AssertSpanSelectorRequired(*obj.ChildSelector); err != nil {
			return err
		}
	}
	return nil
}

// AssertRecurseSpanSelectorRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of SpanSelector (e.g. [][]SpanSelector), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseSpanSelectorRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aSpanSelector, ok := obj.(SpanSelector)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertSpanSelectorRequired(aSpanSelector)
	})
}
