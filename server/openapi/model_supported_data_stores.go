/*
 * TraceTest
 *
 * OpenAPI definition for TraceTest endpoint and resources
 *
 * API version: 0.2.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

type SupportedDataStores string

// List of SupportedDataStores
const (
	JAEGER           SupportedDataStores = "jaeger"
	OPENSEARCH       SupportedDataStores = "opensearch"
	TEMPO            SupportedDataStores = "tempo"
	SIGNALFX         SupportedDataStores = "signalfx"
	OTLP             SupportedDataStores = "otlp"
	ELASTICAPM       SupportedDataStores = "elasticapm"
	NEWRELIC         SupportedDataStores = "newrelic"
	LIGHTSTEP        SupportedDataStores = "lightstep"
	DATADOG          SupportedDataStores = "datadog"
	AWSXRAY          SupportedDataStores = "awsxray"
	HONEYCOMB        SupportedDataStores = "honeycomb"
	AZUREAPPINSIGHTS SupportedDataStores = "azureappinsights"
	SIGNOZ           SupportedDataStores = "signoz"
	DYNATRACE        SupportedDataStores = "dynatrace"
	SUMOLOGIC        SupportedDataStores = "sumologic"
	INSTANA          SupportedDataStores = "instana"
)

// AssertSupportedDataStoresRequired checks if the required fields are not zero-ed
func AssertSupportedDataStoresRequired(obj SupportedDataStores) error {
	return nil
}

// AssertRecurseSupportedDataStoresRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of SupportedDataStores (e.g. [][]SupportedDataStores), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseSupportedDataStoresRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aSupportedDataStores, ok := obj.(SupportedDataStores)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertSupportedDataStoresRequired(aSupportedDataStores)
	})
}
