/*
 * TraceTest
 *
 * OpenAPI definition for TraceTest endpoint and resources
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

// SpanSpanKind : SpanKind is the type of span. Can be used to specify additional relationships between spans in addition to a parent/child relationship.   - SPAN_KIND_UNSPECIFIED: Unspecified. Do NOT use as default. Implementations MAY assume SpanKind to be INTERNAL when receiving UNSPECIFIED.  - SPAN_KIND_INTERNAL: Indicates that the span represents an internal operation within an application, as opposed to an operation happening at the boundaries. Default value.  - SPAN_KIND_SERVER: Indicates that the span covers server-side handling of an RPC or other remote network request.  - SPAN_KIND_CLIENT: Indicates that the span describes a request to some remote service.  - SPAN_KIND_PRODUCER: Indicates that the span describes a producer sending a message to a broker. Unlike CLIENT and SERVER, there is often no direct critical path latency relationship between producer and consumer spans. A PRODUCER span ends when the message was accepted by the broker while the logical processing of the message might span a much longer time.  - SPAN_KIND_CONSUMER: Indicates that the span describes consumer receiving a message from a broker. Like the PRODUCER kind, there is often no direct critical path latency relationship between producer and consumer spans.
type SpanSpanKind string

// List of SpanSpanKind
const (
	UNSPECIFIED SpanSpanKind = "SPAN_KIND_UNSPECIFIED"
	INTERNAL    SpanSpanKind = "SPAN_KIND_INTERNAL"
	SERVER      SpanSpanKind = "SPAN_KIND_SERVER"
	CLIENT      SpanSpanKind = "SPAN_KIND_CLIENT"
	PRODUCER    SpanSpanKind = "SPAN_KIND_PRODUCER"
	CONSUMER    SpanSpanKind = "SPAN_KIND_CONSUMER"
)

// AssertSpanSpanKindRequired checks if the required fields are not zero-ed
func AssertSpanSpanKindRequired(obj SpanSpanKind) error {
	return nil
}

// AssertRecurseSpanSpanKindRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of SpanSpanKind (e.g. [][]SpanSpanKind), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseSpanSpanKindRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aSpanSpanKind, ok := obj.(SpanSpanKind)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertSpanSpanKindRequired(aSpanSpanKind)
	})
}
