/*
 * TraceTest
 *
 * OpenAPI definition for TraceTest endpoint and resources
 *
 * API version: 0.2.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ApiApiController binds http requests to an api service and writes the service results to the http response
type ApiApiController struct {
	service      ApiApiServicer
	errorHandler ErrorHandler
}

// ApiApiOption for how the controller is set up.
type ApiApiOption func(*ApiApiController)

// WithApiApiErrorHandler inject ErrorHandler into controller
func WithApiApiErrorHandler(h ErrorHandler) ApiApiOption {
	return func(c *ApiApiController) {
		c.errorHandler = h
	}
}

// NewApiApiController creates a default api controller
func NewApiApiController(s ApiApiServicer, opts ...ApiApiOption) Router {
	controller := &ApiApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ApiApiController
func (c *ApiApiController) Routes() Routes {
	return Routes{
		{
			"DeleteTestRun",
			strings.ToUpper("Delete"),
			"/api/tests/{testId}/run/{runId}",
			c.DeleteTestRun,
		},
		{
			"DeleteTransactionRun",
			strings.ToUpper("Delete"),
			"/api/transactions/{transactionId}/run/{runId}",
			c.DeleteTransactionRun,
		},
		{
			"DryRunAssertion",
			strings.ToUpper("Put"),
			"/api/tests/{testId}/run/{runId}/dry-run",
			c.DryRunAssertion,
		},
		{
			"ExportTestRun",
			strings.ToUpper("Get"),
			"/api/tests/{testId}/run/{runId}/export",
			c.ExportTestRun,
		},
		{
			"ExpressionResolve",
			strings.ToUpper("Post"),
			"/api/expressions/resolve",
			c.ExpressionResolve,
		},
		{
			"GetResources",
			strings.ToUpper("Get"),
			"/api/resources",
			c.GetResources,
		},
		{
			"GetRunResultJUnit",
			strings.ToUpper("Get"),
			"/api/tests/{testId}/run/{runId}/junit.xml",
			c.GetRunResultJUnit,
		},
		{
			"GetTestResultSelectedSpans",
			strings.ToUpper("Get"),
			"/api/tests/{testId}/run/{runId}/select",
			c.GetTestResultSelectedSpans,
		},
		{
			"GetTestRun",
			strings.ToUpper("Get"),
			"/api/tests/{testId}/run/{runId}",
			c.GetTestRun,
		},
		{
			"GetTestRunEvents",
			strings.ToUpper("Get"),
			"/api/tests/{testId}/run/{runId}/events",
			c.GetTestRunEvents,
		},
		{
			"GetTestRuns",
			strings.ToUpper("Get"),
			"/api/tests/{testId}/run",
			c.GetTestRuns,
		},
		{
			"GetTestSpecs",
			strings.ToUpper("Get"),
			"/api/tests/{testId}/definition",
			c.GetTestSpecs,
		},
		{
			"GetTestVersion",
			strings.ToUpper("Get"),
			"/api/tests/{testId}/version/{version}",
			c.GetTestVersion,
		},
		{
			"GetTransactionRun",
			strings.ToUpper("Get"),
			"/api/transactions/{transactionId}/run/{runId}",
			c.GetTransactionRun,
		},
		{
			"GetTransactionRuns",
			strings.ToUpper("Get"),
			"/api/transactions/{transactionId}/run",
			c.GetTransactionRuns,
		},
		{
			"GetTransactionVersion",
			strings.ToUpper("Get"),
			"/api/transactions/{transactionId}/version/{version}",
			c.GetTransactionVersion,
		},
		{
			"GetVersion",
			strings.ToUpper("Get"),
			"/api/version",
			c.GetVersion,
		},
		{
			"ImportTestRun",
			strings.ToUpper("Post"),
			"/api/tests/import",
			c.ImportTestRun,
		},
		{
			"RerunTestRun",
			strings.ToUpper("Post"),
			"/api/tests/{testId}/run/{runId}/rerun",
			c.RerunTestRun,
		},
		{
			"RunTest",
			strings.ToUpper("Post"),
			"/api/tests/{testId}/run",
			c.RunTest,
		},
		{
			"RunTransaction",
			strings.ToUpper("Post"),
			"/api/transactions/{transactionId}/run",
			c.RunTransaction,
		},
		{
			"StopTestRun",
			strings.ToUpper("Post"),
			"/api/tests/{testId}/run/{runId}/stop",
			c.StopTestRun,
		},
		{
			"TestConnection",
			strings.ToUpper("Post"),
			"/api/config/connection",
			c.TestConnection,
		},
	}
}

// DeleteTestRun - delete a test run
func (c *ApiApiController) DeleteTestRun(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	testIdParam := params["testId"]

	runIdParam, err := parseInt32Parameter(params["runId"], true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}

	result, err := c.service.DeleteTestRun(r.Context(), testIdParam, runIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// DeleteTransactionRun - Delete a specific run from a particular transaction
func (c *ApiApiController) DeleteTransactionRun(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	transactionIdParam := params["transactionId"]

	runIdParam, err := parseInt32Parameter(params["runId"], true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}

	result, err := c.service.DeleteTransactionRun(r.Context(), transactionIdParam, runIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// DryRunAssertion - run given assertions against the traces from the given run without persisting anything
func (c *ApiApiController) DryRunAssertion(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	testIdParam := params["testId"]

	runIdParam, err := parseInt32Parameter(params["runId"], true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}

	testSpecsParam := TestSpecs{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&testSpecsParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertTestSpecsRequired(testSpecsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.DryRunAssertion(r.Context(), testIdParam, runIdParam, testSpecsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ExportTestRun - export test and test run information
func (c *ApiApiController) ExportTestRun(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	testIdParam := params["testId"]

	runIdParam, err := parseInt32Parameter(params["runId"], true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}

	result, err := c.service.ExportTestRun(r.Context(), testIdParam, runIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ExpressionResolve - resolves an expression and returns the result string
func (c *ApiApiController) ExpressionResolve(w http.ResponseWriter, r *http.Request) {
	resolveRequestInfoParam := ResolveRequestInfo{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&resolveRequestInfoParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertResolveRequestInfoRequired(resolveRequestInfoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ExpressionResolve(r.Context(), resolveRequestInfoParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetResources - Get resources
func (c *ApiApiController) GetResources(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	takeParam, err := parseInt32Parameter(query.Get("take"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	skipParam, err := parseInt32Parameter(query.Get("skip"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	queryParam := query.Get("query")
	sortByParam := query.Get("sortBy")
	sortDirectionParam := query.Get("sortDirection")
	result, err := c.service.GetResources(r.Context(), takeParam, skipParam, queryParam, sortByParam, sortDirectionParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetRunResultJUnit - get test run results in JUnit xml format
func (c *ApiApiController) GetRunResultJUnit(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	testIdParam := params["testId"]

	runIdParam, err := parseInt32Parameter(params["runId"], true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}

	result, err := c.service.GetRunResultJUnit(r.Context(), testIdParam, runIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetTestResultSelectedSpans - retrieve spans that will be selected by selector
func (c *ApiApiController) GetTestResultSelectedSpans(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	testIdParam := params["testId"]

	runIdParam, err := parseInt32Parameter(params["runId"], true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}

	queryParam := query.Get("query")
	result, err := c.service.GetTestResultSelectedSpans(r.Context(), testIdParam, runIdParam, queryParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetTestRun - get test Run
func (c *ApiApiController) GetTestRun(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	testIdParam := params["testId"]

	runIdParam, err := parseInt32Parameter(params["runId"], true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}

	result, err := c.service.GetTestRun(r.Context(), testIdParam, runIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetTestRunEvents - get events from a test run
func (c *ApiApiController) GetTestRunEvents(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	testIdParam := params["testId"]

	runIdParam, err := parseInt32Parameter(params["runId"], true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}

	result, err := c.service.GetTestRunEvents(r.Context(), testIdParam, runIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetTestRuns - get the runs for a test
func (c *ApiApiController) GetTestRuns(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	testIdParam := params["testId"]

	takeParam, err := parseInt32Parameter(query.Get("take"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	skipParam, err := parseInt32Parameter(query.Get("skip"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.GetTestRuns(r.Context(), testIdParam, takeParam, skipParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetTestSpecs - Get definition for a test
func (c *ApiApiController) GetTestSpecs(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	testIdParam := params["testId"]

	result, err := c.service.GetTestSpecs(r.Context(), testIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetTestVersion - get a test specific version
func (c *ApiApiController) GetTestVersion(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	testIdParam := params["testId"]

	versionParam, err := parseInt32Parameter(params["version"], true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}

	result, err := c.service.GetTestVersion(r.Context(), testIdParam, versionParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetTransactionRun - Get a specific run from a particular transaction
func (c *ApiApiController) GetTransactionRun(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	transactionIdParam := params["transactionId"]

	runIdParam, err := parseInt32Parameter(params["runId"], true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}

	result, err := c.service.GetTransactionRun(r.Context(), transactionIdParam, runIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetTransactionRuns - Get all runs from a particular transaction
func (c *ApiApiController) GetTransactionRuns(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	transactionIdParam := params["transactionId"]

	takeParam, err := parseInt32Parameter(query.Get("take"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	skipParam, err := parseInt32Parameter(query.Get("skip"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.GetTransactionRuns(r.Context(), transactionIdParam, takeParam, skipParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetTransactionVersion - get a transaction specific version
func (c *ApiApiController) GetTransactionVersion(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	transactionIdParam := params["transactionId"]

	versionParam, err := parseInt32Parameter(params["version"], true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}

	result, err := c.service.GetTransactionVersion(r.Context(), transactionIdParam, versionParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetVersion - Get the version of the API
func (c *ApiApiController) GetVersion(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetVersion(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ImportTestRun - import test and test run information
func (c *ApiApiController) ImportTestRun(w http.ResponseWriter, r *http.Request) {
	exportedTestInformationParam := ExportedTestInformation{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&exportedTestInformationParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertExportedTestInformationRequired(exportedTestInformationParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ImportTestRun(r.Context(), exportedTestInformationParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// RerunTestRun - rerun a test run
func (c *ApiApiController) RerunTestRun(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	testIdParam := params["testId"]

	runIdParam, err := parseInt32Parameter(params["runId"], true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}

	result, err := c.service.RerunTestRun(r.Context(), testIdParam, runIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// RunTest - run test
func (c *ApiApiController) RunTest(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	testIdParam := params["testId"]

	runInformationParam := RunInformation{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&runInformationParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRunInformationRequired(runInformationParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.RunTest(r.Context(), testIdParam, runInformationParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// RunTransaction - run transaction
func (c *ApiApiController) RunTransaction(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	transactionIdParam := params["transactionId"]

	runInformationParam := RunInformation{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&runInformationParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRunInformationRequired(runInformationParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.RunTransaction(r.Context(), transactionIdParam, runInformationParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// StopTestRun - stops the execution of a test run
func (c *ApiApiController) StopTestRun(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	testIdParam := params["testId"]

	runIdParam, err := parseInt32Parameter(params["runId"], true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}

	result, err := c.service.StopTestRun(r.Context(), testIdParam, runIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// TestConnection - Tests the config data store/exporter connection
func (c *ApiApiController) TestConnection(w http.ResponseWriter, r *http.Request) {
	dataStoreParam := DataStore{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&dataStoreParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDataStoreRequired(dataStoreParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.TestConnection(r.Context(), dataStoreParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
