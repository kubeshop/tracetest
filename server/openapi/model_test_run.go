/*
 * TraceTest
 *
 * OpenAPI definition for TraceTest endpoint and resources
 *
 * API version: 0.2.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"time"
)

type TestRun struct {
	Id string `json:"id,omitempty"`

	TraceId string `json:"traceId,omitempty"`

	SpanId string `json:"spanId,omitempty"`

	// Test version used when running this test run
	TestVersion int32 `json:"testVersion,omitempty"`

	// Current execution state
	State string `json:"state,omitempty"`

	// Details of the cause for the last `FAILED` state
	LastErrorState string `json:"lastErrorState,omitempty"`

	CreatedAt time.Time `json:"createdAt,omitempty"`

	CompletedAt time.Time `json:"completedAt,omitempty"`

	Request HttpRequest `json:"request,omitempty"`

	Response HttpResponse `json:"response,omitempty"`

	Trace Trace `json:"trace,omitempty"`

	Result AssertionResults `json:"result,omitempty"`
}

// AssertTestRunRequired checks if the required fields are not zero-ed
func AssertTestRunRequired(obj TestRun) error {
	if err := AssertHttpRequestRequired(obj.Request); err != nil {
		return err
	}
	if err := AssertHttpResponseRequired(obj.Response); err != nil {
		return err
	}
	if err := AssertTraceRequired(obj.Trace); err != nil {
		return err
	}
	if err := AssertAssertionResultsRequired(obj.Result); err != nil {
		return err
	}
	return nil
}

// AssertRecurseTestRunRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of TestRun (e.g. [][]TestRun), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseTestRunRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aTestRun, ok := obj.(TestRun)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertTestRunRequired(aTestRun)
	})
}
