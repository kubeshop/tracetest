/*
 * TraceTest
 *
 * OpenAPI definition for TraceTest endpoint and resources
 *
 * API version: 0.2.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"time"
)

type RunGroupRun struct {
	TestId string `json:"testId,omitempty"`

	TestVersion int32 `json:"testVersion,omitempty"`

	Name string `json:"name,omitempty"`

	CreatedAt time.Time `json:"createdAt,omitempty"`

	CompletedAt time.Time `json:"completedAt,omitempty"`

	Linter LinterResult `json:"linter,omitempty"`

	RequiredGatesResult RequiredGatesResult `json:"requiredGatesResult,omitempty"`

	Metadata map[string]string `json:"metadata,omitempty"`

	// time in seconds it took for the test to complete, either success or fail. If the test is still running, it will show the time up to the time of the request
	ExecutionTime int32 `json:"executionTime,omitempty"`

	RunId int32 `json:"runId,omitempty"`

	Trigger Trigger `json:"trigger,omitempty"`

	// Current execution state
	State string `json:"state,omitempty"`

	Result AssertionResults `json:"result,omitempty"`
}

// AssertRunGroupRunRequired checks if the required fields are not zero-ed
func AssertRunGroupRunRequired(obj RunGroupRun) error {
	if err := AssertLinterResultRequired(obj.Linter); err != nil {
		return err
	}
	if err := AssertRequiredGatesResultRequired(obj.RequiredGatesResult); err != nil {
		return err
	}
	if err := AssertTriggerRequired(obj.Trigger); err != nil {
		return err
	}
	if err := AssertAssertionResultsRequired(obj.Result); err != nil {
		return err
	}
	return nil
}

// AssertRecurseRunGroupRunRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of RunGroupRun (e.g. [][]RunGroupRun), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseRunGroupRunRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aRunGroupRun, ok := obj.(RunGroupRun)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertRunGroupRunRequired(aRunGroupRun)
	})
}
