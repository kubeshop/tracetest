version: '3'
services:
  producer-api:
    image: quick-start-producer-api
    platform: linux/amd64
    build: ./producer-api
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - 8080:8080
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=otel-collector:4317
      - OTEL_SERVICE_NAME=producer-api
      - KAFKA_BROKER_URL=kafka:9092
      - KAFKA_TOPIC=messaging
    depends_on:
      otel-collector:
        condition: service_started
      kafka:
        condition: service_healthy

  consumer-worker:
    image: quick-start-consumer-worker
    platform: linux/amd64
    build: ./consumer-worker
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=otel-collector:4317
      - OTEL_SERVICE_NAME=consumer-worker
      - KAFKA_BROKER_URL=kafka:9092
      - KAFKA_TOPIC=messaging
    depends_on:
      otel-collector:
        condition: service_started
      kafka:
        condition: service_healthy
      producer-api:
        condition: service_started

  kafka:
    image: quick-start-kafka
    build: ./kafka
    restart: unless-stopped
    environment:
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,PLAINTEXT_HOST://127.0.0.1:29092
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE=cumulative
      - OTEL_RESOURCE_ATTRIBUTES="service.namespace=quick-start-go-and-kafka"
      - OTEL_SERVICE_NAME=kafka
      - KAFKA_HEAP_OPTS=-Xmx200m -Xms200m
    healthcheck:
      test: nc -z kafka 9092
      start_period: 10s
      interval: 5s
      timeout: 10s
      retries: 10
    depends_on:
      otel-collector:
        condition: service_started
    ports:
      - 29092:29092

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.100.0
    command:
      - "--config"
      - "/otel-local-config.yaml"
    volumes:
      - ./collector.config.yaml:/otel-local-config.yaml
    ports:
      - 4317:4317
    depends_on:
      jaeger:
        condition: service_started

  jaeger:
    image: jaegertracing/all-in-one:latest
    restart: unless-stopped
    ports:
      - 16686:16686
      - 16685:16685
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    healthcheck:
      test: ["CMD", "wget", "--spider", "localhost:16686"]
      interval: 1s
      timeout: 3s
      retries: 60

  # Cloud-based Managed Tracetest
  tracetest-agent:
    image: kubeshop/tracetest-agent:latest
    environment:
      # Get the required information here: https://app.tracetest.io/retrieve-token
      - TRACETEST_API_KEY=${TRACETEST_TOKEN}
      - TRACETEST_ENVIRONMENT_ID=${TRACETEST_ENVIRONMENT_ID}
  
  tracetest-apply:
    build:
      dockerfile: Dockerfile.tracetest
    volumes:
      - ./resources:/resources
    environment:
      TRACETEST_TOKEN: ${TRACETEST_TOKEN}
      TRACETEST_ENVIRONMENT_ID: ${TRACETEST_ENVIRONMENT_ID}
    entrypoint:
      - bash
      - /resources/apply.sh
    networks:
      default: null
    depends_on:
      producer-api:
        condition: service_started
      consumer-worker:
        condition: service_started
      tracetest-agent:
        condition: service_started

  tracetest-run:
    build:
      dockerfile: Dockerfile.tracetest
    volumes:
      - ./resources:/resources
    environment:
      TRACETEST_TOKEN: ${TRACETEST_TOKEN}
      TRACETEST_ENVIRONMENT_ID: ${TRACETEST_ENVIRONMENT_ID}
    entrypoint:
      - bash
      - /resources/run.sh
    networks:
      default: null
    depends_on:
      tracetest-apply:
        condition: service_completed_successfully