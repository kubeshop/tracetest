// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.0
// source: paymentreceiver.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PaymentReceiver_ReceivePayment_FullMethodName = "/proto.PaymentReceiver/ReceivePayment"
	PaymentReceiver_NotifyPayment_FullMethodName  = "/proto.PaymentReceiver/NotifyPayment"
)

// PaymentReceiverClient is the client API for PaymentReceiver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaymentReceiverClient interface {
	ReceivePayment(ctx context.Context, in *Payment, opts ...grpc.CallOption) (*ReceivePaymentResponse, error)
	NotifyPayment(ctx context.Context, in *Empty, opts ...grpc.CallOption) (PaymentReceiver_NotifyPaymentClient, error)
}

type paymentReceiverClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentReceiverClient(cc grpc.ClientConnInterface) PaymentReceiverClient {
	return &paymentReceiverClient{cc}
}

func (c *paymentReceiverClient) ReceivePayment(ctx context.Context, in *Payment, opts ...grpc.CallOption) (*ReceivePaymentResponse, error) {
	out := new(ReceivePaymentResponse)
	err := c.cc.Invoke(ctx, PaymentReceiver_ReceivePayment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentReceiverClient) NotifyPayment(ctx context.Context, in *Empty, opts ...grpc.CallOption) (PaymentReceiver_NotifyPaymentClient, error) {
	stream, err := c.cc.NewStream(ctx, &PaymentReceiver_ServiceDesc.Streams[0], PaymentReceiver_NotifyPayment_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &paymentReceiverNotifyPaymentClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PaymentReceiver_NotifyPaymentClient interface {
	Recv() (*PaymentNotification, error)
	grpc.ClientStream
}

type paymentReceiverNotifyPaymentClient struct {
	grpc.ClientStream
}

func (x *paymentReceiverNotifyPaymentClient) Recv() (*PaymentNotification, error) {
	m := new(PaymentNotification)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PaymentReceiverServer is the server API for PaymentReceiver service.
// All implementations must embed UnimplementedPaymentReceiverServer
// for forward compatibility
type PaymentReceiverServer interface {
	ReceivePayment(context.Context, *Payment) (*ReceivePaymentResponse, error)
	NotifyPayment(*Empty, PaymentReceiver_NotifyPaymentServer) error
	mustEmbedUnimplementedPaymentReceiverServer()
}

// UnimplementedPaymentReceiverServer must be embedded to have forward compatible implementations.
type UnimplementedPaymentReceiverServer struct {
}

func (UnimplementedPaymentReceiverServer) ReceivePayment(context.Context, *Payment) (*ReceivePaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceivePayment not implemented")
}
func (UnimplementedPaymentReceiverServer) NotifyPayment(*Empty, PaymentReceiver_NotifyPaymentServer) error {
	return status.Errorf(codes.Unimplemented, "method NotifyPayment not implemented")
}
func (UnimplementedPaymentReceiverServer) mustEmbedUnimplementedPaymentReceiverServer() {}

// UnsafePaymentReceiverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentReceiverServer will
// result in compilation errors.
type UnsafePaymentReceiverServer interface {
	mustEmbedUnimplementedPaymentReceiverServer()
}

func RegisterPaymentReceiverServer(s grpc.ServiceRegistrar, srv PaymentReceiverServer) {
	s.RegisterService(&PaymentReceiver_ServiceDesc, srv)
}

func _PaymentReceiver_ReceivePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Payment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentReceiverServer).ReceivePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentReceiver_ReceivePayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentReceiverServer).ReceivePayment(ctx, req.(*Payment))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentReceiver_NotifyPayment_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PaymentReceiverServer).NotifyPayment(m, &paymentReceiverNotifyPaymentServer{stream})
}

type PaymentReceiver_NotifyPaymentServer interface {
	Send(*PaymentNotification) error
	grpc.ServerStream
}

type paymentReceiverNotifyPaymentServer struct {
	grpc.ServerStream
}

func (x *paymentReceiverNotifyPaymentServer) Send(m *PaymentNotification) error {
	return x.ServerStream.SendMsg(m)
}

// PaymentReceiver_ServiceDesc is the grpc.ServiceDesc for PaymentReceiver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentReceiver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.PaymentReceiver",
	HandlerType: (*PaymentReceiverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReceivePayment",
			Handler:    _PaymentReceiver_ReceivePayment_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "NotifyPayment",
			Handler:       _PaymentReceiver_NotifyPayment_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "paymentreceiver.proto",
}
