// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: agent.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Agent_Trigger_FullMethodName = "/proto.Agent/Trigger"
)

// AgentClient is the client API for Agent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentClient interface {
	Trigger(ctx context.Context, opts ...grpc.CallOption) (Agent_TriggerClient, error)
}

type agentClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentClient(cc grpc.ClientConnInterface) AgentClient {
	return &agentClient{cc}
}

func (c *agentClient) Trigger(ctx context.Context, opts ...grpc.CallOption) (Agent_TriggerClient, error) {
	stream, err := c.cc.NewStream(ctx, &Agent_ServiceDesc.Streams[0], Agent_Trigger_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &agentTriggerClient{stream}
	return x, nil
}

type Agent_TriggerClient interface {
	Send(*TriggerRequest) error
	CloseAndRecv() (*Ack, error)
	grpc.ClientStream
}

type agentTriggerClient struct {
	grpc.ClientStream
}

func (x *agentTriggerClient) Send(m *TriggerRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *agentTriggerClient) CloseAndRecv() (*Ack, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Ack)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AgentServer is the server API for Agent service.
// All implementations must embed UnimplementedAgentServer
// for forward compatibility
type AgentServer interface {
	Trigger(Agent_TriggerServer) error
	mustEmbedUnimplementedAgentServer()
}

// UnimplementedAgentServer must be embedded to have forward compatible implementations.
type UnimplementedAgentServer struct {
}

func (UnimplementedAgentServer) Trigger(Agent_TriggerServer) error {
	return status.Errorf(codes.Unimplemented, "method Trigger not implemented")
}
func (UnimplementedAgentServer) mustEmbedUnimplementedAgentServer() {}

// UnsafeAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentServer will
// result in compilation errors.
type UnsafeAgentServer interface {
	mustEmbedUnimplementedAgentServer()
}

func RegisterAgentServer(s grpc.ServiceRegistrar, srv AgentServer) {
	s.RegisterService(&Agent_ServiceDesc, srv)
}

func _Agent_Trigger_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AgentServer).Trigger(&agentTriggerServer{stream})
}

type Agent_TriggerServer interface {
	SendAndClose(*Ack) error
	Recv() (*TriggerRequest, error)
	grpc.ServerStream
}

type agentTriggerServer struct {
	grpc.ServerStream
}

func (x *agentTriggerServer) SendAndClose(m *Ack) error {
	return x.ServerStream.SendMsg(m)
}

func (x *agentTriggerServer) Recv() (*TriggerRequest, error) {
	m := new(TriggerRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Agent_ServiceDesc is the grpc.ServiceDesc for Agent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Agent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Agent",
	HandlerType: (*AgentServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Trigger",
			Handler:       _Agent_Trigger_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "agent.proto",
}
