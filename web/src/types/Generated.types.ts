/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/testsuites": {
    /** get testsuites */
    get: operations["getTestSuites"];
    /** Create new TestSuite */
    post: operations["createTestSuite"];
  };
  "/testsuites/{testSuiteId}": {
    /** get TestSuite */
    get: operations["getTestSuite"];
    /** update TestSuite action */
    put: operations["updateTestSuite"];
    /** delete a TestSuite */
    delete: operations["deleteTestSuite"];
  };
  "/testsuites/{testSuiteId}/version/{version}": {
    /** get a TestSuite specific version */
    get: operations["getTestSuiteVersion"];
  };
  "/testsuites/{testSuiteId}/run": {
    /** Get all runs from a particular TestSuite */
    get: operations["getTestSuiteRuns"];
    /** run a particular TestSuite */
    post: operations["runTestSuite"];
  };
  "/testsuites/{testSuiteId}/run/{runId}": {
    /** Get a specific run from a particular TestSuite */
    get: operations["getTestSuiteRun"];
    /** Delete a specific run from a particular TestSuite */
    delete: operations["deleteTestSuiteRun"];
  };
  "/tests": {
    /** get tests */
    get: operations["getTests"];
    /** Upsert new test action */
    put: operations["upsertTest"];
    /** Create new test action */
    post: operations["createTest"];
  };
  "/tests/{testId}": {
    /** get test */
    get: operations["getTest"];
    /** update test action */
    put: operations["updateTest"];
    /** delete a test */
    delete: operations["deleteTest"];
  };
  "/tests/{testId}/run": {
    /** get the runs from a particular test */
    get: operations["getTestRuns"];
    /** run a particular test */
    post: operations["runTest"];
  };
  "/tests/{testId}/run/{runId}/select": {
    /** get the spans ids that would be selected by a specific selector query */
    get: operations["getTestResultSelectedSpans"];
  };
  "/tests/{testId}/run/{runId}/dry-run": {
    /** use this method to test a definition against an actual trace without creating a new version or persisting anything */
    put: operations["dryRunAssertion"];
  };
  "/tests/{testId}/run/{runId}/rerun": {
    /** rerun a test run */
    post: operations["rerunTestRun"];
  };
  "/tests/{testId}/run/{runId}/junit.xml": {
    /** get test run results in JUnit xml format */
    get: operations["getRunResultJUnit"];
  };
  "/tests/{testId}/run/{runId}/export": {
    /** export test and test run information for debugging */
    get: operations["exportTestRun"];
  };
  "/tests/{testId}/run/{runId}/search-spans": {
    /** get spans fileter by query */
    post: operations["searchSpans"];
  };
  "/tests/import": {
    /** import test and test run information for debugging */
    post: operations["importTestRun"];
  };
  "/tests/{testId}/run/{runId}": {
    /** get a particular test Run */
    get: operations["getTestRun"];
    /** delete a test run */
    delete: operations["deleteTestRun"];
    /** update a test run */
    patch: operations["updateTestRun"];
  };
  "/tests/{testId}/definition": {
    /** Gets definition for a test */
    get: operations["getTestSpecs"];
  };
  "/tests/{testId}/version/{version}": {
    /** get a test specific version */
    get: operations["getTestVersion"];
  };
  "/tests/{testId}/run/{runId}/stop": {
    /** stops the execution of a test run */
    post: operations["stopTestRun"];
  };
  "/tests/{testId}/run/{runId}/skipPolling": {
    /** skips the trace collection of a test run */
    post: operations["skipTraceCollection"];
  };
  "/tests/{testId}/run/{runId}/events": {
    /** get events from a test run */
    get: operations["getTestRunEvents"];
  };
  "/expressions/resolve": {
    /** resolves an expression and returns the result string */
    post: operations["ExpressionResolve"];
  };
  "/resources": {
    /** get resources */
    get: operations["getResources"];
  };
  "/config/connection": {
    /** Tests the config data store/exporter connection */
    post: operations["testConnection"];
  };
  "/config/connection/otlp": {
    /** get information about the OTLP connection */
    get: operations["getOTLPConnectionInformation"];
  };
  "/config/connection/otlp/reset": {
    /** reset the OTLP connection span count */
    post: operations["resetOTLPConnectionInformation"];
  };
  "/configs": {
    /** List Tracetest configuration */
    get: operations["listConfiguration"];
  };
  "/configs/{configId}": {
    /** Get Tracetest configuration */
    get: operations["getConfiguration"];
    /** Update Tracetest configuration */
    put: operations["updateConfiguration"];
  };
  "/pollingprofiles": {
    /** List Polling Profile configuration */
    get: operations["listPollingProfile"];
  };
  "/pollingprofiles/{pollingProfileId}": {
    /** Get a polling profile used on Tracetest to configure how to fetch traces in a test. */
    get: operations["getPollingProfile"];
    /** Update a polling profile used on Tracetest to configure how to fetch traces in a test. */
    put: operations["updatePollingProfile"];
  };
  "/demos": {
    /** List demonstrations used on Tracetest as quick start examples. */
    get: operations["listDemos"];
    /** Create a demonstration used on Tracetest as quick start examples. */
    post: operations["createDemo"];
  };
  "/demos/{demoId}": {
    /** Get a demonstration used on Tracetest as quick start examples. */
    get: operations["getDemo"];
    /** Update a demonstration used on Tracetest as quick start examples. */
    put: operations["updateDemo"];
    /** Delete a demonstration used on Tracetest as quick start examples. */
    delete: operations["deleteDemo"];
  };
  "/datastores": {
    /** List Data Store */
    get: operations["listDataStore"];
  };
  "/datastores/{dataStoreId}": {
    /** Get a Data Store */
    get: operations["getDataStore"];
    /** Update a Data Store */
    put: operations["updateDataStore"];
  };
  "/variableSets": {
    /** List VariableSets available in Tracetest. */
    get: operations["listVariableSets"];
    /** Create a VariableSet that can be used by tests and test suites */
    post: operations["createVariableSet"];
  };
  "/variableSets/{variableSetId}": {
    /** Get one VariableSet by its id */
    get: operations["getVariableSet"];
    /** Update a VariableSet used on Tracetest */
    put: operations["updateVariableSet"];
    /** Delete a variable set from Tracetest */
    delete: operations["deleteVariableSet"];
  };
  "/version.{fileExtension}": {
    /** Get the version of the API */
    get: operations["getVersion"];
  };
  "/linters": {
    /** List Linters available in Tracetest. */
    get: operations["listLinters"];
    /** Create an Linter that can be used by tests and Linters */
    post: operations["createLinter"];
  };
  "/linters/{LinterId}": {
    /** Get one Linter by its id */
    get: operations["getLinter"];
    /** Update a Linter used on Tracetest */
    put: operations["updateLinter"];
    /** Delete an Linter from Tracetest */
    delete: operations["deleteLinter"];
  };
  "/wizard": {
    /** Get the configured Wizard, showing the state of each step. */
    get: operations["getWizard"];
    /** Update a Wizard used on Tracetest */
    put: operations["updateWizard"];
  };
}

export interface components {}

export interface operations {
  /** get testsuites */
  getTestSuites: {
    parameters: {};
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": external["testsuites.yaml"]["components"]["schemas"]["TestSuiteResourceList"];
          "text/yaml": {
            count?: number;
            items?: external["testsuites.yaml"]["components"]["schemas"]["TestSuiteResource"][];
          };
        };
      };
      /** invalid query for testsuites, some data was sent in incorrect format. */
      400: unknown;
      /** problem with getting testsuites */
      500: unknown;
    };
  };
  /** Create new TestSuite */
  createTestSuite: {
    responses: {
      /** successful operation */
      201: {
        content: {
          "application/json": external["testsuites.yaml"]["components"]["schemas"]["TestSuiteResource"];
          "text/yaml": external["testsuites.yaml"]["components"]["schemas"]["TestSuiteResource"];
        };
      };
      /** trying to create a TestSuite with an already existing ID */
      400: unknown;
      /** problem creating a TestSuite */
      500: unknown;
    };
    requestBody: {
      content: {
        "application/json": external["testsuites.yaml"]["components"]["schemas"]["TestSuiteResource"];
        "text/yaml": external["testsuites.yaml"]["components"]["schemas"]["TestSuiteResource"];
      };
    };
  };
  /** get TestSuite */
  getTestSuite: {
    parameters: {};
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": external["testsuites.yaml"]["components"]["schemas"]["TestSuiteResource"];
          "text/yaml": external["testsuites.yaml"]["components"]["schemas"]["TestSuiteResource"];
        };
      };
      /** TestSuite not found */
      404: unknown;
      /** problem getting an TestSuite */
      500: unknown;
    };
  };
  /** update TestSuite action */
  updateTestSuite: {
    parameters: {};
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": external["testsuites.yaml"]["components"]["schemas"]["TestSuiteResource"];
          "text/yaml": external["testsuites.yaml"]["components"]["schemas"]["TestSuiteResource"];
        };
      };
      /** invalid TestSuite, some data was sent in incorrect format. */
      400: unknown;
      /** TestSuite not found */
      404: unknown;
      /** problem updating a TestSuite */
      500: unknown;
    };
    requestBody: {
      content: {
        "application/json": external["testsuites.yaml"]["components"]["schemas"]["TestSuiteResource"];
        "text/yaml": external["testsuites.yaml"]["components"]["schemas"]["TestSuiteResource"];
      };
    };
  };
  /** delete a TestSuite */
  deleteTestSuite: {
    parameters: {};
    responses: {
      /** successful operation */
      204: never;
      /** TestSuite not found */
      404: unknown;
      /** problem deleting a TestSuite */
      500: unknown;
    };
  };
  /** get a TestSuite specific version */
  getTestSuiteVersion: {
    parameters: {};
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": external["testsuites.yaml"]["components"]["schemas"]["TestSuite"];
        };
      };
      /** problem with getting a test */
      500: unknown;
    };
  };
  /** Get all runs from a particular TestSuite */
  getTestSuiteRuns: {
    parameters: {};
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": external["testsuites.yaml"]["components"]["schemas"]["TestSuiteRun"][];
        };
      };
    };
  };
  /** run a particular TestSuite */
  runTestSuite: {
    parameters: {};
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": external["testsuites.yaml"]["components"]["schemas"]["TestSuiteRun"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": external["tests.yaml"]["components"]["schemas"]["RunInformation"];
      };
    };
  };
  /** Get a specific run from a particular TestSuite */
  getTestSuiteRun: {
    parameters: {};
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": external["testsuites.yaml"]["components"]["schemas"]["TestSuiteRun"];
        };
      };
      /** TestSuite run not found */
      404: unknown;
    };
  };
  /** Delete a specific run from a particular TestSuite */
  deleteTestSuiteRun: {
    parameters: {};
    responses: {
      /** OK */
      204: never;
      /** TestSuite run not found */
      404: unknown;
    };
  };
  /** get tests */
  getTests: {
    parameters: {};
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": external["tests.yaml"]["components"]["schemas"]["TestResourceList"];
          "text/yaml": external["tests.yaml"]["components"]["schemas"]["TestResourceList"];
        };
      };
      /** invalid query for test, some data was sent in incorrect format. */
      400: unknown;
      /** problem with getting tests */
      500: unknown;
    };
  };
  /** Upsert new test action */
  upsertTest: {
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": external["tests.yaml"]["components"]["schemas"]["TestResource"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": external["tests.yaml"]["components"]["schemas"]["TestResource"];
      };
    };
  };
  /** Create new test action */
  createTest: {
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": external["tests.yaml"]["components"]["schemas"]["TestResource"];
        };
      };
      /** trying to create a test with an already existing ID */
      400: unknown;
    };
    requestBody: {
      content: {
        "application/json": external["tests.yaml"]["components"]["schemas"]["TestResource"];
      };
    };
  };
  /** get test */
  getTest: {
    parameters: {};
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": external["tests.yaml"]["components"]["schemas"]["TestResource"];
        };
      };
      /** problem with getting a test */
      500: unknown;
    };
  };
  /** update test action */
  updateTest: {
    parameters: {};
    responses: {
      /** successful operation */
      204: never;
      /** problem with updating test */
      500: unknown;
    };
    requestBody: {
      content: {
        "application/json": external["tests.yaml"]["components"]["schemas"]["TestResource"];
      };
    };
  };
  /** delete a test */
  deleteTest: {
    parameters: {};
    responses: {
      /** OK */
      204: never;
    };
  };
  /** get the runs from a particular test */
  getTestRuns: {
    parameters: {};
    responses: {
      /** successful operation */
      200: {
        headers: {
          /** Total records count */
          "X-Total-Count"?: number;
        };
        content: {
          "application/json": external["tests.yaml"]["components"]["schemas"]["TestRun"][];
        };
      };
    };
  };
  /** run a particular test */
  runTest: {
    parameters: {};
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": external["tests.yaml"]["components"]["schemas"]["TestRun"];
        };
      };
      /** some variables are missing */
      422: {
        content: {
          "application/json": external["variables.yaml"]["components"]["schemas"]["MissingVariablesError"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": external["tests.yaml"]["components"]["schemas"]["RunInformation"];
      };
    };
  };
  /** get the spans ids that would be selected by a specific selector query */
  getTestResultSelectedSpans: {
    parameters: {};
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": external["tests.yaml"]["components"]["schemas"]["SelectedSpansResult"];
        };
      };
    };
  };
  /** use this method to test a definition against an actual trace without creating a new version or persisting anything */
  dryRunAssertion: {
    parameters: {};
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": external["tests.yaml"]["components"]["schemas"]["AssertionResults"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": external["tests.yaml"]["components"]["schemas"]["TestSpecs"];
      };
    };
  };
  /** rerun a test run */
  rerunTestRun: {
    parameters: {};
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": external["tests.yaml"]["components"]["schemas"]["TestRun"];
        };
      };
    };
  };
  /** get test run results in JUnit xml format */
  getRunResultJUnit: {
    parameters: {};
    responses: {
      /** JUnit formatted file */
      200: {
        content: {
          "application/xml": string;
        };
      };
    };
  };
  /** export test and test run information for debugging */
  exportTestRun: {
    parameters: {};
    responses: {
      /** successfuly exported test and test run information */
      200: {
        content: {
          "application/json": external["tests.yaml"]["components"]["schemas"]["ExportedTestInformation"];
        };
      };
    };
  };
  /** get spans fileter by query */
  searchSpans: {
    parameters: {};
    responses: {
      /** trace containing matching spans only */
      200: {
        content: {
          "application/json": external["tests.yaml"]["components"]["schemas"]["SearchSpansResult"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description query to filter spans, can be either a full text search or a Span Query Language query */
          query?: string;
        };
      };
    };
  };
  /** import test and test run information for debugging */
  importTestRun: {
    responses: {
      /** successfuly imported test and test run information */
      200: {
        content: {
          "application/json": external["tests.yaml"]["components"]["schemas"]["ExportedTestInformation"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": external["tests.yaml"]["components"]["schemas"]["ExportedTestInformation"];
      };
    };
  };
  /** get a particular test Run */
  getTestRun: {
    parameters: {};
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": external["tests.yaml"]["components"]["schemas"]["TestRun"];
        };
      };
    };
  };
  /** delete a test run */
  deleteTestRun: {
    parameters: {};
    responses: {
      /** OK */
      204: never;
    };
  };
  /** update a test run */
  updateTestRun: {
    parameters: {};
    responses: {
      /** successfuly updated the test run */
      200: {
        content: {
          "application/json": external["tests.yaml"]["components"]["schemas"]["TestRun"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": external["tests.yaml"]["components"]["schemas"]["TestRun"];
      };
    };
  };
  /** Gets definition for a test */
  getTestSpecs: {
    parameters: {};
    responses: {
      /** successful operation */
      201: {
        content: {
          "application/json": external["tests.yaml"]["components"]["schemas"]["TestSpecs"][];
        };
      };
    };
  };
  /** get a test specific version */
  getTestVersion: {
    parameters: {};
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": external["tests.yaml"]["components"]["schemas"]["Test"];
        };
      };
      /** problem with getting a test */
      500: unknown;
    };
  };
  /** stops the execution of a test run */
  stopTestRun: {
    parameters: {};
    responses: {
      /** successful operation */
      200: unknown;
      /** could not stop execution, probably it's not running anymore */
      422: unknown;
    };
  };
  /** skips the trace collection of a test run */
  skipTraceCollection: {
    parameters: {};
    responses: {
      /** successful operation */
      200: unknown;
      /** could not stop execution, probably it's not running anymore */
      422: unknown;
    };
  };
  /** get events from a test run */
  getTestRunEvents: {
    parameters: {};
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": external["testEvents.yaml"]["components"]["schemas"]["TestRunEvent"][];
        };
      };
    };
  };
  /** resolves an expression and returns the result string */
  ExpressionResolve: {
    responses: {
      /** successfully resolved the expression */
      200: {
        content: {
          "application/json": external["expressions.yaml"]["components"]["schemas"]["ResolveResponseInfo"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": external["expressions.yaml"]["components"]["schemas"]["ResolveRequestInfo"];
      };
    };
  };
  /** get resources */
  getResources: {
    parameters: {};
    responses: {
      /** successful operation */
      200: {
        headers: {
          /** Total records count */
          "X-Total-Count"?: number;
        };
        content: {
          "application/json": external["resources.yaml"]["components"]["schemas"]["Resource"][];
        };
      };
    };
  };
  /** Tests the config data store/exporter connection */
  testConnection: {
    responses: {
      /** Test connection Result */
      201: {
        content: {
          "application/json": external["config.yaml"]["components"]["schemas"]["TestConnectionResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "text/json": external["dataStores.yaml"]["components"]["schemas"]["DataStore"];
      };
    };
  };
  /** get information about the OTLP connection */
  getOTLPConnectionInformation: {
    responses: {
      /** The connection information was retrieved successfully */
      200: {
        content: {
          "application/json": external["config.yaml"]["components"]["schemas"]["OTLPTestConnectionResponse"];
        };
      };
      /** The connection information was not available and the connection timed out */
      408: unknown;
    };
  };
  /** reset the OTLP connection span count */
  resetOTLPConnectionInformation: {
    responses: {
      /** Ok */
      200: unknown;
    };
  };
  /** List Tracetest configuration */
  listConfiguration: {
    parameters: {};
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": external["config.yaml"]["components"]["schemas"]["ConfigurationResourceList"];
          "text/yaml": external["config.yaml"]["components"]["schemas"]["ConfigurationResourceList"];
        };
      };
      /** problem getting the configuration list */
      500: unknown;
    };
  };
  /** Get Tracetest configuration */
  getConfiguration: {
    parameters: {};
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": external["config.yaml"]["components"]["schemas"]["ConfigurationResource"];
          "text/yaml": external["config.yaml"]["components"]["schemas"]["ConfigurationResource"];
        };
      };
      /** problem getting a configuration */
      500: unknown;
    };
  };
  /** Update Tracetest configuration */
  updateConfiguration: {
    parameters: {};
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": external["config.yaml"]["components"]["schemas"]["ConfigurationResource"];
          "text/yaml": external["config.yaml"]["components"]["schemas"]["ConfigurationResource"];
        };
      };
      /** problem updating configuration */
      500: unknown;
    };
    requestBody: {
      content: {
        "application/json": external["config.yaml"]["components"]["schemas"]["ConfigurationResource"];
        "text/yaml": external["config.yaml"]["components"]["schemas"]["ConfigurationResource"];
      };
    };
  };
  /** List Polling Profile configuration */
  listPollingProfile: {
    parameters: {};
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": external["config.yaml"]["components"]["schemas"]["PollingProfileList"];
          "text/yaml": external["config.yaml"]["components"]["schemas"]["PollingProfileList"];
        };
      };
      /** problem getting the polling profile list */
      500: unknown;
    };
  };
  /** Get a polling profile used on Tracetest to configure how to fetch traces in a test. */
  getPollingProfile: {
    parameters: {};
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": external["config.yaml"]["components"]["schemas"]["PollingProfile"];
          "text/yaml": external["config.yaml"]["components"]["schemas"]["PollingProfile"];
        };
      };
      /** polling profile not found */
      404: unknown;
      /** problem getting a polling profile */
      500: unknown;
    };
  };
  /** Update a polling profile used on Tracetest to configure how to fetch traces in a test. */
  updatePollingProfile: {
    parameters: {};
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": external["config.yaml"]["components"]["schemas"]["PollingProfile"];
          "text/yaml": external["config.yaml"]["components"]["schemas"]["PollingProfile"];
        };
      };
      /** invalid polling profile, some data was sent in incorrect format. */
      400: unknown;
      /** polling profile not found */
      404: unknown;
      /** problem updating a polling profile */
      500: unknown;
    };
    requestBody: {
      content: {
        "application/json": external["config.yaml"]["components"]["schemas"]["PollingProfile"];
        "text/yaml": external["config.yaml"]["components"]["schemas"]["PollingProfile"];
      };
    };
  };
  /** List demonstrations used on Tracetest as quick start examples. */
  listDemos: {
    parameters: {};
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": external["config.yaml"]["components"]["schemas"]["DemoList"];
          "text/yaml": {
            count?: number;
            items?: external["config.yaml"]["components"]["schemas"]["Demo"][];
          };
        };
      };
      /** invalid query for demos, some data was sent in incorrect format. */
      400: unknown;
      /** problem listing demos */
      500: unknown;
    };
  };
  /** Create a demonstration used on Tracetest as quick start examples. */
  createDemo: {
    responses: {
      /** successful operation */
      201: {
        content: {
          "application/json": external["config.yaml"]["components"]["schemas"]["Demo"];
          "text/yaml": external["config.yaml"]["components"]["schemas"]["Demo"];
        };
      };
      /** problem creating a demo */
      500: unknown;
    };
    requestBody: {
      content: {
        "application/json": external["config.yaml"]["components"]["schemas"]["Demo"];
        "text/yaml": external["config.yaml"]["components"]["schemas"]["Demo"];
      };
    };
  };
  /** Get a demonstration used on Tracetest as quick start examples. */
  getDemo: {
    parameters: {};
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": external["config.yaml"]["components"]["schemas"]["Demo"];
          "text/yaml": external["config.yaml"]["components"]["schemas"]["Demo"];
        };
      };
      /** demo not found */
      404: unknown;
      /** problem getting a demo */
      500: unknown;
    };
  };
  /** Update a demonstration used on Tracetest as quick start examples. */
  updateDemo: {
    parameters: {};
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": external["config.yaml"]["components"]["schemas"]["Demo"];
          "text/yaml": external["config.yaml"]["components"]["schemas"]["Demo"];
        };
      };
      /** invalid demo, some data was sent in incorrect format. */
      400: unknown;
      /** demo not found */
      404: unknown;
      /** problem updating a demo */
      500: unknown;
    };
    requestBody: {
      content: {
        "application/json": external["config.yaml"]["components"]["schemas"]["Demo"];
        "text/yaml": external["config.yaml"]["components"]["schemas"]["Demo"];
      };
    };
  };
  /** Delete a demonstration used on Tracetest as quick start examples. */
  deleteDemo: {
    parameters: {};
    responses: {
      /** successful operation */
      204: never;
      /** invalid demo, some data was sent in incorrect format. */
      400: unknown;
      /** demo not found */
      404: unknown;
      /** problem deleting a demo */
      500: unknown;
    };
  };
  /** List Data Store */
  listDataStore: {
    parameters: {};
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": external["dataStores.yaml"]["components"]["schemas"]["DataStoreList"];
          "text/yaml": external["dataStores.yaml"]["components"]["schemas"]["DataStoreList"];
        };
      };
      /** problem getting the data store list */
      500: unknown;
    };
  };
  /** Get a Data Store */
  getDataStore: {
    parameters: {};
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": external["dataStores.yaml"]["components"]["schemas"]["DataStoreResource"];
        };
      };
      /** data store not found */
      404: unknown;
      /** problem with getting a data store */
      500: unknown;
    };
  };
  /** Update a Data Store */
  updateDataStore: {
    parameters: {};
    responses: {
      /** successful operation */
      204: never;
      /** invalid data store, some data was sent in incorrect format. */
      400: unknown;
      /** problem with updating data store */
      500: unknown;
    };
    requestBody: {
      content: {
        "application/json": external["dataStores.yaml"]["components"]["schemas"]["DataStore"];
      };
    };
  };
  /** List VariableSets available in Tracetest. */
  listVariableSets: {
    parameters: {};
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": external["variableSets.yaml"]["components"]["schemas"]["VariableSetResourceList"];
          "text/yaml": {
            count?: number;
            items?: external["variableSets.yaml"]["components"]["schemas"]["VariableSetResource"][];
          };
        };
      };
      /** invalid query for VariableSets, some data was sent in incorrect format. */
      400: unknown;
      /** problem listing VariableSets */
      500: unknown;
    };
  };
  /** Create a VariableSet that can be used by tests and test suites */
  createVariableSet: {
    responses: {
      /** successful operation */
      201: {
        content: {
          "application/json": external["variableSets.yaml"]["components"]["schemas"]["VariableSetResource"];
          "text/yaml": external["variableSets.yaml"]["components"]["schemas"]["VariableSetResource"];
        };
      };
      /** problem creating an VariableSet */
      500: unknown;
    };
    requestBody: {
      content: {
        "application/json": external["variableSets.yaml"]["components"]["schemas"]["VariableSetResource"];
        "text/yaml": external["variableSets.yaml"]["components"]["schemas"]["VariableSetResource"];
      };
    };
  };
  /** Get one VariableSet by its id */
  getVariableSet: {
    parameters: {};
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": external["variableSets.yaml"]["components"]["schemas"]["VariableSetResource"];
          "text/yaml": external["variableSets.yaml"]["components"]["schemas"]["VariableSetResource"];
        };
      };
      /** VariableSet not found */
      404: unknown;
      /** problem getting an VariableSet */
      500: unknown;
    };
  };
  /** Update a VariableSet used on Tracetest */
  updateVariableSet: {
    parameters: {};
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": external["variableSets.yaml"]["components"]["schemas"]["VariableSetResource"];
          "text/yaml": external["variableSets.yaml"]["components"]["schemas"]["VariableSetResource"];
        };
      };
      /** invalid VariableSet, some data was sent in incorrect format. */
      400: unknown;
      /** VariableSet not found */
      404: unknown;
      /** problem updating an VariableSet */
      500: unknown;
    };
    requestBody: {
      content: {
        "application/json": external["variableSets.yaml"]["components"]["schemas"]["VariableSetResource"];
        "text/yaml": external["variableSets.yaml"]["components"]["schemas"]["VariableSetResource"];
      };
    };
  };
  /** Delete a variable set from Tracetest */
  deleteVariableSet: {
    parameters: {};
    responses: {
      /** successful operation */
      204: never;
      /** invalid VariableSet, some data was sent in incorrect format. */
      400: unknown;
      /** VariableSet not found */
      404: unknown;
      /** problem deleting an variable set */
      500: unknown;
    };
  };
  /** Get the version of the API */
  getVersion: {
    parameters: {};
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": external["version.yaml"]["components"]["schemas"]["Version"];
        };
      };
      /** problem getting the version of the API */
      500: unknown;
    };
  };
  /** List Linters available in Tracetest. */
  listLinters: {
    parameters: {};
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": external["linters.yaml"]["components"]["schemas"]["LinterResourceList"];
          "text/yaml": external["linters.yaml"]["components"]["schemas"]["LinterResourceList"];
        };
      };
      /** invalid query for Linters, some data was sent in incorrect format. */
      400: unknown;
      /** problem listing Linters */
      500: unknown;
    };
  };
  /** Create an Linter that can be used by tests and Linters */
  createLinter: {
    responses: {
      /** successful operation */
      201: {
        content: {
          "application/json": external["linters.yaml"]["components"]["schemas"]["LinterResource"];
          "text/yaml": external["linters.yaml"]["components"]["schemas"]["LinterResource"];
        };
      };
      /** problem creating an Linter */
      500: unknown;
    };
    requestBody: {
      content: {
        "application/json": external["linters.yaml"]["components"]["schemas"]["LinterResource"];
        "text/yaml": external["linters.yaml"]["components"]["schemas"]["LinterResource"];
      };
    };
  };
  /** Get one Linter by its id */
  getLinter: {
    parameters: {};
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": external["linters.yaml"]["components"]["schemas"]["LinterResource"];
          "text/yaml": external["linters.yaml"]["components"]["schemas"]["LinterResource"];
        };
      };
      /** Linter not found */
      404: unknown;
      /** problem getting a Linter */
      500: unknown;
    };
  };
  /** Update a Linter used on Tracetest */
  updateLinter: {
    parameters: {};
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": external["linters.yaml"]["components"]["schemas"]["LinterResource"];
          "text/yaml": external["linters.yaml"]["components"]["schemas"]["LinterResource"];
        };
      };
      /** invalid Linter, some data was sent in incorrect format. */
      400: unknown;
      /** Linter not found */
      404: unknown;
      /** problem updating an Linter */
      500: unknown;
    };
    requestBody: {
      content: {
        "application/json": external["linters.yaml"]["components"]["schemas"]["LinterResource"];
        "text/yaml": external["linters.yaml"]["components"]["schemas"]["LinterResource"];
      };
    };
  };
  /** Delete an Linter from Tracetest */
  deleteLinter: {
    parameters: {};
    responses: {
      /** successful operation */
      204: never;
      /** invalid Linter, some data was sent in incorrect format. */
      400: unknown;
      /** Linter not found */
      404: unknown;
      /** problem deleting an Linter */
      500: unknown;
    };
  };
  /** Get the configured Wizard, showing the state of each step. */
  getWizard: {
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": external["wizards.yaml"]["components"]["schemas"]["Wizard"];
        };
      };
      /** Wizard not found */
      404: unknown;
      /** problem getting a Wizard */
      500: unknown;
    };
  };
  /** Update a Wizard used on Tracetest */
  updateWizard: {
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": external["wizards.yaml"]["components"]["schemas"]["Wizard"];
        };
      };
      /** invalid Wizard, some data was sent in incorrect format. */
      400: unknown;
      /** Wizard not found */
      404: unknown;
      /** problem updating an Wizard */
      500: unknown;
    };
    requestBody: {
      content: {
        "application/json": external["wizards.yaml"]["components"]["schemas"]["Wizard"];
      };
    };
  };
}

export interface external {
  "config.yaml": {
    paths: {};
    components: {
      schemas: {
        TestConnectionResponse: {
          successful?: boolean;
          steps?: external["config.yaml"]["components"]["schemas"]["ConnectionResult"][];
        };
        ConnectionResult: {
          portCheck?: external["config.yaml"]["components"]["schemas"]["ConnectionTestStep"];
          connectivity?: external["config.yaml"]["components"]["schemas"]["ConnectionTestStep"];
          authentication?: external["config.yaml"]["components"]["schemas"]["ConnectionTestStep"];
          fetchTraces?: external["config.yaml"]["components"]["schemas"]["ConnectionTestStep"];
        };
        ConnectionTestStep: {
          passed?: boolean;
          /** @enum {string} */
          status?: "passed" | "warning" | "failed";
          message?: string;
          error?: string;
        };
        ConfigurationResourceList: {
          count?: number;
          items?: external["config.yaml"]["components"]["schemas"]["ConfigurationResource"][];
        };
        /** @description Represents a configuration structured into the Resources format. */
        ConfigurationResource: {
          /**
           * @description Represents the type of this resource. It should always be set as 'Config'.
           * @enum {string}
           */
          type?: "Config";
          /** @description Represents the set of configuration common options for Tracetest. */
          spec?: {
            /**
             * @description ID of the configuration resource. It should always be set as 'current'.
             * @enum {string}
             */
            id?: "current";
            /**
             * @description Name given for this configuration set. It should always be set as 'Config'.
             * @enum {string}
             */
            name?: "Config";
            /** @description Flag telling if a user allow Tracetest to send analytics about its usage. */
            analyticsEnabled: boolean;
          };
        };
        PollingProfileList: {
          count?: number;
          items?: external["config.yaml"]["components"]["schemas"]["PollingProfile"][];
        };
        /** @description Represents a polling profile structured into the Resources format. */
        PollingProfile: {
          /**
           * @description Represents the type of this resource. It should always be set as 'PollingProfile'.
           * @enum {string}
           */
          type?: "PollingProfile";
          /** @description Represents the attributes of a Polling Profile. */
          spec?: {
            /** @description ID of this Polling Profile. */
            id: string;
            /** @description Name given for this profile. */
            name: string;
            /** @description Is default polling profile */
            default?: boolean;
            /**
             * @description Name of the strategy that will be used on this profile.
             * @enum {string}
             */
            strategy: "periodic";
            /** @description Configuration for the strategy 'periodic'. It only should be filled if the field strategy is equals to 'periodic'. */
            periodic?: {
              /** @description Time that the poller should wait until try to fetch more traces. It should be written in duration format (example: 1s, 30s, 1m). */
              retryDelay?: string;
              /** @description Total time that the poller should try to continue to fetch traces. It should be written in duration format (example: 1s, 30s, 1m). */
              timeout?: string;
            };
          };
        };
        /** @description Represents the settings of the Pokeshop API demonstration. */
        DemoPokeshop: {
          /** @description HTTP endpoint for Pokeshop API */
          httpEndpoint?: string;
          /** @description gRPC endpoint for Pokeshop API */
          grpcEndpoint?: string;
          /** @description kafka broker for Pokeshop API */
          kafkaBroker?: string;
        };
        /** @description Represents the settings of the Open Telemetry Store demonstration. */
        DemoOpenTelemetryStore: {
          /** @description Address of the root URL for the Frontend microservice on Open Telemetry Store. */
          frontendEndpoint?: string;
          /** @description Address of the root URL for the Product Catalog microservice on Open Telemetry Store. */
          productCatalogEndpoint?: string;
          /** @description Address of the root URL for the Cart microservice on Open Telemetry Store. */
          cartEndpoint?: string;
          /** @description Address of the root URL for the Checkout microservice on Open Telemetry Store. */
          checkoutEndpoint?: string;
        };
        /** @description Represents a demonstration API structured into the Resources format. */
        Demo: {
          /**
           * @description Represents the type of this resource. It should always be set as 'Demo'.
           * @enum {string}
           */
          type?: "Demo";
          /** @description Represents the attributes of a Demonstration API. */
          spec?: {
            id?: string;
            /**
             * @description String defining that this demo is a Open Telemetry Store demo.
             * @enum {string}
             */
            type?: "otelstore" | "pokeshop";
            /** @description Name of the demo */
            name?: string;
            /** @description Flag telling if this API is enabled on Tracetest. */
            enabled: boolean;
            pokeshop?: external["config.yaml"]["components"]["schemas"]["DemoPokeshop"];
            opentelemetryStore?: external["config.yaml"]["components"]["schemas"]["DemoOpenTelemetryStore"];
          };
        };
        DemoList: {
          count?: number;
          items?: external["config.yaml"]["components"]["schemas"]["Demo"][];
        };
        OTLPTestConnectionResponse: {
          spanCount?: number;
          lastSpanTimestamp?: string;
        };
      };
    };
    operations: {};
  };
  "dataStores.yaml": {
    paths: {};
    components: {
      schemas: {
        DataStoreList: {
          count?: number;
          items?: external["dataStores.yaml"]["components"]["schemas"]["DataStoreResource"][];
        };
        /** @description Represents a data store structured into the Resources format. */
        DataStoreResource: {
          /**
           * @description Represents the type of this resource. It should always be set as 'DataStore'.
           * @enum {string}
           */
          type?: "DataStore";
          spec?: external["dataStores.yaml"]["components"]["schemas"]["DataStore"];
        };
        DataStore: {
          id?: string;
          name: string;
          type: external["dataStores.yaml"]["components"]["schemas"]["SupportedDataStores"];
          default?: boolean;
          jaeger?: external["dataStores.yaml"]["components"]["schemas"]["GRPCClientSettings"];
          tempo?: external["dataStores.yaml"]["components"]["schemas"]["BaseClient"];
          opensearch?: external["dataStores.yaml"]["components"]["schemas"]["ElasticSearch"];
          elasticapm?: external["dataStores.yaml"]["components"]["schemas"]["ElasticSearch"];
          signalfx?: external["dataStores.yaml"]["components"]["schemas"]["SignalFX"];
          awsxray?: external["dataStores.yaml"]["components"]["schemas"]["AwsXRay"];
          azureappinsights?: external["dataStores.yaml"]["components"]["schemas"]["AzureAppInsights"];
          sumologic?: external["dataStores.yaml"]["components"]["schemas"]["SumoLogic"];
          /** Format: date-time */
          createdAt?: string;
        };
        BaseClient: {
          type?: external["dataStores.yaml"]["components"]["schemas"]["SupportedClients"];
          http?: external["dataStores.yaml"]["components"]["schemas"]["HTTPClientSettings"];
          grpc?: external["dataStores.yaml"]["components"]["schemas"]["GRPCClientSettings"];
        };
        ElasticSearch: {
          addresses?: string[];
          username?: string;
          password?: string;
          index?: string;
          certificate?: string;
          insecureSkipVerify?: boolean;
        };
        SignalFX: {
          realm?: string;
          token?: string;
        };
        AzureAppInsights: {
          useAzureActiveDirectoryAuth?: boolean;
          accessToken?: string;
          connectionType?: external["dataStores.yaml"]["components"]["schemas"]["SupportedConnectionTypes"];
          resourceArmId?: string;
        };
        AwsXRay: {
          region?: string;
          accessKeyId?: string;
          secretAccessKey?: string;
          sessionToken?: string;
          useDefaultAuth?: boolean;
        };
        SumoLogic: {
          url?: string;
          accessID?: string;
          accessKey?: string;
        };
        HTTPClientSettings: {
          url?: string;
          headers?: { [key: string]: string };
          tls?: external["dataStores.yaml"]["components"]["schemas"]["TLS"];
          auth?: external["http.yaml"]["components"]["schemas"]["HTTPAuth"];
        };
        GRPCClientSettings: {
          endpoint?: string;
          readBufferSize?: number;
          writeBufferSize?: number;
          waitForReady?: boolean;
          headers?: { [key: string]: string };
          balancerName?: string;
          /** @enum {string} */
          compression?:
            | "gzip"
            | "zlib"
            | "deflate"
            | "snappy"
            | "zstd"
            | "none"
            | "";
          tls?: external["dataStores.yaml"]["components"]["schemas"]["TLS"];
          auth?: external["http.yaml"]["components"]["schemas"]["HTTPAuth"];
        };
        TLS: {
          insecure?: boolean;
          insecureSkipVerify?: boolean;
          serverName?: string;
          settings?: external["dataStores.yaml"]["components"]["schemas"]["TLSSetting"];
        };
        TLSSetting: {
          cAFile?: string;
          certFile?: string;
          keyFile?: string;
          minVersion?: string;
          maxVersion?: string;
        };
        /** @enum {string} */
        SupportedDataStores:
          | "jaeger"
          | "opensearch"
          | "tempo"
          | "signalfx"
          | "otlp"
          | "elasticapm"
          | "newrelic"
          | "lightstep"
          | "datadog"
          | "awsxray"
          | "honeycomb"
          | "azureappinsights"
          | "signoz"
          | "dynatrace"
          | "sumologic"
          | "instana";
        /** @enum {string} */
        SupportedClients: "http" | "grpc";
        /** @enum {string} */
        SupportedConnectionTypes: "direct" | "collector";
      };
    };
    operations: {};
  };
  "expressions.yaml": {
    paths: {};
    components: {
      schemas: {
        ResolveRequestInfo: {
          expression?: string;
          context?: external["expressions.yaml"]["components"]["schemas"]["ResolveContext"];
        };
        ResolveContext: {
          testId?: string;
          runId?: number;
          spanId?: string;
          selector?: string;
          variableSetId?: string;
        };
        ResolveResponseInfo: {
          resolvedValues?: string[];
        };
      };
    };
    operations: {};
  };
  "grpc.yaml": {
    paths: {};
    components: {
      schemas: {
        GRPCHeader: {
          key?: string;
          value?: string;
        };
        GRPCRequest: {
          protobufFile?: string;
          address?: string;
          service?: string;
          method?: string;
          metadata?: external["grpc.yaml"]["components"]["schemas"]["GRPCHeader"][];
          auth?: external["http.yaml"]["components"]["schemas"]["HTTPAuth"];
          request?: string;
        };
        GRPCResponse: {
          statusCode?: number;
          metadata?: external["grpc.yaml"]["components"]["schemas"]["GRPCHeader"][];
          body?: string;
        };
      };
    };
    operations: {};
  };
  "http.yaml": {
    paths: {};
    components: {
      schemas: {
        HTTPHeader: {
          key?: string;
          value?: string;
        };
        HTTPRequest: {
          url?: string;
          /** @enum {string} */
          method?:
            | "GET"
            | "PUT"
            | "POST"
            | "PATCH"
            | "DELETE"
            | "COPY"
            | "HEAD"
            | "OPTIONS"
            | "LINK"
            | "UNLINK"
            | "PURGE"
            | "LOCK"
            | "UNLOCK"
            | "PROPFIND"
            | "VIEW";
          headers?: external["http.yaml"]["components"]["schemas"]["HTTPHeader"][];
          body?: string;
          auth?: external["http.yaml"]["components"]["schemas"]["HTTPAuth"];
          sslVerification?: boolean;
        };
        HTTPResponse: {
          status?: string;
          statusCode?: number;
          headers?: external["http.yaml"]["components"]["schemas"]["HTTPHeader"][];
          body?: string;
        };
        HTTPAuth: {
          /** @enum {string} */
          type?: "apiKey" | "basic" | "bearer";
          apiKey?: {
            key?: string;
            value?: string;
            /** @enum {string} */
            in?: "query" | "header";
          };
          basic?: {
            username?: string;
            password?: string;
          };
          bearer?: {
            token?: string;
          };
        };
      };
    };
    operations: {};
  };
  "kafka.yaml": {
    paths: {};
    components: {
      schemas: {
        KafkaRequest: {
          brokerUrls?: string[];
          topic?: string;
          authentication?: external["kafka.yaml"]["components"]["schemas"]["KafkaAuthentication"];
          sslVerification?: boolean;
          headers?: external["kafka.yaml"]["components"]["schemas"]["KafkaMessageHeader"][];
          messageKey?: string;
          messageValue?: string;
        };
        KafkaResponse: {
          partition?: string;
          offset?: string;
        };
        KafkaMessageHeader: {
          key?: string;
          value?: string;
        };
        KafkaAuthentication: {
          /** @enum {string} */
          type?: "plain";
          plain?: {
            username?: string;
            password?: string;
          };
        };
      };
    };
    operations: {};
  };
  "linters.yaml": {
    paths: {};
    components: {
      schemas: {
        LinterResourceList: {
          items?: external["linters.yaml"]["components"]["schemas"]["LinterResource"][];
        };
        LinterResource: {
          /** @enum {string} */
          type?: "Linter";
          spec?: {
            id?: string;
            name?: string;
            enabled?: boolean;
            minimumScore?: number;
            plugins?: external["linters.yaml"]["components"]["schemas"]["LinterResourcePlugin"][];
          };
        };
        LinterResourcePlugin: {
          id?: string;
          name?: string;
          description?: string;
          enabled?: boolean;
          rules?: external["linters.yaml"]["components"]["schemas"]["LinterResourceRule"][];
        };
        LinterResourceRule: {
          id?: string;
          weight?: number;
          name?: string;
          description?: string;
          errorDescription?: string;
          tips?: string[];
          /** @enum {string} */
          errorLevel?: "error" | "warning" | "disabled";
        };
        LinterResult: {
          minimumScore?: number;
          passed?: boolean;
          score?: number;
          plugins?: external["linters.yaml"]["components"]["schemas"]["LinterResultPlugin"][];
        };
        LinterResultPlugin: {
          name?: string;
          description?: string;
          passed?: boolean;
          score?: number;
          rules?: external["linters.yaml"]["components"]["schemas"]["LinterResultPluginRule"][];
        };
        LinterResultPluginRule: {
          id?: string;
          name?: string;
          description?: string;
          errorDescription?: string;
          passed?: boolean;
          weight?: number;
          tips?: string[];
          results?: external["linters.yaml"]["components"]["schemas"]["LinterResultPluginRuleResult"][];
          /** @enum {string} */
          level?: "error" | "warning" | "disabled";
        };
        LinterResultPluginRuleResult: {
          spanId?: string;
          errors?: external["linters.yaml"]["components"]["schemas"]["LinterResultPluginRuleResultError"][];
          passed?: boolean;
          /** @enum {string} */
          severity?: "error" | "warning";
        };
        LinterResultPluginRuleResultError: {
          value?: string;
          expected?: string;
          description?: string;
          suggestions?: string[];
        };
      };
    };
    operations: {};
  };
  "parameters.yaml": {
    paths: {};
    components: {
      parameters: {
        /** @description id of the test */
        testId: string;
        /** @description id of the run */
        runId: number;
        /** @description version of the test */
        version: number;
        /** @description id of the TestSuite */
        testSuiteId: string;
        /** @description indicates how many resources can be returned by each page */
        take: number;
        /** @description indicates how many resources will be skipped when paginating */
        skip: number;
        /** @description query to search resources */
        query: string;
        /** @description indicates the sort field for the resources */
        runnableResourceSortBy: "created" | "name" | "last_run";
        /** @description indicates the sort field for the resources */
        sortBy: "created" | "name";
        /** @description indicates the sort field for the resources */
        switchableResourceSortBy: "type" | "enabled";
        /** @description indicates the sort direction for the resources */
        sortDirection: "asc" | "desc";
        /** @description ID of the configuration resource used on Tracetest. It should be set as 'current' */
        configId: string;
        /** @description ID of a demonstration used on Tracetest as quick start examples */
        demoId: string;
        /** @description ID of a polling profile used on Tracetest to configure how to fetch traces in a test. It should be set as 'current' */
        pollingProfileId: string;
        /** @description ID of a datastore used on Tracetest to configure how to fetch traces in a test */
        dataStoreId: string;
        /** @description ID of a VariableSet used on Tracetest to inject values into tests and TestSuites */
        variableSetId: string;
        /** @description ID of an Linter */
        LinterId: string;
        fileExtension: string;
      };
    };
    operations: {};
  };
  "resources.yaml": {
    paths: {};
    components: {
      schemas: {
        Resource: {
          type: string;
          item: unknown;
        };
      };
    };
    operations: {};
  };
  "testEvents.yaml": {
    paths: {};
    components: {
      schemas: {
        TestRunEvent: {
          type?: string;
          /** @enum {string} */
          stage?: "trigger" | "trace" | "test";
          title?: string;
          description?: string;
          /** Format: date-time */
          createdAt?: string;
          testId?: string;
          runId?: number;
          dataStoreConnection?: external["config.yaml"]["components"]["schemas"]["ConnectionResult"];
          polling?: external["testEvents.yaml"]["components"]["schemas"]["PollingInfo"];
          outputs?: external["testEvents.yaml"]["components"]["schemas"]["OutputInfo"][];
        };
        PollingInfo: {
          /** @enum {string} */
          type?: "periodic";
          isComplete?: boolean;
          periodic?: {
            numberSpans?: number;
            numberIterations?: number;
          };
        };
        OutputInfo: {
          /** @enum {string} */
          logLevel?: "warning" | "error";
          message?: string;
          outputName?: string;
        };
      };
    };
    operations: {};
  };
  "testRunner.yaml": {
    paths: {};
    components: {
      schemas: {
        TestRunnerResource: {
          /**
           * @description Represents the type of this resource. It should always be set as 'TestRunner'.
           * @enum {string}
           */
          type?: "TestRunner";
          spec?: external["testRunner.yaml"]["components"]["schemas"]["TestRunner"];
        };
        TestRunner: {
          /**
           * @description ID of the test runner resource. It should always be set as 'current'.
           * @enum {string}
           */
          id?: "current";
          /** @description Name given for this test runner set */
          name?: string;
          requiredGates?: external["testRunner.yaml"]["components"]["schemas"]["SupportedGates"][];
        };
        RequiredGatesResult: {
          required: external["testRunner.yaml"]["components"]["schemas"]["SupportedGates"][];
          failed: external["testRunner.yaml"]["components"]["schemas"]["SupportedGates"][];
          passed: boolean;
        };
        /** @enum {string} */
        SupportedGates: "analyzer-score" | "analyzer-rules" | "test-specs";
      };
    };
    operations: {};
  };
  "tests.yaml": {
    paths: {};
    components: {
      schemas: {
        TestResourceList: {
          count?: number;
          items?: external["tests.yaml"]["components"]["schemas"]["TestResource"][];
        };
        /** @description Represents a test structured into the Resources format. */
        TestResource: {
          /**
           * @description Represents the type of this resource. It should always be set as 'Test'.
           * @enum {string}
           */
          type?: "Test";
          spec?: external["tests.yaml"]["components"]["schemas"]["Test"];
        };
        Test: {
          id?: string;
          name?: string;
          description?: string;
          /** @description version number of the test */
          version?: number;
          /** Format: date-time */
          createdAt?: string;
          trigger?: external["triggers.yaml"]["components"]["schemas"]["Trigger"];
          /** @description If true, the test will not collect a trace */
          skipTraceCollection?: boolean;
          /** @description specification of assertions that are going to be made */
          specs?: external["tests.yaml"]["components"]["schemas"]["TestSpec"][];
          /**
           * @description define test outputs, in a key/value format. The value is processed as an expression
           * @example [object Object],[object Object]
           */
          outputs?: external["tests.yaml"]["components"]["schemas"]["TestOutput"][];
          /** @description summary of test data */
          summary?: external["tests.yaml"]["components"]["schemas"]["TestSummary"];
        };
        TestOutput: {
          name?: string;
          selector?: string;
          selectorParsed?: external["tests.yaml"]["components"]["schemas"]["Selector"];
          value?: string;
        };
        TestSummary: {
          runs?: number;
          lastRun?: {
            /** Format: date-time */
            time?: string | null;
            passes?: number;
            fails?: number;
            analyzerScore?: number;
          };
        };
        /** @example [object Object] */
        TestSpecs: {
          specs?: external["tests.yaml"]["components"]["schemas"]["TestSpec"][];
        };
        TestSpec: {
          name?: string;
          selector?: string;
          selectorParsed?: external["tests.yaml"]["components"]["schemas"]["Selector"];
          assertions?: string[];
        };
        TestRun: {
          id?: number;
          traceId?: string;
          spanId?: string;
          /** @description Test version used when running this test run */
          testVersion?: number;
          /**
           * @description Current execution state
           * @enum {string}
           */
          state?:
            | "CREATED"
            | "EXECUTING"
            | "AWAITING_TRACE"
            | "AWAITING_TEST_RESULTS"
            | "ANALYZING_TRACE"
            | "ANALYZING_ERROR"
            | "FINISHED"
            | "STOPPED"
            | "TRIGGER_FAILED"
            | "TRACE_FAILED"
            | "ASSERTION_FAILED";
          /** @description Details of the cause for the last `FAILED` state */
          lastErrorState?: string;
          /** @description time in seconds it took for the test to complete, either success or fail. If the test is still running, it will show the time up to the time of the request */
          executionTime?: number;
          /** @description time in milliseconds it took for the triggering testSuite to complete, either success or fail. If the test is still running, it will show the time up to the time of the request */
          triggerTime?: number;
          /** Format: date-time */
          createdAt?: string;
          /** Format: date-time */
          serviceTriggeredAt?: string;
          /** Format: date-time */
          serviceTriggerCompletedAt?: string;
          /** Format: date-time */
          obtainedTraceAt?: string;
          /** Format: date-time */
          completedAt?: string;
          variableSet?: external["variableSets.yaml"]["components"]["schemas"]["VariableSet"];
          resolvedTrigger?: external["triggers.yaml"]["components"]["schemas"]["Trigger"];
          triggerResult?: external["triggers.yaml"]["components"]["schemas"]["TriggerResult"];
          trace?: external["trace.yaml"]["components"]["schemas"]["Trace"];
          result?: external["tests.yaml"]["components"]["schemas"]["AssertionResults"];
          linter?: external["linters.yaml"]["components"]["schemas"]["LinterResult"];
          outputs?: {
            name?: string;
            spanId?: string;
            value?: string;
            error?: string;
          }[];
          requiredGatesResult?: external["testRunner.yaml"]["components"]["schemas"]["RequiredGatesResult"];
          metadata?: { [key: string]: string };
          testSuiteId?: string;
          testSuiteRunId?: number;
        };
        RunInformation: {
          metadata?: { [key: string]: string } | null;
          variableSetId?: string;
          variables?: external["variableSets.yaml"]["components"]["schemas"]["VariableSetValue"][];
          requiredGates?:
            | external["testRunner.yaml"]["components"]["schemas"]["SupportedGates"][]
            | null;
        };
        /** @example [object Object] */
        AssertionResults: {
          allPassed?: boolean;
          results?: {
            selector?: external["tests.yaml"]["components"]["schemas"]["Selector"];
            results?: external["tests.yaml"]["components"]["schemas"]["AssertionResult"][];
          }[];
        };
        AssertionResult: {
          assertion?: string;
          allPassed?: boolean;
          spanResults?: external["tests.yaml"]["components"]["schemas"]["AssertionSpanResult"][];
        };
        AssertionSpanResult: {
          spanId?: string;
          observedValue?: string;
          passed?: boolean;
          error?: string;
        };
        DefinitionFile: {
          content?: string;
        };
        SelectedSpansResult: {
          selector?: external["tests.yaml"]["components"]["schemas"]["Selector"];
          spanIds?: string[];
        };
        SearchSpansResult: {
          spansIds?: string[];
        };
        Selector: {
          query?: string;
          structure?: external["tests.yaml"]["components"]["schemas"]["SpanSelector"][];
        };
        SpanSelector: {
          filters: external["tests.yaml"]["components"]["schemas"]["SelectorFilter"][];
          pseudoClass?: external["tests.yaml"]["components"]["schemas"]["SelectorPseudoClass"];
          childSelector?: external["tests.yaml"]["components"]["schemas"]["SpanSelector"];
        } | null;
        SelectorFilter: {
          property: string;
          operator: string;
          value: string;
        };
        SelectorPseudoClass: {
          name: string;
          argument?: number;
        } | null;
        ExportedTestInformation: {
          test: external["tests.yaml"]["components"]["schemas"]["Test"];
          run: external["tests.yaml"]["components"]["schemas"]["TestRun"];
        };
      };
    };
    operations: {};
  };
  "testsuites.yaml": {
    paths: {};
    components: {
      schemas: {
        TestSuiteResourceList: {
          count?: number;
          items?: external["testsuites.yaml"]["components"]["schemas"]["TestSuiteResource"][];
        };
        /** @description Represents a TestSuite structured into the Resources format. */
        TestSuiteResource: {
          /**
           * @description Represents the type of this resource. It should always be set as 'TestSuite'.
           * @enum {string}
           */
          type?: "TestSuite";
          spec?: external["testsuites.yaml"]["components"]["schemas"]["TestSuite"];
        };
        TestSuite: {
          id?: string;
          name?: string;
          description?: string;
          /** @description version number of the test */
          version?: number;
          /** @description list of steps of the TestSuite containing just each test id */
          steps?: string[];
          /** @description list of steps of the TestSuite containing the whole test object */
          fullSteps?: external["tests.yaml"]["components"]["schemas"]["Test"][];
          /** Format: date-time */
          createdAt?: string;
          /** @description summary of TestSuite */
          summary?: external["tests.yaml"]["components"]["schemas"]["TestSummary"];
        };
        TestSuiteRun: {
          id?: number;
          version?: number;
          /** Format: date-time */
          createdAt?: string;
          /** Format: date-time */
          completedAt?: string;
          /** @enum {string} */
          state?: "CREATED" | "EXECUTING" | "FINISHED" | "FAILED";
          steps?: external["tests.yaml"]["components"]["schemas"]["TestRun"][];
          variableSet?: external["variableSets.yaml"]["components"]["schemas"]["VariableSet"];
          metadata?: { [key: string]: string };
          pass?: number;
          fail?: number;
          allStepsRequiredGatesPassed?: boolean;
        };
      };
    };
    operations: {};
  };
  "trace.yaml": {
    paths: {};
    components: {
      schemas: {
        Trace: {
          traceId?: string;
          tree?: external["trace.yaml"]["components"]["schemas"]["Span"];
          /** @description flattened version, mapped as spanId -> span{} */
          flat?: {
            [
              key: string
            ]: external["trace.yaml"]["components"]["schemas"]["Span"];
          };
        };
        Span: {
          id?: string;
          parentId?: string;
          name?: string;
          kind?: string;
          /**
           * Format: int64
           * @description span start time in unix milli format
           * @example 1656701595277
           */
          startTime?: number;
          /**
           * Format: int64
           * @description span end time in unix milli format
           * @example 1656701595800
           */
          endTime?: number;
          /**
           * @description Key-Value of span attributes
           * @example [object Object]
           */
          attributes?: { [key: string]: string };
          children?: external["trace.yaml"]["components"]["schemas"]["Span"][];
        };
      };
    };
    operations: {};
  };
  "traceid.yaml": {
    paths: {};
    components: {
      schemas: {
        TRACEIDRequest: {
          id?: string;
        };
        TRACEIDResponse: {
          id?: string;
        };
      };
    };
    operations: {};
  };
  "triggers.yaml": {
    paths: {};
    components: {
      schemas: {
        Trigger: {
          /** @enum {string} */
          type?:
            | "http"
            | "grpc"
            | "traceid"
            | "kafka"
            | "cypress"
            | "playwright";
          httpRequest?: external["http.yaml"]["components"]["schemas"]["HTTPRequest"];
          grpc?: external["grpc.yaml"]["components"]["schemas"]["GRPCRequest"];
          traceid?: external["traceid.yaml"]["components"]["schemas"]["TRACEIDRequest"];
          kafka?: external["kafka.yaml"]["components"]["schemas"]["KafkaRequest"];
        };
        TriggerResult: {
          /** @enum {string} */
          type?:
            | "http"
            | "grpc"
            | "traceid"
            | "kafka"
            | "cypress"
            | "playwright";
          triggerResult?: {
            http?: external["http.yaml"]["components"]["schemas"]["HTTPResponse"];
            grpc?: external["grpc.yaml"]["components"]["schemas"]["GRPCResponse"];
            traceid?: external["traceid.yaml"]["components"]["schemas"]["TRACEIDResponse"];
            kafka?: external["kafka.yaml"]["components"]["schemas"]["KafkaResponse"];
            error?: external["triggers.yaml"]["components"]["schemas"]["TriggerError"];
          };
        };
        TriggerError: {
          connectionError?: boolean;
          runningOnContainer?: boolean;
          targetsLocalhost?: boolean;
          message?: string;
        };
      };
    };
    operations: {};
  };
  "variables.yaml": {
    paths: {};
    components: {
      schemas: {
        MissingVariablesError: {
          missingVariables?: external["variables.yaml"]["components"]["schemas"]["MissingVariable"][];
        };
        MissingVariable: {
          testId?: string;
          variables?: external["variables.yaml"]["components"]["schemas"]["Variable"][];
        };
        Variable: {
          key?: string;
          defaultValue?: string;
        };
      };
    };
    operations: {};
  };
  "variableSets.yaml": {
    paths: {};
    components: {
      schemas: {
        VariableSetResourceList: {
          count?: number;
          items?: external["variableSets.yaml"]["components"]["schemas"]["VariableSetResource"][];
        };
        /** @description Represents a VariableSet structured into the Resources format. */
        VariableSetResource: {
          /**
           * @description Represents the type of this resource. It should always be set as 'VariableSet'.
           * @enum {string}
           */
          type?: "VariableSet";
          spec?: external["variableSets.yaml"]["components"]["schemas"]["VariableSet"];
        };
        VariableSet: {
          id?: string;
          name?: string;
          description?: string;
          values?: external["variableSets.yaml"]["components"]["schemas"]["VariableSetValue"][];
        };
        VariableSetValue: {
          key?: string;
          value?: string;
        };
      };
    };
    operations: {};
  };
  "version.yaml": {
    paths: {};
    components: {
      schemas: {
        Version: {
          /** @example 1.0.0 */
          version?: string;
          /** @enum {string} */
          type?: "oss";
          uiEndpoint?: string;
          agentEndpoint?: string;
          apiEndpoint?: string;
        };
      };
    };
    operations: {};
  };
  "wizards.yaml": {
    paths: {};
    components: {
      schemas: {
        Wizard: {
          steps?: external["wizards.yaml"]["components"]["schemas"]["WizardStep"][];
        };
        WizardStep: {
          /** @enum {string} */
          id?: "tracing_backend" | "create_test" | "agent";
          /** @enum {string} */
          state?: "inProgress" | "completed" | "pending";
          /** Format: date-time */
          completedAt?: string;
        };
      };
    };
    operations: {};
  };
}
