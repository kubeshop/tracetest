/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/definition.yaml": {
    /** Upsert a definition */
    put: operations["upsertDefinition"];
    /** Execute a definition */
    post: operations["executeDefinition"];
  };
  "/transactions": {
    /** get transactions */
    get: operations["getTransactions"];
    /** Create new transaction */
    post: operations["createTransaction"];
  };
  "/transactions/{transactionId}": {
    /** get transaction */
    get: operations["getTransaction"];
    /** update transaction action */
    put: operations["updateTransaction"];
    /** delete a transaction */
    delete: operations["deleteTransaction"];
  };
  "/transactions/{transactionId}/version/{version}": {
    /** get a transaction specific version */
    get: operations["getTransactionVersion"];
  };
  "/transactions/{transactionId}/version/{version}/definition.yaml": {
    /** Get the transaction as an YAML file */
    get: operations["getTransactionVersionDefinitionFile"];
  };
  "/transactions/{transactionId}/run": {
    /** Get all runs from a particular transaction */
    get: operations["getTransactionRuns"];
    /** run a particular transaction */
    post: operations["runTransaction"];
  };
  "/transactions/{transactionId}/run/{runId}": {
    /** Get a specific run from a particular transaction */
    get: operations["getTransactionRun"];
    /** Delete a specific run from a particular transaction */
    delete: operations["deleteTransactionRun"];
  };
  "/tests": {
    /** get tests */
    get: operations["getTests"];
    /** Create new test action */
    post: operations["createTest"];
  };
  "/tests/{testId}": {
    /** get test */
    get: operations["getTest"];
    /** update test action */
    put: operations["updateTest"];
    /** delete a test */
    delete: operations["deleteTest"];
  };
  "/tests/{testId}/run": {
    /** get the runs from a particular test */
    get: operations["getTestRuns"];
    /** run a particular test */
    post: operations["runTest"];
  };
  "/tests/{testId}/run/{runId}/select": {
    /** get the spans ids that would be selected by a specific selector query */
    get: operations["getTestResultSelectedSpans"];
  };
  "/tests/{testId}/run/{runId}/dry-run": {
    /** use this method to test a definition against an actual trace without creating a new version or persisting anything */
    put: operations["dryRunAssertion"];
  };
  "/tests/{testId}/run/{runId}/rerun": {
    /** rerun a test run */
    post: operations["rerunTestRun"];
  };
  "/tests/{testId}/run/{runId}/junit.xml": {
    /** get test run results in JUnit xml format */
    get: operations["getRunResultJUnit"];
  };
  "/tests/{testId}/run/{runId}/export": {
    /** export test and test run information for debugging */
    get: operations["exportTestRun"];
  };
  "/tests/import": {
    /** import test and test run information for debugging */
    post: operations["importTestRun"];
  };
  "/tests/{testId}/run/{runId}": {
    /** get a particular test Run */
    get: operations["getTestRun"];
    /** delete a test run */
    delete: operations["deleteTestRun"];
  };
  "/tests/{testId}/definition": {
    /** Gets definition for a test */
    get: operations["getTestSpecs"];
  };
  "/tests/{testId}/version/{version}": {
    /** get a test specific version */
    get: operations["getTestVersion"];
  };
  "/tests/{testId}/version/{version}/definition.yaml": {
    /** Get the test definition as an YAML file */
    get: operations["getTestVersionDefinitionFile"];
  };
  "/environments": {
    /** Get Environments */
    get: operations["getEnvironments"];
    /** Create new environment action */
    post: operations["createEnvironment"];
  };
  "/environments/{environmentId}": {
    /** get environment */
    get: operations["getEnvironment"];
    /** update environment action */
    put: operations["updateEnvironment"];
    /** delete a environment */
    delete: operations["deleteEnvironment"];
  };
  "/environments/{environmentId}/definition.yaml": {
    /** Get the environment as an YAML file */
    get: operations["getEnvironmentDefinitionFile"];
  };
  "/expressions/resolve": {
    /** resolves an expression and returns the result string */
    post: operations["ExpressionResolve"];
  };
  "/resources": {
    /** get resources */
    get: operations["getResources"];
  };
  "/config/connection": {
    /** Tests the config data store/exporter connection */
    post: operations["testConnection"];
  };
  "/config/{configId}": {
    /** Get Tracetest configuration */
    get: operations["getConfiguration"];
    /** Update Tracetest configuration */
    put: operations["updateConfiguration"];
  };
  "/pollingprofile": {
    /** List polling profiles used on Tracetest to configure how to fetch traces in a test. */
    get: operations["listPollingProfiles"];
    /** Create a polling profile used on Tracetest to configure how to fetch traces in a test. */
    post: operations["createPollingProfile"];
  };
  "/pollingprofile/{pollingProfileId}": {
    /** Get a polling profile used on Tracetest to configure how to fetch traces in a test. */
    get: operations["getPollingProfile"];
    /** Update a polling profile used on Tracetest to configure how to fetch traces in a test. */
    put: operations["updatePollingProfile"];
    /** Delete a polling profile used on Tracetest to configure how to fetch traces in a test. */
    delete: operations["deletePollingProfile"];
  };
  "/demo": {
    /** List demonstrations used on Tracetest as quick start examples. */
    get: operations["listDemos"];
    /** Create a demonstration used on Tracetest as quick start examples. */
    post: operations["createDemo"];
  };
  "/demo/{demoId}": {
    /** Get a demonstration used on Tracetest as quick start examples. */
    get: operations["getDemo"];
    /** Update a demonstration used on Tracetest as quick start examples. */
    put: operations["updateDemo"];
    /** Delete a demonstration used on Tracetest as quick start examples. */
    delete: operations["deleteDemo"];
  };
  "/datastores": {
    /** Get all Data Stores */
    get: operations["getDataStores"];
    /** Create a new Data Store */
    post: operations["createDataStore"];
  };
  "/datastores/{dataStoreId}": {
    /** Get a Data Store */
    get: operations["getDataStore"];
    /** Update a Data Store */
    put: operations["updateDataStore"];
    /** Delete a Data Store */
    delete: operations["deleteDataStore"];
  };
  "/datastores/{dataStoreId}/definition.yaml": {
    /** Get the data store as an YAML file */
    get: operations["getDataStoreDefinitionFile"];
  };
}

export interface components {}

export interface operations {
  /** Upsert a definition */
  upsertDefinition: {
    responses: {
      /** Definition updated */
      200: {
        content: {
          "application/json": external["definition.yaml"]["components"]["schemas"]["UpsertDefinitionResponse"];
        };
      };
      /** Definition created */
      201: {
        content: {
          "application/json": external["definition.yaml"]["components"]["schemas"]["UpsertDefinitionResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "text/json": external["definition.yaml"]["components"]["schemas"]["TextDefinition"];
      };
    };
  };
  /** Execute a definition */
  executeDefinition: {
    responses: {
      /** Definition updated */
      200: {
        content: {
          "application/json": external["definition.yaml"]["components"]["schemas"]["ExecuteDefinitionResponse"];
        };
      };
      /** Definition created */
      201: {
        content: {
          "application/json": external["definition.yaml"]["components"]["schemas"]["ExecuteDefinitionResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "text/json": external["definition.yaml"]["components"]["schemas"]["TextDefinition"];
      };
    };
  };
  /** get transactions */
  getTransactions: {
    parameters: {
      query: {
        /** indicates how many transactions can be returned by each page */
        take?: number;
        /** indicates how many transactions will be skipped when paginating */
        skip?: number;
        /** query to search transactions, based on transaction name and description */
        query?: string;
        /** indicates the sort field for the transactions */
        sortBy?: "created" | "name" | "last_run";
        /** indicates the sort direction for the transactions */
        sortDirection?: "asc" | "desc";
      };
    };
    responses: {
      /** successful operation */
      200: {
        headers: {
          /** Total records count */
          "X-Total-Count"?: number;
        };
        content: {
          "application/json": external["transactions.yaml"]["components"]["schemas"]["Transaction"][];
        };
      };
      /** problem with getting transactions */
      500: unknown;
    };
  };
  /** Create new transaction */
  createTransaction: {
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": external["transactions.yaml"]["components"]["schemas"]["Transaction"];
        };
      };
      /** trying to create a transaction with an already existing ID */
      400: unknown;
    };
    requestBody: {
      content: {
        "application/json": external["transactions.yaml"]["components"]["schemas"]["Transaction"];
      };
    };
  };
  /** get transaction */
  getTransaction: {
    parameters: {
      path: {
        transactionId: string;
      };
    };
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": external["transactions.yaml"]["components"]["schemas"]["Transaction"];
        };
      };
      /** problem with getting a transaction */
      500: unknown;
    };
  };
  /** update transaction action */
  updateTransaction: {
    parameters: {
      path: {
        transactionId: string;
      };
    };
    responses: {
      /** successful operation */
      204: never;
      /** problem with updating transaction */
      500: unknown;
    };
    requestBody: {
      content: {
        "application/json": external["transactions.yaml"]["components"]["schemas"]["Transaction"];
      };
    };
  };
  /** delete a transaction */
  deleteTransaction: {
    parameters: {
      path: {
        transactionId: string;
      };
    };
    responses: {
      /** OK */
      204: never;
    };
  };
  /** get a transaction specific version */
  getTransactionVersion: {
    parameters: {
      path: {
        transactionId: string;
        version: number;
      };
    };
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": external["transactions.yaml"]["components"]["schemas"]["Transaction"];
        };
      };
      /** problem with getting a test */
      500: unknown;
    };
  };
  /** Get the transaction as an YAML file */
  getTransactionVersionDefinitionFile: {
    parameters: {
      path: {
        transactionId: string;
        version: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/yaml": string;
        };
      };
    };
  };
  /** Get all runs from a particular transaction */
  getTransactionRuns: {
    parameters: {
      path: {
        transactionId: string;
      };
      query: {
        /** indicates how many results can be returned by each page */
        take?: number;
        /** indicates how many results will be skipped when paginating */
        skip?: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": external["transactions.yaml"]["components"]["schemas"]["TransactionRun"][];
        };
      };
    };
  };
  /** run a particular transaction */
  runTransaction: {
    parameters: {
      path: {
        transactionId: string;
      };
    };
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": external["transactions.yaml"]["components"]["schemas"]["TransactionRun"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": external["tests.yaml"]["components"]["schemas"]["RunInformation"];
      };
    };
  };
  /** Get a specific run from a particular transaction */
  getTransactionRun: {
    parameters: {
      path: {
        transactionId: string;
        runId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": external["transactions.yaml"]["components"]["schemas"]["TransactionRun"];
        };
      };
      /** transaction run not found */
      404: unknown;
    };
  };
  /** Delete a specific run from a particular transaction */
  deleteTransactionRun: {
    parameters: {
      path: {
        transactionId: string;
        runId: number;
      };
    };
    responses: {
      /** OK */
      204: never;
      /** transaction run not found */
      404: unknown;
    };
  };
  /** get tests */
  getTests: {
    parameters: {
      query: {
        /** indicates how many tests can be returned by each page */
        take?: number;
        /** indicates how many tests will be skipped when paginating */
        skip?: number;
        /** query to search tests, based on test name and description */
        query?: string;
        /** indicates the sort field for the tests */
        sortBy?: "created" | "name" | "last_run";
        /** indicates the sort direction for the tests */
        sortDirection?: "asc" | "desc";
      };
    };
    responses: {
      /** successful operation */
      200: {
        headers: {
          /** Total records count */
          "X-Total-Count"?: number;
        };
        content: {
          "application/json": external["tests.yaml"]["components"]["schemas"]["Test"][];
        };
      };
      /** problem with getting tests */
      500: unknown;
    };
  };
  /** Create new test action */
  createTest: {
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": external["tests.yaml"]["components"]["schemas"]["Test"];
        };
      };
      /** trying to create a test with an already existing ID */
      400: unknown;
    };
    requestBody: {
      content: {
        "application/json": external["tests.yaml"]["components"]["schemas"]["Test"];
      };
    };
  };
  /** get test */
  getTest: {
    parameters: {
      path: {
        testId: string;
      };
    };
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": external["tests.yaml"]["components"]["schemas"]["Test"];
        };
      };
      /** problem with getting a test */
      500: unknown;
    };
  };
  /** update test action */
  updateTest: {
    parameters: {
      path: {
        testId: string;
      };
    };
    responses: {
      /** successful operation */
      204: never;
      /** problem with updating test */
      500: unknown;
    };
    requestBody: {
      content: {
        "application/json": external["tests.yaml"]["components"]["schemas"]["Test"];
      };
    };
  };
  /** delete a test */
  deleteTest: {
    parameters: {
      path: {
        testId: string;
      };
    };
    responses: {
      /** OK */
      204: never;
    };
  };
  /** get the runs from a particular test */
  getTestRuns: {
    parameters: {
      path: {
        testId: string;
      };
      query: {
        /** indicates how many results can be returned by each page */
        take?: number;
        /** indicates how many results will be skipped when paginating */
        skip?: number;
      };
    };
    responses: {
      /** successful operation */
      200: {
        headers: {
          /** Total records count */
          "X-Total-Count"?: number;
        };
        content: {
          "application/json": external["tests.yaml"]["components"]["schemas"]["TestRun"][];
        };
      };
    };
  };
  /** run a particular test */
  runTest: {
    parameters: {
      path: {
        testId: string;
      };
    };
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": external["tests.yaml"]["components"]["schemas"]["TestRun"];
        };
      };
      /** some variables are missing */
      422: {
        content: {
          "application/json": external["variables.yaml"]["components"]["schemas"]["MissingVariablesError"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": external["tests.yaml"]["components"]["schemas"]["RunInformation"];
      };
    };
  };
  /** get the spans ids that would be selected by a specific selector query */
  getTestResultSelectedSpans: {
    parameters: {
      path: {
        testId: string;
        runId: string;
      };
      query: {
        query?: string;
      };
    };
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": external["tests.yaml"]["components"]["schemas"]["SelectedSpansResult"];
        };
      };
    };
  };
  /** use this method to test a definition against an actual trace without creating a new version or persisting anything */
  dryRunAssertion: {
    parameters: {
      path: {
        testId: string;
        runId: string;
      };
    };
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": external["tests.yaml"]["components"]["schemas"]["AssertionResults"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": external["tests.yaml"]["components"]["schemas"]["TestSpecs"];
      };
    };
  };
  /** rerun a test run */
  rerunTestRun: {
    parameters: {
      path: {
        testId: string;
        runId: string;
      };
    };
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": external["tests.yaml"]["components"]["schemas"]["TestRun"];
        };
      };
    };
  };
  /** get test run results in JUnit xml format */
  getRunResultJUnit: {
    parameters: {
      path: {
        testId: string;
        runId: string;
      };
    };
    responses: {
      /** JUnit formatted file */
      200: {
        content: {
          "application/xml": string;
        };
      };
    };
  };
  /** export test and test run information for debugging */
  exportTestRun: {
    parameters: {
      path: {
        testId: string;
        runId: string;
      };
    };
    responses: {
      /** successfuly exported test and test run information */
      200: {
        content: {
          "application/json": external["tests.yaml"]["components"]["schemas"]["ExportedTestInformation"];
        };
      };
    };
  };
  /** import test and test run information for debugging */
  importTestRun: {
    responses: {
      /** successfuly imported test and test run information */
      200: {
        content: {
          "application/json": external["tests.yaml"]["components"]["schemas"]["ExportedTestInformation"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": external["tests.yaml"]["components"]["schemas"]["ExportedTestInformation"];
      };
    };
  };
  /** get a particular test Run */
  getTestRun: {
    parameters: {
      path: {
        testId: string;
        runId: string;
      };
    };
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": external["tests.yaml"]["components"]["schemas"]["TestRun"];
        };
      };
    };
  };
  /** delete a test run */
  deleteTestRun: {
    parameters: {
      path: {
        testId: string;
        runId: string;
      };
    };
    responses: {
      /** OK */
      204: never;
    };
  };
  /** Gets definition for a test */
  getTestSpecs: {
    parameters: {
      path: {
        testId: string;
      };
    };
    responses: {
      /** successful operation */
      201: {
        content: {
          "application/json": external["tests.yaml"]["components"]["schemas"]["TestSpecs"][];
        };
      };
    };
  };
  /** get a test specific version */
  getTestVersion: {
    parameters: {
      path: {
        testId: string;
        version: number;
      };
    };
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": external["tests.yaml"]["components"]["schemas"]["Test"];
        };
      };
      /** problem with getting a test */
      500: unknown;
    };
  };
  /** Get the test definition as an YAML file */
  getTestVersionDefinitionFile: {
    parameters: {
      path: {
        testId: string;
        version: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/yaml": string;
        };
      };
    };
  };
  /** Get Environments */
  getEnvironments: {
    parameters: {
      query: {
        /** indicates how many environments can be returned by each page */
        take?: number;
        /** indicates how many environments will be skipped when paginating */
        skip?: number;
        /** query to search environments, based on environments name and description */
        query?: string;
        /** indicates the sort field for the environments */
        sortBy?: "created" | "name";
        /** indicates the sort direction for the environments */
        sortDirection?: "asc" | "desc";
      };
    };
    responses: {
      /** successful operation */
      200: {
        headers: {
          /** Total records count */
          "X-Total-Count"?: number;
        };
        content: {
          "application/json": external["environments.yaml"]["components"]["schemas"]["Environment"][];
        };
      };
      /** problem with getting environments */
      500: unknown;
    };
  };
  /** Create new environment action */
  createEnvironment: {
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": external["environments.yaml"]["components"]["schemas"]["Environment"];
        };
      };
      /** trying to create a environment with an already existing ID */
      400: unknown;
    };
    requestBody: {
      content: {
        "application/json": external["environments.yaml"]["components"]["schemas"]["Environment"];
      };
    };
  };
  /** get environment */
  getEnvironment: {
    parameters: {
      path: {
        environmentId: string;
      };
    };
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": external["environments.yaml"]["components"]["schemas"]["Environment"];
        };
      };
      /** problem with getting a environment */
      500: unknown;
    };
  };
  /** update environment action */
  updateEnvironment: {
    parameters: {
      path: {
        environmentId: string;
      };
    };
    responses: {
      /** successful operation */
      204: never;
      /** problem with updating environment */
      500: unknown;
    };
    requestBody: {
      content: {
        "application/json": external["environments.yaml"]["components"]["schemas"]["Environment"];
      };
    };
  };
  /** delete a environment */
  deleteEnvironment: {
    parameters: {
      path: {
        environmentId: string;
      };
    };
    responses: {
      /** OK */
      204: never;
    };
  };
  /** Get the environment as an YAML file */
  getEnvironmentDefinitionFile: {
    parameters: {
      path: {
        environmentId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/yaml": string;
        };
      };
    };
  };
  /** resolves an expression and returns the result string */
  ExpressionResolve: {
    responses: {
      /** successfully resolved the expression */
      200: {
        content: {
          "application/json": external["expressions.yaml"]["components"]["schemas"]["ResolveResponseInfo"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": external["expressions.yaml"]["components"]["schemas"]["ResolveRequestInfo"];
      };
    };
  };
  /** get resources */
  getResources: {
    parameters: {
      query: {
        /** indicates how many transactions can be returned by each page */
        take?: number;
        /** indicates how many transactions will be skipped when paginating */
        skip?: number;
        /** query to search transactions, based on transaction name and description */
        query?: string;
        /** indicates the sort field for the transactions */
        sortBy?: "created" | "name" | "last_run";
        /** indicates the sort direction for the transactions */
        sortDirection?: "asc" | "desc";
      };
    };
    responses: {
      /** successful operation */
      200: {
        headers: {
          /** Total records count */
          "X-Total-Count"?: number;
        };
        content: {
          "application/json": external["resources.yaml"]["components"]["schemas"]["Resource"][];
        };
      };
    };
  };
  /** Tests the config data store/exporter connection */
  testConnection: {
    responses: {
      /** Test connection Result */
      201: {
        content: {
          "application/json": external["config.yaml"]["components"]["schemas"]["TestConnectionResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "text/json": external["dataStores.yaml"]["components"]["schemas"]["DataStore"];
      };
    };
  };
  /** Get Tracetest configuration */
  getConfiguration: {
    parameters: {
      path: {
        /** ID of the configuration resource used on Tracetest. It should be set as 'current'. */
        configId: string;
      };
    };
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": external["config.yaml"]["components"]["schemas"]["ConfigurationResource"];
          "text/yaml": external["config.yaml"]["components"]["schemas"]["ConfigurationResource"];
        };
      };
      /** problem getting a configuration */
      500: unknown;
    };
  };
  /** Update Tracetest configuration */
  updateConfiguration: {
    parameters: {
      path: {
        /** ID of the configuration resource used on Tracetest. It should be set as 'current'. */
        configId: string;
      };
    };
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": external["config.yaml"]["components"]["schemas"]["ConfigurationResource"];
          "text/yaml": external["config.yaml"]["components"]["schemas"]["ConfigurationResource"];
        };
      };
      /** problem updating configuration */
      500: unknown;
    };
    requestBody: {
      content: {
        "application/json": external["config.yaml"]["components"]["schemas"]["ConfigurationResource"];
        "text/yaml": external["config.yaml"]["components"]["schemas"]["ConfigurationResource"];
      };
    };
  };
  /** List polling profiles used on Tracetest to configure how to fetch traces in a test. */
  listPollingProfiles: {
    parameters: {
      query: {
        /** Indicates the maximum number of polling profiles that can be returned on this call. */
        take?: number;
        /** Indicates how many polling profiles will be skipped when paginating. */
        skip?: number;
        /** Indicates the sort field for on which all polling profiles will be sorted. */
        sortBy?: "id" | "name" | "strategy";
        /** Indicates the sort direction for the polling profiles (ascending or descending). */
        sortDirection?: "asc" | "desc";
      };
    };
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": {
            count?: number;
            items?: external["config.yaml"]["components"]["schemas"]["PollingProfile"][];
          };
          "text/yaml": external["config.yaml"]["components"]["schemas"]["PollingProfile"][];
        };
      };
      /** invalid query for polling profiles, some data was sent in incorrect format. */
      400: unknown;
      /** problem listing polling profile */
      500: unknown;
    };
  };
  /** Create a polling profile used on Tracetest to configure how to fetch traces in a test. */
  createPollingProfile: {
    responses: {
      /** successful operation */
      201: {
        content: {
          "application/json": external["config.yaml"]["components"]["schemas"]["PollingProfile"];
          "text/yaml": external["config.yaml"]["components"]["schemas"]["PollingProfile"];
        };
      };
      /** problem creating a polling profile */
      500: unknown;
    };
    requestBody: {
      content: {
        "application/json": external["config.yaml"]["components"]["schemas"]["PollingProfile"];
        "text/yaml": external["config.yaml"]["components"]["schemas"]["PollingProfile"];
      };
    };
  };
  /** Get a polling profile used on Tracetest to configure how to fetch traces in a test. */
  getPollingProfile: {
    parameters: {
      path: {
        /** ID of a polling profile used on Tracetest to configure how to fetch traces in a test. */
        pollingProfileId: string;
      };
    };
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": external["config.yaml"]["components"]["schemas"]["PollingProfile"];
          "text/yaml": external["config.yaml"]["components"]["schemas"]["PollingProfile"];
        };
      };
      /** polling profile not found */
      404: unknown;
      /** problem getting a polling profile */
      500: unknown;
    };
  };
  /** Update a polling profile used on Tracetest to configure how to fetch traces in a test. */
  updatePollingProfile: {
    parameters: {
      path: {
        /** ID of a polling profile used on Tracetest to configure how to fetch traces in a test. */
        pollingProfileId: string;
      };
    };
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": external["config.yaml"]["components"]["schemas"]["PollingProfile"];
          "text/yaml": external["config.yaml"]["components"]["schemas"]["PollingProfile"];
        };
      };
      /** invalid polling profile, some data was sent in incorrect format. */
      400: unknown;
      /** polling profile not found */
      404: unknown;
      /** problem updating a polling profile */
      500: unknown;
    };
    requestBody: {
      content: {
        "application/json": external["config.yaml"]["components"]["schemas"]["PollingProfile"];
        "text/yaml": external["config.yaml"]["components"]["schemas"]["PollingProfile"];
      };
    };
  };
  /** Delete a polling profile used on Tracetest to configure how to fetch traces in a test. */
  deletePollingProfile: {
    parameters: {
      path: {
        /** ID of a polling profile used on Tracetest to configure how to fetch traces in a test. */
        pollingProfileId: string;
      };
    };
    responses: {
      /** successful operation */
      204: never;
      /** invalid polling profile, some data was sent in incorrect format. */
      400: unknown;
      /** polling profile not found */
      404: unknown;
      /** problem deleting a polling profile */
      500: unknown;
    };
  };
  /** List demonstrations used on Tracetest as quick start examples. */
  listDemos: {
    parameters: {
      query: {
        /** Indicates the maximum number of demos that can be returned on this call. */
        take?: number;
        /** Indicates how many demos will be skipped when paginating. */
        skip?: number;
        /** Indicates the sort field for on which all demos will be sorted. */
        sortBy?: "type" | "enabled";
        /** Indicates the sort direction for the demos (ascending or descending). */
        sortDirection?: "asc" | "desc";
      };
    };
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": external["config.yaml"]["components"]["schemas"]["Demo"][];
          "text/yaml": external["config.yaml"]["components"]["schemas"]["Demo"][];
        };
      };
      /** invalid query for demos, some data was sent in incorrect format. */
      400: unknown;
      /** problem listing demos */
      500: unknown;
    };
  };
  /** Create a demonstration used on Tracetest as quick start examples. */
  createDemo: {
    responses: {
      /** successful operation */
      201: {
        content: {
          "application/json": external["config.yaml"]["components"]["schemas"]["Demo"];
          "text/yaml": external["config.yaml"]["components"]["schemas"]["Demo"];
        };
      };
      /** problem creating a demo */
      500: unknown;
    };
    requestBody: {
      content: {
        "application/json": external["config.yaml"]["components"]["schemas"]["Demo"];
        "text/yaml": external["config.yaml"]["components"]["schemas"]["Demo"];
      };
    };
  };
  /** Get a demonstration used on Tracetest as quick start examples. */
  getDemo: {
    parameters: {
      path: {
        /** ID of a demonstration used on Tracetest as quick start examples. */
        demoId: string;
      };
    };
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": external["config.yaml"]["components"]["schemas"]["Demo"];
          "text/yaml": external["config.yaml"]["components"]["schemas"]["Demo"];
        };
      };
      /** demo not found */
      404: unknown;
      /** problem getting a demo */
      500: unknown;
    };
  };
  /** Update a demonstration used on Tracetest as quick start examples. */
  updateDemo: {
    parameters: {
      path: {
        /** ID of a demonstration used on Tracetest as quick start examples. */
        demoId: string;
      };
    };
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": external["config.yaml"]["components"]["schemas"]["Demo"];
          "text/yaml": external["config.yaml"]["components"]["schemas"]["Demo"];
        };
      };
      /** invalid demo, some data was sent in incorrect format. */
      400: unknown;
      /** demo not found */
      404: unknown;
      /** problem updating a demo */
      500: unknown;
    };
    requestBody: {
      content: {
        "application/json": external["config.yaml"]["components"]["schemas"]["Demo"];
        "text/yaml": external["config.yaml"]["components"]["schemas"]["Demo"];
      };
    };
  };
  /** Delete a demonstration used on Tracetest as quick start examples. */
  deleteDemo: {
    parameters: {
      path: {
        /** ID of a demonstration used on Tracetest as quick start examples. */
        demoId: string;
      };
    };
    responses: {
      /** successful operation */
      204: never;
      /** invalid demo, some data was sent in incorrect format. */
      400: unknown;
      /** demo not found */
      404: unknown;
      /** problem deleting a demo */
      500: unknown;
    };
  };
  /** Get all Data Stores */
  getDataStores: {
    parameters: {
      query: {
        /** indicates how many data stores can be returned by each page */
        take?: number;
        /** indicates how many data stores will be skipped when paginating */
        skip?: number;
        /** query to search data stores, based on data store name */
        query?: string;
        /** indicates the sort field for the data stores */
        sortBy?: "created" | "name";
        /** indicates the sort direction for the data stores */
        sortDirection?: "asc" | "desc";
      };
    };
    responses: {
      /** successful operation */
      200: {
        headers: {
          /** Total records count */
          "X-Total-Count"?: number;
        };
        content: {
          "application/json": external["dataStores.yaml"]["components"]["schemas"]["DataStore"][];
        };
      };
      /** problem with getting data stores */
      500: unknown;
    };
  };
  /** Create a new Data Store */
  createDataStore: {
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": external["dataStores.yaml"]["components"]["schemas"]["DataStore"];
        };
      };
      /** trying to create a data store with an already existing ID */
      400: unknown;
    };
    requestBody: {
      content: {
        "application/json": external["dataStores.yaml"]["components"]["schemas"]["DataStore"];
      };
    };
  };
  /** Get a Data Store */
  getDataStore: {
    parameters: {
      path: {
        dataStoreId: string;
      };
    };
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": external["dataStores.yaml"]["components"]["schemas"]["DataStore"];
        };
      };
      /** problem with getting a data store */
      500: unknown;
    };
  };
  /** Update a Data Store */
  updateDataStore: {
    parameters: {
      path: {
        dataStoreId: string;
      };
    };
    responses: {
      /** successful operation */
      204: never;
      /** problem with updating data store */
      500: unknown;
    };
    requestBody: {
      content: {
        "application/json": external["dataStores.yaml"]["components"]["schemas"]["DataStore"];
      };
    };
  };
  /** Delete a Data Store */
  deleteDataStore: {
    parameters: {
      path: {
        dataStoreId: string;
      };
    };
    responses: {
      /** OK */
      204: never;
    };
  };
  /** Get the data store as an YAML file */
  getDataStoreDefinitionFile: {
    parameters: {
      path: {
        dataStoreId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/yaml": string;
        };
      };
    };
  };
}

export interface external {
  "config.yaml": {
    paths: {};
    components: {
      schemas: {
        TestConnectionResponse: {
          successful?: boolean;
          steps?: external["config.yaml"]["components"]["schemas"]["ConnectionResult"][];
        };
        ConnectionResult: {
          portCheck?: external["config.yaml"]["components"]["schemas"]["ConnectionTestStep"];
          connectivity?: external["config.yaml"]["components"]["schemas"]["ConnectionTestStep"];
          authentication?: external["config.yaml"]["components"]["schemas"]["ConnectionTestStep"];
          fetchTraces?: external["config.yaml"]["components"]["schemas"]["ConnectionTestStep"];
        };
        ConnectionTestStep: {
          passed?: boolean;
          /** @enum {string} */
          status?: "passed" | "warning" | "failed";
          message?: string;
          error?: string;
        };
        /** @description Represents a configuration structured into the Resources format. */
        ConfigurationResource: {
          /**
           * @description Represents the type of this resource. It should always be set as 'Config'.
           * @enum {string}
           */
          type?: "Config";
          /** @description Represents the set of configuration common options for Tracetest. */
          spec?: {
            /**
             * @description ID of the configuration resource. It should always be set as 'current'.
             * @enum {string}
             */
            id?: "current";
            /**
             * @description Name given for this configuration set. It should always be set as 'Config'.
             * @enum {string}
             */
            name?: "Config";
            /** @description Flag telling if a user allow Tracetest to send analytics about its usage. */
            analyticsEnabled: boolean;
          };
        };
        /** @description Represents a polling profile structured into the Resources format. */
        PollingProfile: {
          /**
           * @description Represents the type of this resource. It should always be set as 'PollingProfile'.
           * @enum {string}
           */
          type?: "PollingProfile";
          /** @description Represents the attributes of a Polling Profile. */
          spec?: {
            /** @description ID of this Polling Profile. */
            id: string;
            /** @description Name given for this profile. */
            name: string;
            /** @description Is default polling profile */
            default?: boolean;
            /**
             * @description Name of the strategy that will be used on this profile.
             * @enum {string}
             */
            strategy: "periodic";
            /** @description Configuration for the strategy 'periodic'. It only should be filled if the field strategy is equals to 'periodic'. */
            periodic?: {
              /** @description Time that the poller should wait until try to fetch more traces. It should be written in duration format (example: 1s, 30s, 1m). */
              retryDelay?: string;
              /** @description Total time that the poller should try to continue to fetch traces. It should be written in duration format (example: 1s, 30s, 1m). */
              timeout?: string;
            };
          };
        };
        /** @description Represents the settings of the Pokeshop API demonstration. */
        DemoPokeshop: {
          /** @description HTTP endpoint for Pokeshop API */
          httpEndpoint?: string;
          /** @description gRPC endpoint for Pokeshop API */
          grpcEndpoint?: string;
        };
        /** @description Represents the settings of the Open Telemetry Store demonstration. */
        DemoOpenTelemetryStore: {
          /** @description Address of the root URL for the Frontend microservice on Open Telemetry Store. */
          frontendEndpoint?: string;
          /** @description Address of the root URL for the Product Catalog microservice on Open Telemetry Store. */
          productCatalogEndpoint?: string;
          /** @description Address of the root URL for the Cart microservice on Open Telemetry Store. */
          cartEndpoint?: string;
          /** @description Address of the root URL for the Checkout microservice on Open Telemetry Store. */
          checkoutEndpoint?: string;
        };
        /** @description Represents a demonstration API structured into the Resources format. */
        Demo: {
          /**
           * @description Represents the type of this resource. It should always be set as 'Demo'.
           * @enum {string}
           */
          type?: "Demo";
          /** @description Represents the attributes of a Demonstration API. */
          spec?: {
            id?: string;
            /**
             * @description String defining that this demo is a Open Telemetry Store demo.
             * @enum {string}
             */
            type?: "otelstore" | "pokeshop";
            /** @description Name of the demo */
            name?: string;
            /** @description Flag telling if this API is enabled on Tracetest. */
            enabled: boolean;
            pokeshop?: external["config.yaml"]["components"]["schemas"]["DemoPokeshop"];
            opentelemetryStore?: external["config.yaml"]["components"]["schemas"]["DemoOpenTelemetryStore"];
          };
        };
      };
    };
    operations: {};
  };
  "dataStores.yaml": {
    paths: {};
    components: {
      schemas: {
        DataStore: {
          id?: string;
          name: string;
          type: external["dataStores.yaml"]["components"]["schemas"]["SupportedDataStores"];
          isDefault?: boolean;
          jaeger?: external["dataStores.yaml"]["components"]["schemas"]["GRPCClientSettings"];
          tempo?: external["dataStores.yaml"]["components"]["schemas"]["BaseClient"];
          openSearch?: external["dataStores.yaml"]["components"]["schemas"]["ElasticSearch"];
          elasticApm?: external["dataStores.yaml"]["components"]["schemas"]["ElasticSearch"];
          signalFx?: external["dataStores.yaml"]["components"]["schemas"]["SignalFX"];
          awsxray?: external["dataStores.yaml"]["components"]["schemas"]["AwsXRay"];
          /** Format: date-time */
          createdAt?: string;
        };
        BaseClient: {
          type?: external["dataStores.yaml"]["components"]["schemas"]["SupportedClients"];
          http?: external["dataStores.yaml"]["components"]["schemas"]["HTTPClientSettings"];
          grpc?: external["dataStores.yaml"]["components"]["schemas"]["GRPCClientSettings"];
        };
        ElasticSearch: {
          addresses?: string[];
          username?: string;
          password?: string;
          index?: string;
          certificate?: string;
          insecureSkipVerify?: boolean;
        };
        SignalFX: {
          realm?: string;
          token?: string;
        };
        AwsXRay: {
          region?: string;
          accessKeyId?: string;
          secretAccessKey?: string;
          sessionToken?: string;
        };
        HTTPClientSettings: {
          url?: string;
          headers?: { [key: string]: string };
          tls?: external["dataStores.yaml"]["components"]["schemas"]["TLS"];
          auth?: external["http.yaml"]["components"]["schemas"]["HTTPAuth"];
        };
        GRPCClientSettings: {
          endpoint?: string;
          readBufferSize?: number;
          writeBufferSize?: number;
          waitForReady?: boolean;
          headers?: { [key: string]: string };
          balancerName?: string;
          /** @enum {string} */
          compression?:
            | "gzip"
            | "zlib"
            | "deflate"
            | "snappy"
            | "zstd"
            | "none"
            | "";
          tls?: external["dataStores.yaml"]["components"]["schemas"]["TLS"];
          auth?: external["http.yaml"]["components"]["schemas"]["HTTPAuth"];
        };
        TLS: {
          insecure?: boolean;
          insecureSkipVerify?: boolean;
          serverName?: string;
          settings?: external["dataStores.yaml"]["components"]["schemas"]["TLSSetting"];
        };
        TLSSetting: {
          cAFile?: string;
          certFile?: string;
          keyFile?: string;
          minVersion?: string;
          maxVersion?: string;
        };
        /** @enum {string} */
        SupportedDataStores:
          | "jaeger"
          | "openSearch"
          | "tempo"
          | "signalFx"
          | "otlp"
          | "elasticApm"
          | "newRelic"
          | "lightstep"
          | "datadog"
          | "awsxray";
        /** @enum {string} */
        SupportedClients: "http" | "grpc";
      };
    };
    operations: {};
  };
  "definition.yaml": {
    paths: {};
    components: {
      schemas: {
        UpsertDefinitionResponse: {
          /** @description resource ID */
          id?: string;
          /** @description resource type */
          type?: string;
        };
        ExecuteDefinitionResponse: {
          /** @description resource ID */
          id?: string;
          /** @description run ID */
          runId?: string;
          /** @description resource type */
          type?: string;
          /** @description resource web UI url */
          url?: string;
        };
        TextDefinition: {
          runInformation?: external["tests.yaml"]["components"]["schemas"]["RunInformation"];
          content?: string;
        };
      };
    };
    operations: {};
  };
  "environments.yaml": {
    paths: {};
    components: {
      schemas: {
        Environment: {
          id?: string;
          name?: string;
          description?: string;
          values?: external["environments.yaml"]["components"]["schemas"]["EnvironmentValue"][];
        };
        EnvironmentValue: {
          key?: string;
          value?: string;
        };
      };
    };
    operations: {};
  };
  "expressions.yaml": {
    paths: {};
    components: {
      schemas: {
        ResolveRequestInfo: {
          expression?: string;
          context?: external["expressions.yaml"]["components"]["schemas"]["ResolveContext"];
        };
        ResolveContext: {
          testId?: string;
          runId?: string;
          spanId?: string;
          selector?: string;
          environmentId?: string;
        };
        ResolveResponseInfo: {
          resolvedValues?: string[];
        };
      };
    };
    operations: {};
  };
  "grpc.yaml": {
    paths: {};
    components: {
      schemas: {
        GRPCHeader: {
          key?: string;
          value?: string;
        };
        GRPCRequest: {
          protobufFile?: string;
          address?: string;
          service?: string;
          method?: string;
          metadata?: external["grpc.yaml"]["components"]["schemas"]["GRPCHeader"][];
          auth?: external["http.yaml"]["components"]["schemas"]["HTTPAuth"];
          request?: string;
        };
        GRPCResponse: {
          statusCode?: number;
          metadata?: external["grpc.yaml"]["components"]["schemas"]["GRPCHeader"][];
          body?: string;
        };
      };
    };
    operations: {};
  };
  "http.yaml": {
    paths: {};
    components: {
      schemas: {
        HTTPHeader: {
          key?: string;
          value?: string;
        };
        HTTPRequest: {
          url?: string;
          /** @enum {string} */
          method?:
            | "GET"
            | "PUT"
            | "POST"
            | "PATCH"
            | "DELETE"
            | "COPY"
            | "HEAD"
            | "OPTIONS"
            | "LINK"
            | "UNLINK"
            | "PURGE"
            | "LOCK"
            | "UNLOCK"
            | "PROPFIND"
            | "VIEW";
          headers?: external["http.yaml"]["components"]["schemas"]["HTTPHeader"][];
          body?: string;
          auth?: external["http.yaml"]["components"]["schemas"]["HTTPAuth"];
        };
        HTTPResponse: {
          status?: string;
          statusCode?: number;
          headers?: external["http.yaml"]["components"]["schemas"]["HTTPHeader"][];
          body?: string;
        };
        HTTPAuth: {
          /** @enum {string} */
          type?: "apiKey" | "basic" | "bearer";
          apiKey?: {
            key?: string;
            value?: string;
            /** @enum {string} */
            in?: "query" | "header";
          };
          basic?: {
            username?: string;
            password?: string;
          };
          bearer?: {
            token?: string;
          };
        };
      };
    };
    operations: {};
  };
  "resources.yaml": {
    paths: {};
    components: {
      schemas: {
        Resource: {
          type: string;
          item: unknown;
        };
      };
    };
    operations: {};
  };
  "tests.yaml": {
    paths: {};
    components: {
      schemas: {
        Test: {
          id?: string;
          name?: string;
          description?: string;
          /** @description version number of the test */
          version?: number;
          /** Format: date-time */
          createdAt?: string;
          serviceUnderTest?: external["triggers.yaml"]["components"]["schemas"]["Trigger"];
          /** @description specification of assertions that are going to be made */
          specs?: external["tests.yaml"]["components"]["schemas"]["TestSpecs"];
          /**
           * @description define test outputs, in a key/value format. The value is processed as an expression
           * @example [object Object],[object Object]
           */
          outputs?: external["tests.yaml"]["components"]["schemas"]["TestOutput"][];
          /** @description summary of test data */
          summary?: external["tests.yaml"]["components"]["schemas"]["TestSummary"];
        };
        TestOutput: {
          name?: string;
          selector?: external["tests.yaml"]["components"]["schemas"]["Selector"];
          value?: string;
        };
        TestSummary: {
          runs?: number;
          lastRun?: {
            /** Format: date-time */
            time?: string | null;
            passes?: number;
            fails?: number;
          };
        };
        /** @example [object Object] */
        TestSpecs: {
          specs?: {
            name?: string | null;
            selector?: external["tests.yaml"]["components"]["schemas"]["Selector"];
            assertions?: string[];
          }[];
        };
        TestRun: {
          id?: string;
          traceId?: string;
          spanId?: string;
          /** @description Test version used when running this test run */
          testVersion?: number;
          /**
           * @description Current execution state
           * @enum {string}
           */
          state?:
            | "CREATED"
            | "EXECUTING"
            | "AWAITING_TRACE"
            | "AWAITING_TEST_RESULTS"
            | "FINISHED"
            | "FAILED";
          /** @description Details of the cause for the last `FAILED` state */
          lastErrorState?: string;
          /** @description time in seconds it took for the test to complete, either success or fail. If the test is still running, it will show the time up to the time of the request */
          executionTime?: number;
          /** @description time in milliseconds it took for the triggering transaction to complete, either success or fail. If the test is still running, it will show the time up to the time of the request */
          triggerTime?: number;
          /** Format: date-time */
          createdAt?: string;
          /** Format: date-time */
          serviceTriggeredAt?: string;
          /** Format: date-time */
          serviceTriggerCompletedAt?: string;
          /** Format: date-time */
          obtainedTraceAt?: string;
          /** Format: date-time */
          completedAt?: string;
          environment?: external["environments.yaml"]["components"]["schemas"]["Environment"];
          triggerResult?: external["triggers.yaml"]["components"]["schemas"]["TriggerResult"];
          trace?: external["trace.yaml"]["components"]["schemas"]["Trace"];
          result?: external["tests.yaml"]["components"]["schemas"]["AssertionResults"];
          outputs?: {
            name?: string;
            spanId?: string;
            value?: string;
          }[];
          metadata?: { [key: string]: string };
          transactionId?: string;
          transactionRunId?: string;
        };
        RunInformation: {
          metadata?: { [key: string]: string } | null;
          environmentId?: string;
          variables?: external["environments.yaml"]["components"]["schemas"]["EnvironmentValue"][];
        };
        /** @example [object Object] */
        AssertionResults: {
          allPassed?: boolean;
          results?: {
            selector?: external["tests.yaml"]["components"]["schemas"]["Selector"];
            results?: external["tests.yaml"]["components"]["schemas"]["AssertionResult"][];
          }[];
        };
        AssertionResult: {
          assertion?: string;
          allPassed?: boolean;
          spanResults?: external["tests.yaml"]["components"]["schemas"]["AssertionSpanResult"][];
        };
        AssertionSpanResult: {
          spanId?: string;
          observedValue?: string;
          passed?: boolean;
          error?: string;
        };
        DefinitionFile: {
          content?: string;
        };
        SelectedSpansResult: {
          selector?: external["tests.yaml"]["components"]["schemas"]["Selector"];
          spanIds?: string[];
        };
        Selector: {
          query?: string;
          structure?: external["tests.yaml"]["components"]["schemas"]["SpanSelector"][];
        };
        SpanSelector: {
          filters: external["tests.yaml"]["components"]["schemas"]["SelectorFilter"][];
          pseudoClass?: external["tests.yaml"]["components"]["schemas"]["SelectorPseudoClass"];
          childSelector?: external["tests.yaml"]["components"]["schemas"]["SpanSelector"];
        } | null;
        SelectorFilter: {
          property: string;
          operator: string;
          value: string;
        };
        SelectorPseudoClass: {
          name: string;
          argument?: number;
        } | null;
        ExportedTestInformation: {
          test: external["tests.yaml"]["components"]["schemas"]["Test"];
          run: external["tests.yaml"]["components"]["schemas"]["TestRun"];
        };
      };
    };
    operations: {};
  };
  "trace.yaml": {
    paths: {};
    components: {
      schemas: {
        Trace: {
          traceId?: string;
          tree?: external["trace.yaml"]["components"]["schemas"]["Span"];
          /** @description falttened version, mapped as spanId -> span{} */
          flat?: {
            [
              key: string
            ]: external["trace.yaml"]["components"]["schemas"]["Span"];
          };
        };
        Span: {
          id?: string;
          parentId?: string;
          name?: string;
          /**
           * Format: int64
           * @description span start time in unix milli format
           * @example 1656701595277
           */
          startTime?: number;
          /**
           * Format: int64
           * @description span end time in unix milli format
           * @example 1656701595800
           */
          endTime?: number;
          /**
           * @description Key-Value of span attributes
           * @example [object Object]
           */
          attributes?: { [key: string]: string };
          children?: external["trace.yaml"]["components"]["schemas"]["Span"][];
        };
      };
    };
    operations: {};
  };
  "traceid.yaml": {
    paths: {};
    components: {
      schemas: {
        TRACEIDRequest: {
          id?: string;
        };
        TRACEIDResponse: {
          id?: string;
        };
      };
    };
    operations: {};
  };
  "transactions.yaml": {
    paths: {};
    components: {
      schemas: {
        Transaction: {
          id?: string;
          name?: string;
          description?: string;
          /** @description version number of the test */
          version?: number;
          steps?: external["tests.yaml"]["components"]["schemas"]["Test"][];
          /** Format: date-time */
          createdAt?: string;
          /** @description summary of transaction */
          summary?: external["tests.yaml"]["components"]["schemas"]["TestSummary"];
        };
        TransactionRun: {
          id?: string;
          version?: number;
          /** Format: date-time */
          createdAt?: string;
          /** Format: date-time */
          completedAt?: string;
          /** @enum {string} */
          state?: "CREATED" | "EXECUTING" | "FINISHED" | "FAILED";
          steps?: external["tests.yaml"]["components"]["schemas"]["TestRun"][];
          environment?: external["environments.yaml"]["components"]["schemas"]["Environment"];
          metadata?: { [key: string]: string };
          pass?: number;
          fail?: number;
        };
      };
    };
    operations: {};
  };
  "triggers.yaml": {
    paths: {};
    components: {
      schemas: {
        Trigger: {
          /** @enum {string} */
          triggerType?: "http" | "grpc" | "traceid";
          triggerSettings?: {
            http?: external["http.yaml"]["components"]["schemas"]["HTTPRequest"];
            grpc?: external["grpc.yaml"]["components"]["schemas"]["GRPCRequest"];
            traceid?: external["traceid.yaml"]["components"]["schemas"]["TRACEIDRequest"];
          };
        };
        TriggerResult: {
          /** @enum {string} */
          triggerType?: "http" | "grpc" | "traceid";
          triggerResult?: {
            http?: external["http.yaml"]["components"]["schemas"]["HTTPResponse"];
            grpc?: external["grpc.yaml"]["components"]["schemas"]["GRPCResponse"];
            traceid?: external["traceid.yaml"]["components"]["schemas"]["TRACEIDResponse"];
          };
        };
      };
    };
    operations: {};
  };
  "variables.yaml": {
    paths: {};
    components: {
      schemas: {
        MissingVariablesError: {
          missingVariables?: external["variables.yaml"]["components"]["schemas"]["MissingVariable"][];
        };
        MissingVariable: {
          testId?: string;
          variables?: external["variables.yaml"]["components"]["schemas"]["Variable"][];
        };
        Variable: {
          key?: string;
          defaultValue?: string;
        };
      };
    };
    operations: {};
  };
}
