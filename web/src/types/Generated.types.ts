/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/tests": {
    /** get tests */
    get: operations["getTests"];
    /** Create new test action */
    post: operations["createTest"];
  };
  "/tests/{testId}": {
    /** get test */
    get: operations["getTest"];
    /** update test action */
    put: operations["updateTest"];
    /** delete a test */
    delete: operations["deleteTest"];
  };
  "/tests/{testId}/run": {
    /** get the runs from a particular test */
    get: operations["getTestRuns"];
    /** run a particular test */
    post: operations["runTest"];
  };
  "/tests/{testId}/run/{runId}/select": {
    /** get the spans ids that would be selected by a specific selector query */
    get: operations["getTestResultSelectedSpans"];
  };
  "/tests/{testId}/run/{runId}/dry-run": {
    /** use this method to test a definition against an actual trace without creating a new version or persisting anything */
    put: operations["dryRunAssertion"];
  };
  "/tests/{testId}/run/{runId}/rerun": {
    /** rerun a test run */
    post: operations["rerunTestRun"];
  };
  "/tests/{testId}/run/{runId}": {
    /** get a particular test Run */
    get: operations["getTestRun"];
  };
  "/tests/{testId}/definition": {
    /** Gets definition for a test */
    get: operations["getTestDefinition"];
    /** Set testDefinition for a particular test */
    put: operations["setTestDefinition"];
  };
}

export interface components {}

export interface operations {
  /** get tests */
  getTests: {
    parameters: {
      query: {
        /** indicates how many tests can be returned by each page */
        take?: number;
        /** indicates how many tests will be skipped when paginating */
        skip?: number;
      };
    };
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": external["tests.yaml"]["components"]["schemas"]["Test"][];
        };
      };
      /** problem with getting tests */
      500: unknown;
    };
  };
  /** Create new test action */
  createTest: {
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": external["tests.yaml"]["components"]["schemas"]["Test"];
        };
      };
      /** problem with creating test */
      500: unknown;
    };
    requestBody: {
      content: {
        "application/json": external["tests.yaml"]["components"]["schemas"]["Test"];
      };
    };
  };
  /** get test */
  getTest: {
    parameters: {
      path: {
        testId: string;
      };
    };
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": external["tests.yaml"]["components"]["schemas"]["Test"];
        };
      };
      /** problem with getting a test */
      500: unknown;
    };
  };
  /** update test action */
  updateTest: {
    parameters: {
      path: {
        testId: string;
      };
    };
    responses: {
      /** successful operation */
      204: never;
      /** problem with updating test */
      500: unknown;
    };
    requestBody: {
      content: {
        "application/json": external["tests.yaml"]["components"]["schemas"]["Test"];
      };
    };
  };
  /** delete a test */
  deleteTest: {
    parameters: {
      path: {
        testId: string;
      };
    };
    responses: {
      /** OK */
      204: never;
    };
  };
  /** get the runs from a particular test */
  getTestRuns: {
    parameters: {
      path: {
        testId: string;
      };
      query: {
        /** indicates how many results can be returned by each page */
        take?: number;
        /** indicates how many results will be skipped when paginating */
        skip?: number;
      };
    };
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": external["tests.yaml"]["components"]["schemas"]["TestRun"][];
        };
      };
    };
  };
  /** run a particular test */
  runTest: {
    parameters: {
      path: {
        testId: string;
      };
    };
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": external["tests.yaml"]["components"]["schemas"]["TestRun"];
        };
      };
    };
  };
  /** get the spans ids that would be selected by a specific selector query */
  getTestResultSelectedSpans: {
    parameters: {
      path: {
        testId: string;
        runId: string;
      };
      query: {
        query?: string;
      };
    };
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": string[];
        };
      };
    };
  };
  /** use this method to test a definition against an actual trace without creating a new version or persisting anything */
  dryRunAssertion: {
    parameters: {
      path: {
        testId: string;
        runId: string;
      };
    };
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": external["tests.yaml"]["components"]["schemas"]["AssertionResults"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": external["tests.yaml"]["components"]["schemas"]["TestDefinition"];
      };
    };
  };
  /** rerun a test run */
  rerunTestRun: {
    parameters: {
      path: {
        testId: string;
        runId: string;
      };
    };
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": external["tests.yaml"]["components"]["schemas"]["TestRun"];
        };
      };
    };
  };
  /** get a particular test Run */
  getTestRun: {
    parameters: {
      path: {
        testId: string;
        runId: string;
      };
    };
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": external["tests.yaml"]["components"]["schemas"]["TestRun"];
        };
      };
    };
  };
  /** Gets definition for a test */
  getTestDefinition: {
    parameters: {
      path: {
        testId: string;
      };
    };
    responses: {
      /** successful operation */
      201: {
        content: {
          "application/json": external["tests.yaml"]["components"]["schemas"]["TestDefinition"][];
        };
      };
    };
  };
  /** Set testDefinition for a particular test */
  setTestDefinition: {
    parameters: {
      path: {
        testId: string;
      };
    };
    responses: {
      /** OK */
      204: never;
    };
    requestBody: {
      content: {
        "application/json": external["tests.yaml"]["components"]["schemas"]["TestDefinition"];
      };
    };
  };
}

export interface external {
  "http.yaml": {
    paths: {};
    components: {
      schemas: {
        HTTPHeader: {
          key?: string;
          value?: string;
        };
        HTTPRequest: {
          url?: string;
          /** @enum {string} */
          method?:
            | "GET"
            | "PUT"
            | "POST"
            | "PATCH"
            | "DELETE"
            | "COPY"
            | "HEAD"
            | "OPTIONS"
            | "LINK"
            | "UNLINK"
            | "PURGE"
            | "LOCK"
            | "UNLOCK"
            | "PROPFIND"
            | "VIEW";
          headers?: external["http.yaml"]["components"]["schemas"]["HTTPHeader"][];
          /** Format: byte */
          body?: string;
          auth?: external["http.yaml"]["components"]["schemas"]["HTTPAuth"];
        };
        HTTPResponse: {
          status?: string;
          statusCode?: number;
          headers?: external["http.yaml"]["components"]["schemas"]["HTTPHeader"][];
          /** Format: byte */
          body?: string;
        };
        HTTPAuth: {
          /** @enum {string} */
          type?: "apiKey" | "basic" | "bearer";
          apiKey?: {
            key?: string;
            value?: string;
            /** @enum {string} */
            in?: "query" | "header";
          };
          basic?: {
            username?: string;
            password?: string;
          };
          bearer?: {
            token?: string;
          };
        };
      };
    };
    operations: {};
  };
  "tests.yaml": {
    paths: {};
    components: {
      schemas: {
        Test: {
          /** Format: uuid */
          id?: string;
          name?: string;
          description?: string;
          /** @description version number of the test */
          version?: number;
          serviceUnderTest?: {
            request?: external["http.yaml"]["components"]["schemas"]["HTTPRequest"];
          };
          /** @description Definition of assertions that are going to be made */
          definition?: external["tests.yaml"]["components"]["schemas"]["TestDefinition"];
          referenceTestRun?: external["tests.yaml"]["components"]["schemas"]["TestRun"];
        };
        /** @example [object Object] */
        TestDefinition: {
          definitions?: {
            selector?: string;
            assertions?: external["tests.yaml"]["components"]["schemas"]["Assertion"][];
          }[];
        };
        Assertion: {
          attribute?: string;
          comparator?: string;
          expected?: string;
        };
        TestRun: {
          /** Format: uuid */
          id?: string;
          traceId?: string;
          spanId?: string;
          /** @description Test version used when running this test run */
          testVersion?: number;
          /**
           * @description Current execution state
           * @enum {string}
           */
          state?:
            | "CREATED"
            | "EXECUTING"
            | "AWAITING_TRACE"
            | "AWAITING_TEST_RESULTS"
            | "FINISHED"
            | "FAILED";
          /** @description Details of the cause for the last `FAILED` state */
          lastErrorState?: string;
          /** @description time it took for the test to complete, either success or fail. If the test is still running, it will show the time up to the time of the request */
          exectutionTime?: number;
          /** Format: date-time */
          createdAt?: string;
          /** Format: date-time */
          serviceTriggeredAt?: string;
          /** Format: date-time */
          serviceTriggerCompletedAt?: string;
          /** Format: date-time */
          obtainedTraceAt?: string;
          /** Format: date-time */
          completedAt?: string;
          request?: external["http.yaml"]["components"]["schemas"]["HTTPRequest"];
          /** @description TODO(pov) This is HTTP Response object for now, at some point it might be GRPC/SOAP/... */
          response?: external["http.yaml"]["components"]["schemas"]["HTTPResponse"];
          trace?: external["trace.yaml"]["components"]["schemas"]["Trace"];
          result?: external["tests.yaml"]["components"]["schemas"]["AssertionResults"];
        };
        /** @example [object Object] */
        AssertionResults: {
          allPassed?: boolean;
          results?: {
            selector?: string;
            results?: external["tests.yaml"]["components"]["schemas"]["AssertionResult"][];
          }[];
        };
        AssertionResult: {
          assertion?: external["tests.yaml"]["components"]["schemas"]["Assertion"];
          allPassed?: boolean;
          spanResults?: external["tests.yaml"]["components"]["schemas"]["AssertionSpanResult"][];
        };
        AssertionSpanResult: {
          spanId?: string;
          observedValue?: string;
          passed?: boolean;
          error?: string;
        };
      };
    };
    operations: {};
  };
  "trace.yaml": {
    paths: {};
    components: {
      schemas: {
        Trace: {
          /** Format: byte */
          traceId?: string;
          tree?: external["trace.yaml"]["components"]["schemas"]["Span"];
          /** @description falttened version, mapped as spanId -> span{} */
          flat?: {
            [
              key: string
            ]: external["trace.yaml"]["components"]["schemas"]["Span"];
          };
        };
        Span: {
          /** Format: byte */
          id?: string;
          /** Format: byte */
          parentId?: string;
          name?: string;
          /** @description span start time in unix milli format */
          startTime?: number;
          /** @description span end time in unix milli format */
          endTime?: number;
          /**
           * @description Key-Value of span attributes
           * @example [object Object]
           */
          attributes?: { [key: string]: string };
          children?: external["trace.yaml"]["components"]["schemas"]["Span"][];
        };
      };
    };
    operations: {};
  };
}
