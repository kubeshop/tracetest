openapi: 3.0.0
info:
  version: 0.0.1
  title: TraceTest
  description: OpenAPI definition for TraceTest endpoint and resources
servers:
  - url: /api
paths:
  /tests:
    get:
      tags:
        - api
      summary: "Get tests"
      description: "get tests"
      operationId: getTests
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Test"
        500:
          description: "problem with getting tests"
          # content:
          #   application/problem+json:
          #     schema:
          #       type: array
          #       items:
          #         $ref: "#/components/schemas/Problem"
    post:
      tags:
        - api
      summary: "Create new test"
      description: "Create new test action"
      operationId: createTest
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Test"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Test"
        500:
          description: "problem with creating test"
          # content:
          #   application/problem+json:
          #     schema:
          #       type: array
          #       items:
          #         $ref: "#/components/schemas/Problem"
  /tests/{testId}:
    get:
      tags:
        - api
      parameters:
        - in: path
          name: testId
          schema:
            type: string
            format: uuid
          required: true
      summary: "get test"
      description: "get test"
      operationId: getTest
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Test"
        500:
          description: "problem with getting a test"
    put:
      tags:
        - api
      parameters:
        - in: path
          name: testId
          schema:
            type: string
            format: uuid
          required: true
      summary: "update test"
      description: "update test action"
      operationId: updateTest
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Test"
      responses:
        204:
          description: successful operation
        500:
          description: "problem with updating test"
    delete:
      tags:
        - api
      parameters:
        - in: path
          name: testId
          schema:
            type: string
            format: uuid
          required: true
      summary: "delete a test"
      description: "delete a test"
      operationId: deleteTest
      responses:
        "204":
          description: OK
  /tests/{testId}/run:
    post:
      tags:
        - api
      parameters:
        - in: path
          name: testId
          schema:
            type: string
            format: uuid
          required: true
      summary: "run test"
      description: "run a particular test"
      operationId: runTest
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TestRunResult"

  /tests/{testId}/results/{resultId}:
    get:
      tags:
        - api
      parameters:
        - in: path
          name: testId
          schema:
            type: string
            format: uuid
          required: true
        - in: path
          name: resultId
          schema:
            type: string
            format: uuid
          required: true
      summary: "get test result"
      description: "get a particular test result"
      operationId: getTestResult
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TestRunResult"
    put:
      tags:
        - api
      parameters:
        - in: path
          name: testId
          schema:
            type: string
            format: uuid
          required: true
        - in: path
          name: resultId
          schema:
            type: string
            format: uuid
          required: true
      summary: "update test result state"
      description: "update test result state for a particular test"
      operationId: updateTestResult
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TestAssertionResult"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TestRunResult"
  /tests/{testId}/results:
    get:
      tags:
        - api
      parameters:
        - in: path
          name: testId
          schema:
            type: string
            format: uuid
          required: true
      summary: "get the results for a test"
      description: "get the results from a particular test"
      operationId: getTestResults
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TestRunResult"
  /tests/{testId}/assertions:
    get:
      tags:
        - api
      parameters:
        - in: path
          name: testId
          schema:
            type: string
            format: uuid
          required: true
      operationId: getAssertions
      summary: "Get assertions for a test"
      description: "Gets all assertions associated to a particular test"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Assertion"
    post:
      tags:
        - api
      parameters:
        - in: path
          name: testId
          schema:
            type: string
            format: uuid
          required: true
      summary: "Create an assertion for a test"
      description: "Create an assertion for a particular test"
      operationId: createAssertion
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Assertion"
      responses:
        "200":
          description: OK
  /tests/{testId}/assertions/{assertionId}:
    put:
      tags:
        - api
      parameters:
        - in: path
          name: testId
          schema:
            type: string
            format: uuid
          required: true
        - in: path
          name: assertionId
          schema:
            type: string
            format: uuid
          required: true
      summary: "update an assertion"
      description: "update an assertion"
      operationId: updateAssertion
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Assertion"
      responses:
        "204":
          description: OK
    delete:
      tags:
        - api
      parameters:
        - in: path
          name: testId
          schema:
            type: string
            format: uuid
          required: true
        - in: path
          name: assertionId
          schema:
            type: string
            format: uuid
          required: true
      summary: "delete an assertion"
      description: "delete an assertion"
      operationId: deleteAssertion
      responses:
        "204":
          description: OK
components:
  schemas:
    Test:
      type: object
      properties:
        testId:
          type: string
          description: ID
          format: uuid
          readOnly: true
        name:
          type: string
        description:
          type: string
        serviceUnderTest:
          type: object
          properties:
            id:
              type: string
              description: ID
              format: uuid
              readOnly: true
            request:
              $ref: "#/components/schemas/HTTPRequest"
        assertions:
          type: array
          items:
            $ref: "#/components/schemas/Assertion"
          description: Definition of assertions that are going to be made
        referenceTestRunResult:
          $ref: "#/components/schemas/TestRunResult"
    Assertion:
      type: object
      properties:
        assertionId:
          type: string
          description: ID
          format: uuid
          readOnly: true
        selectors:
          type: array
          items:
            $ref: "#/components/schemas/SelectorItem"
        selector:
          type: string
        spanAssertions:
          type: array
          items:
            $ref: "#/components/schemas/SpanAssertion"
    TestRunResult:
      type: object
      properties:
        resultId:
          type: string
          description: ID
          format: uuid
          readOnly: true
        testId:
          type: string
          description: test ID
          format: uuid
          readOnly: true
        traceId:
          type: string
          description: trace ID
          readOnly: true
        spanId:
          type: string
          description: parent span ID
          readOnly: true
        state:
          type: string
          enum: [CREATED, EXECUTING, AWAITING_TRACE, FAILED, FINISHED, AWAITING_TEST_RESULTS]
          description: Current execution state
        lastErrorState:
          type: string
          description: Details of the cause for the last `FAILED` state
        createdAt:
          type: string
          format: date-time
        completedAt:
          type: string
          format: date-time
        response:
          $ref: "#/components/schemas/HTTPResponse"
          description: TODO(pov) This is HTTP Response object for now, at some point it might be GRPC/SOAP/...
        trace:
          $ref: "./trace.yaml#/definitions/api_v3SpansResponseChunk"
        assertionResultState:
          type: boolean
          description: True if all trace spans passed the assertion test
        assertionResult:
          type: array
          description: List of all tested span assertions
          items:
            $ref: "#/components/schemas/AssertionResult"
    TestAssertionResult:
      type: object
      properties:
        assertionResultState:
            type: boolean
            description: True if all trace spans passed the assertion test
        assertionResult:
          type: array
          description: List of all tested span assertions
          items:
            $ref: "#/components/schemas/AssertionResult"
    Attribute:
      type: object
      properties:
        id:
          type: string
          description: ID
          readOnly: true
        key:
          type: string
        value:
          type: string
    SelectorItem:
      type: object
      properties:
        locationName:
          type: string
          enum: [RESOURCE_ATTRIBUTES, INSTRUMENTATION_LIBRARY, SPAN, SPAN_ATTRIBUTES]
          description: Example "SPAN"
        propertyName:
          type: string
          description: Example "operation"
        value:
          type: string
          description: Example "POST /users/verify"
        valueType:
          type: string
          description: TODO(pov) think about value types?
          enum: [stringValue, intValue]
    SpanAssertion:
      type: object
      properties:
        spanAssertionId:
          type: string
          description: ID
          readOnly: true
        locationName:
          type: string
          enum: [RESOURCE_ATTRIBUTES, INSTRUMENTATION_LIBRARY, SPAN, SPAN_ATTRIBUTES]
          description: Example "SPAN_ATTRIBUTES"
        propertyName:
          type: string
          description: Example "http.status.code"
        valueType:
          type: string
          description: Example "intValue"
          enum: [stringValue, intValue]
        operator:
          type: string
          description: Example "EQUALS"
          enum: [EQUALS, LESSTHAN, GREATERTHAN, NOTEQUALS]
        comparisonValue:
          type: string
          description: Example "200"
    HTTPResponse:
      type: object
      properties:
        status:
          type: string
        statusCode:
          type: integer
        headers:
          type: array
          items:
            type: object
            properties:
              key:
                type: string
              value:
                type: string
        body:
          type: string
          format: byte
    AssertionResult:
      type: object
      properties:
        assertionId:
          type: string
          description: ID
        spanAssertionResults:
          type: array
          items:
            $ref: "#/components/schemas/SpanAssertionResult"
    SpanAssertionResult:
      type: object
      properties:
        spanAssertionId:
          type: string
          description: ID
        spanId:
          type: string
          description: ID
        passed:
          type: boolean
          description: True if the span passed the assertion test
        observedValue:
          type: string
          description: 'value that the trace for this test run contained'
          readOnly: true
    HTTPRequest:
      type: object
      properties:
        url:
          type: string
        method:
          type: string
          enum: [GET, PUT, POST, PATCH, DELETE, COPY, HEAD, OPTIONS, LINK, UNLINK, PURGE, LOCK, UNLOCK, PROPFIND, VIEW]
        headers:
          type: array
          items:
            type: object
            properties:
              key:
                type: string
              value:
                type: string
        body:
          type: string
          format: byte
        auth:
          $ref: "#/components/schemas/HTTPAuth"
        proxy:
          type: object
          description: TODO
        certificate:
          type: object
          description: TODO
    HTTPAuth:
      type: object
      properties:
        type:
          type: string
          enum: [apiKey, basic, bearer]
        apiKey:
          type: object
          properties:
            key:
              type: string
            value:
              type: string
            in:
              type: string
              enum: [query, header]
        basic:
          type: object
          properties:
            username:
              type: string
            password:
              type: string
        bearer:
          type: object
          properties:
            token:
              type: string
