openapi: 3.0.0
info:
  version: 0.2.1
  title: TraceTest
  description: OpenAPI definition for TraceTest endpoint and resources
servers:
  - url: /api
paths:
  /tests:
    get:
      tags:
        - api
      summary: "Get tests"
      description: "get tests"
      operationId: getTests
      parameters:
        - in: query
          name: take
          description: "indicates how many tests can be returned by each page"
          schema:
            type: integer
            default: 20
        - in: query
          name: skip
          description: "indicates how many tests will be skipped when paginating"
          schema:
            type: integer
            default: 0
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Test"
        500:
          description: "problem with getting tests"
          # content:
          #   application/problem+json:
          #     schema:
          #       type: array
          #       items:
          #         $ref: "#/components/schemas/Problem"
    post:
      tags:
        - api
      summary: "Create new test"
      description: "Create new test action"
      operationId: createTest
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Test"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Test"
        500:
          description: "problem with creating test"
          # content:
          #   application/problem+json:
          #     schema:
          #       type: array
          #       items:
          #         $ref: "#/components/schemas/Problem"
  /tests/{testId}:
    get:
      tags:
        - api
      parameters:
        - in: path
          name: testId
          schema:
            type: string
            format: uuid
          required: true
      summary: "get test"
      description: "get test"
      operationId: getTest
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Test"
        500:
          description: "problem with getting a test"
    put:
      tags:
        - api
      parameters:
        - in: path
          name: testId
          schema:
            type: string
            format: uuid
          required: true
      summary: "update test"
      description: "update test action"
      operationId: updateTest
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Test"
      responses:
        204:
          description: successful operation
        500:
          description: "problem with updating test"
    delete:
      tags:
        - api
      parameters:
        - in: path
          name: testId
          schema:
            type: string
            format: uuid
          required: true
      summary: "delete a test"
      description: "delete a test"
      operationId: deleteTest
      responses:
        "204":
          description: OK
  /tests/{testId}/run:
    post:
      tags:
        - api
      parameters:
        - in: path
          name: testId
          schema:
            type: string
            format: uuid
          required: true
      summary: "run test"
      description: "run a particular test"
      operationId: runTest
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TestRunResult"

  /tests/{testId}/results/{resultId}:
    get:
      tags:
        - api
      parameters:
        - in: path
          name: testId
          schema:
            type: string
            format: uuid
          required: true
        - in: path
          name: resultId
          schema:
            type: string
            format: uuid
          required: true
      summary: "get test result"
      description: "get a particular test result"
      operationId: getTestResult
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TestRunResult"
    put:
      tags:
        - api
      parameters:
        - in: path
          name: testId
          schema:
            type: string
            format: uuid
          required: true
        - in: path
          name: resultId
          schema:
            type: string
            format: uuid
          required: true
      summary: "update test result state"
      description: "update test result state for a particular test"
      operationId: updateTestResult
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TestRunResult"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TestRunResult"
  /tests/{testId}/results:
    get:
      tags:
        - api
      parameters:
        - in: path
          name: testId
          schema:
            type: string
            format: uuid
          required: true
        - in: query
          name: take
          description: "indicates how many results can be returned by each page"
          schema:
            type: integer
            default: 20
        - in: query
          name: skip
          description: "indicates how many results will be skipped when paginating"
          schema:
            type: integer
            default: 0
      summary: "get the results for a test"
      description: "get the results from a particular test"
      operationId: getTestResults
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TestRunResult"
  /tests/{testId}/assertions:
    get:
      tags:
        - api
      parameters:
        - in: path
          name: testId
          schema:
            type: string
            format: uuid
          required: true
      operationId: getAssertions
      summary: "Get assertions for a test"
      description: "Gets all assertions associated to a particular test"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Assertion"
    post:
      tags:
        - api
      parameters:
        - in: path
          name: testId
          schema:
            type: string
            format: uuid
          required: true
      summary: "Create an assertion for a test"
      description: "Create an assertion for a particular test"
      operationId: createAssertion
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Assertion"
      responses:
        "200":
          description: OK
  /tests/{testId}/assertions/{assertionId}:
    put:
      tags:
        - api
      parameters:
        - in: path
          name: testId
          schema:
            type: string
            format: uuid
          required: true
        - in: path
          name: assertionId
          schema:
            type: string
            format: uuid
          required: true
      summary: "update an assertion"
      description: "update an assertion"
      operationId: updateAssertion
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Assertion"
      responses:
        "204":
          description: OK
    delete:
      tags:
        - api
      parameters:
        - in: path
          name: testId
          schema:
            type: string
            format: uuid
          required: true
        - in: path
          name: assertionId
          schema:
            type: string
            format: uuid
          required: true
      summary: "delete an assertion"
      description: "delete an assertion"
      operationId: deleteAssertion
      responses:
        "204":
          description: OK

components:
  schemas:
    Test:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
        description:
          type: string
        serviceUnderTest:
          type: object
          properties:
            id:
              type: string
              format: uuid
              readOnly: true
            request:
              $ref: "./http.yaml#/definitions/HTTPRequest"
        definition:
          type: object
          $ref: "#/components/schemas/TestDefinition"
          description: Definition of assertions that are going to be made
        referenceTestRunResult:
          $ref: "#/components/schemas/TestRunResult"

    TestDefinition:
      type: object
      description: Map using selector query as key, and an array of assertions as value
      additionalProperties:
        type: array
        items:
          $ref: '#/components/schemas/Assertion'
      example:
        'span[tracetest.span.type="http"]':
          - attr: tracetest.span.duration
            comparator: "<"
            expected: "2000"
          - attr: http.status_code
            comparator: "="
            expected: "200"

    Assertion:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        attr:
          type: string
        comparator:
          type: string
        expected:
          type: string

    TestRun:
      type: object
      properties:
        resultId:
          type: string
          format: uuid
          readOnly: true
        testId:
          type: string
          format: uuid
          readOnly: true
        traceId:
          type: string
          readOnly: true
        spanId:
          type: string
          readOnly: true
        state:
          type: string
          enum: [CREATED, EXECUTING, AWAITING_TRACE, FAILED, FINISHED, AWAITING_TEST_RESULTS]
          description: Current execution state
        lastErrorState:
          type: string
          description: Details of the cause for the last `FAILED` state
        createdAt:
          type: string
          format: date-time
        completedAt:
          type: string
          format: date-time
        request:
          $ref: "./http.yaml#/definitions/HTTPRequest"
        response:
          $ref: "./http.yaml#/definitions/HTTPResponse"
          description: TODO(pov) This is HTTP Response object for now, at some point it might be GRPC/SOAP/...
        result:
          $ref: "#/components/schemas/TestRunResult"

    TestRunResult:
      type: object
      description: Map using selector query as key, and an array of assertions as value
      additionalProperties:
        type: array
        items:
          $ref: '#/components/schemas/Assertion'
      example:
        'span[tracetest.span.type="http"]':
          - attr: tracetest.span.duration
            comparator: "<"
            expected: "2000"
          - attr: http.status_code
            comparator: "="
            expected: "200"
