swagger: "2.0"
info:
  title: api_v3/query_service.proto
  version: version not set
consumes:
  - application/json
produces:
  - application/json
paths: {}
definitions:
  SpanEvent:
    type: object
    properties:
      timeUnixNano:
        type: string
        format: uint64
        description: time_unix_nano is the time the event occurred.
      name:
        type: string
        description: |-
          name of the event.
          This field is semantically required to be set to non-empty string.
      attributes:
        type: array
        items:
          $ref: '#/definitions/v1KeyValue'
        description: |-
          attributes is a collection of attribute key/value pairs on the event.
          Attribute keys MUST be unique (it is not allowed to have more than one
          attribute with the same key).
      droppedAttributesCount:
        type: integer
        format: int64
        description: |-
          dropped_attributes_count is the number of dropped attributes. If the value is 0,
          then no attributes were dropped.
    description: |-
      Event is a time-stamped annotation of the span, consisting of user-supplied
      text description and key-value pairs.
  SpanLink:
    type: object
    properties:
      traceId:
        type: string
        format: byte
        description: |-
          A unique identifier of a trace that this linked span is part of. The ID is a
          16-byte array.
      spanId:
        type: string
        format: byte
        description: A unique identifier for the linked span. The ID is an 8-byte array.
      traceState:
        type: string
        description: The trace_state associated with the link.
      attributes:
        type: array
        items:
          $ref: '#/definitions/v1KeyValue'
        description: |-
          attributes is a collection of attribute key/value pairs on the link.
          Attribute keys MUST be unique (it is not allowed to have more than one
          attribute with the same key).
      droppedAttributesCount:
        type: integer
        format: int64
        description: |-
          dropped_attributes_count is the number of dropped attributes. If the value is 0,
          then no attributes were dropped.
    description: |-
      A pointer from the current span to another span in the same trace or in a
      different trace. For example, this can be used in batching operations,
      where a single batch handler processes multiple requests from different
      traces or when the handler receives a request from a different project.
  SpanSpanKind:
    type: string
    enum:
      - SPAN_KIND_UNSPECIFIED
      - SPAN_KIND_INTERNAL
      - SPAN_KIND_SERVER
      - SPAN_KIND_CLIENT
      - SPAN_KIND_PRODUCER
      - SPAN_KIND_CONSUMER
    default: SPAN_KIND_UNSPECIFIED
    description: |-
      SpanKind is the type of span. Can be used to specify additional relationships between spans
      in addition to a parent/child relationship.

       - SPAN_KIND_UNSPECIFIED: Unspecified. Do NOT use as default.
      Implementations MAY assume SpanKind to be INTERNAL when receiving UNSPECIFIED.
       - SPAN_KIND_INTERNAL: Indicates that the span represents an internal operation within an application,
      as opposed to an operation happening at the boundaries. Default value.
       - SPAN_KIND_SERVER: Indicates that the span covers server-side handling of an RPC or other
      remote network request.
       - SPAN_KIND_CLIENT: Indicates that the span describes a request to some remote service.
       - SPAN_KIND_PRODUCER: Indicates that the span describes a producer sending a message to a broker.
      Unlike CLIENT and SERVER, there is often no direct critical path latency relationship
      between producer and consumer spans. A PRODUCER span ends when the message was accepted
      by the broker while the logical processing of the message might span a much longer time.
       - SPAN_KIND_CONSUMER: Indicates that the span describes consumer receiving a message from a broker.
      Like the PRODUCER kind, there is often no direct critical path latency relationship
      between producer and consumer spans.
  StatusStatusCode:
    type: string
    enum:
      - STATUS_CODE_UNSET
      - STATUS_CODE_OK
      - STATUS_CODE_ERROR
    default: STATUS_CODE_UNSET
    description: |-
      - STATUS_CODE_UNSET: The default status.
       - STATUS_CODE_OK: The Span has been validated by an Application developers or Operator to have
      completed successfully.
       - STATUS_CODE_ERROR: The Span contains an error.
    title: |-
      For the semantics of status codes see
      https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/api.md#set-status
  api_v3GetOperationsResponse:
    type: object
    properties:
      operations:
        type: array
        items:
          $ref: '#/definitions/api_v3Operation'
    description: Response object to get operation names.
  api_v3GetServicesResponse:
    type: object
    properties:
      services:
        type: array
        items:
          type: string
    description: Response object to get service names.
  api_v3Operation:
    type: object
    properties:
      name:
        type: string
      spanKind:
        type: string
    description: Operation encapsulates information about operation.
  api_v3SpansResponseChunk:
    type: object
    properties:
      resourceSpans:
        type: array
        items:
          $ref: '#/definitions/v1ResourceSpans'
        title: |-
          A list of OpenTelemetry ResourceSpans.
          In case of JSON format the ids (trace_id, span_id, parent_id) are encoded in base64 even though OpenTelemetry specification
          mandates to use hex encoding [2].
          Base64 is chosen to keep compatibility with JSONPb codec.
          [1]: https://github.com/open-telemetry/opentelemetry-proto/blob/main/opentelemetry/proto/trace/v1/trace.proto
          [2]: https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/protocol/otlp.md#otlphttp
    description: Response object with spans.
  api_v3TraceQueryParameters:
    type: object
    properties:
      serviceName:
        type: string
      operationName:
        type: string
      attributes:
        type: object
        additionalProperties:
          type: string
        description: |-
          Attributes are matched against Span and Resource attributes.
          At least one span in a trace must match all specified attributes.
      startTimeMin:
        type: string
        format: date-time
        description: Span min start time in. REST API uses RFC-3339ns format. Required.
      startTimeMax:
        type: string
        format: date-time
        description: Span max start time. REST API uses RFC-3339ns format. Required.
      durationMin:
        type: string
        description: Span min duration. REST API uses Golang's time format e.g. 10s.
      durationMax:
        type: string
        description: Span max duration. REST API uses Golang's time format e.g. 10s.
      numTraces:
        type: integer
        format: int32
        description: Maximum number of traces in the response.
    description: |-
      Query parameters to find traces.
      Note that some storage implementations do not guarantee the correct implementation of all parameters.
  protobufAny:
    type: object
    properties:
      typeUrl:
        type: string
      value:
        type: string
        format: byte
  runtimeStreamError:
    type: object
    properties:
      grpcCode:
        type: integer
        format: int32
      httpCode:
        type: integer
        format: int32
      message:
        type: string
      httpStatus:
        type: string
      details:
        type: array
        items:
          $ref: '#/definitions/protobufAny'
  v1AnyValue:
    type: object
    properties:
      stringValue:
        type: string
      boolValue:
        type: boolean
      intValue:
        type: string
        format: int64
      doubleValue:
        type: number
        format: double
      arrayValue:
        $ref: '#/definitions/v1ArrayValue'
      kvlistValue:
        $ref: '#/definitions/v1KeyValueList'
      bytesValue:
        type: string
        format: byte
    description: |-
      AnyValue is used to represent any type of attribute value. AnyValue may contain a
      primitive value such as a string or integer or it may contain an arbitrary nested
      object containing arrays, key-value lists and primitives.
  v1ArrayValue:
    type: object
    properties:
      values:
        type: array
        items:
          $ref: '#/definitions/v1AnyValue'
        description: Array of values. The array may be empty (contain 0 elements).
    description: |-
      ArrayValue is a list of AnyValue messages. We need ArrayValue as a message
      since oneof in AnyValue does not allow repeated fields.
  v1InstrumentationLibrary:
    type: object
    properties:
      name:
        type: string
        description: An empty instrumentation library name means the name is unknown.
      version:
        type: string
    description: |-
      InstrumentationLibrary is a message representing the instrumentation library information
      such as the fully qualified name and version.
  v1InstrumentationLibrarySpans:
    type: object
    properties:
      instrumentationLibrary:
        $ref: '#/definitions/v1InstrumentationLibrary'
        description: |-
          The instrumentation library information for the spans in this message.
          Semantically when InstrumentationLibrary isn't set, it is equivalent with
          an empty instrumentation library name (unknown).
      spans:
        type: array
        items:
          $ref: '#/definitions/v1Span'
        description: A list of Spans that originate from an instrumentation library.
      schemaUrl:
        type: string
        description: This schema_url applies to all spans and span events in the "spans" field.
    description: A collection of Spans produced by an InstrumentationLibrary.
  v1KeyValue:
    type: object
    properties:
      key:
        type: string
      value:
        $ref: '#/definitions/v1AnyValue'
    description: |-
      KeyValue is a key-value pair that is used to store Span attributes, Link
      attributes, etc.
  v1KeyValueList:
    type: object
    properties:
      values:
        type: array
        items:
          $ref: '#/definitions/v1KeyValue'
        description: |-
          A collection of key/value pairs of key-value pairs. The list may be empty (may
          contain 0 elements).
          The keys MUST be unique (it is not allowed to have more than one
          value with the same key).
    description: |-
      KeyValueList is a list of KeyValue messages. We need KeyValueList as a message
      since `oneof` in AnyValue does not allow repeated fields. Everywhere else where we need
      a list of KeyValue messages (e.g. in Span) we use `repeated KeyValue` directly to
      avoid unnecessary extra wrapping (which slows down the protocol). The 2 approaches
      are semantically equivalent.
  v1Resource:
    type: object
    properties:
      attributes:
        type: array
        items:
          $ref: '#/definitions/v1KeyValue'
        description: |-
          Set of attributes that describe the resource.
          Attribute keys MUST be unique (it is not allowed to have more than one
          attribute with the same key).
      droppedAttributesCount:
        type: integer
        format: int64
        description: |-
          dropped_attributes_count is the number of dropped attributes. If the value is 0, then
          no attributes were dropped.
    description: Resource information.
  v1ResourceSpans:
    type: object
    properties:
      resource:
        $ref: '#/definitions/v1Resource'
        description: |-
          The resource for the spans in this message.
          If this field is not set then no resource info is known.
      instrumentationLibrarySpans:
        type: array
        items:
          $ref: '#/definitions/v1InstrumentationLibrarySpans'
        description: A list of InstrumentationLibrarySpans that originate from a resource.
      schemaUrl:
        type: string
        description: |-
          This schema_url applies to the data in the "resource" field. It does not apply
          to the data in the "instrumentation_library_spans" field which have their own
          schema_url field.
    description: A collection of InstrumentationLibrarySpans from a Resource.
  v1Span:
    type: object
    properties:
      traceId:
        type: string
        format: byte
        description: |-
          A unique identifier for a trace. All spans from the same trace share
          the same `trace_id`. The ID is a 16-byte array. An ID with all zeroes
          is considered invalid.

          This field is semantically required. Receiver should generate new
          random trace_id if empty or invalid trace_id was received.

          This field is required.
      spanId:
        type: string
        format: byte
        description: |-
          A unique identifier for a span within a trace, assigned when the span
          is created. The ID is an 8-byte array. An ID with all zeroes is considered
          invalid.

          This field is semantically required. Receiver should generate new
          random span_id if empty or invalid span_id was received.

          This field is required.
      traceState:
        type: string
        description: |-
          trace_state conveys information about request position in multiple distributed tracing graphs.
          It is a trace_state in w3c-trace-context format: https://www.w3.org/TR/trace-context/#tracestate-header
          See also https://github.com/w3c/distributed-tracing for more details about this field.
      parentSpanId:
        type: string
        format: byte
        description: |-
          The `span_id` of this span's parent span. If this is a root span, then this
          field must be empty. The ID is an 8-byte array.
      name:
        type: string
        description: |-
          A description of the span's operation.

          For example, the name can be a qualified method name or a file name
          and a line number where the operation is called. A best practice is to use
          the same display name at the same call point in an application.
          This makes it easier to correlate spans in different traces.

          This field is semantically required to be set to non-empty string.
          Empty value is equivalent to an unknown span name.

          This field is required.
      kind:
        $ref: '#/definitions/SpanSpanKind'
        description: |-
          Distinguishes between spans generated in a particular context. For example,
          two spans with the same name may be distinguished using `CLIENT` (caller)
          and `SERVER` (callee) to identify queueing latency associated with the span.
      startTimeUnixNano:
        type: string
        format: uint64
        description: |-
          start_time_unix_nano is the start time of the span. On the client side, this is the time
          kept by the local machine where the span execution starts. On the server side, this
          is the time when the server's application handler starts running.
          Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.

          This field is semantically required and it is expected that end_time >= start_time.
      endTimeUnixNano:
        type: string
        format: uint64
        description: |-
          end_time_unix_nano is the end time of the span. On the client side, this is the time
          kept by the local machine where the span execution ends. On the server side, this
          is the time when the server application handler stops running.
          Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.

          This field is semantically required and it is expected that end_time >= start_time.
      attributes:
        type: array
        items:
          $ref: '#/definitions/v1KeyValue'
        description: |-
          "/http/user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"
              "/http/server_latency": 300
              "abc.com/myattribute": true
              "abc.com/score": 10.239

          The OpenTelemetry API specification further restricts the allowed value types:
          https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/common/common.md#attributes
          Attribute keys MUST be unique (it is not allowed to have more than one
          attribute with the same key).
        title: |-
          attributes is a collection of key/value pairs. Note, global attributes
          like server name can be set using the resource API. Examples of attributes:
      droppedAttributesCount:
        type: integer
        format: int64
        description: |-
          dropped_attributes_count is the number of attributes that were discarded. Attributes
          can be discarded because their keys are too long or because there are too many
          attributes. If this value is 0, then no attributes were dropped.
      events:
        type: array
        items:
          $ref: '#/definitions/SpanEvent'
        description: events is a collection of Event items.
      droppedEventsCount:
        type: integer
        format: int64
        description: |-
          dropped_events_count is the number of dropped events. If the value is 0, then no
          events were dropped.
      links:
        type: array
        items:
          $ref: '#/definitions/SpanLink'
        description: |-
          links is a collection of Links, which are references from this span to a span
          in the same or different trace.
      droppedLinksCount:
        type: integer
        format: int64
        description: |-
          dropped_links_count is the number of dropped links after the maximum size was
          enforced. If this value is 0, then no links were dropped.
      status:
        $ref: '#/definitions/v1Status'
        description: |-
          An optional final status for this span. Semantically when Status isn't set, it means
          span's status code is unset, i.e. assume STATUS_CODE_UNSET (code = 0).
    description: |-
      Span represents a single operation within a trace. Spans can be
      nested to form a trace tree. Spans may also be linked to other spans
      from the same or different trace and form graphs. Often, a trace
      contains a root span that describes the end-to-end latency, and one
      or more subspans for its sub-operations. A trace can also contain
      multiple root spans, or none at all. Spans do not need to be
      contiguous - there may be gaps or overlaps between spans in a trace.

      The next available field id is 17.
  v1Status:
    type: object
    properties:
      message:
        type: string
        description: A developer-facing human readable error message.
      code:
        $ref: '#/definitions/StatusStatusCode'
        description: The status code.
    description: |-
      The Status type defines a logical error model that is suitable for different
      programming environments, including REST APIs and RPC APIs.
