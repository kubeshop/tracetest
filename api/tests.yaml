openapi: 3.0.0
components:
  schemas:
    TestResourceList:
      type: object
      properties:
        count:
          type: integer
        items:
          type: array
          items:
            $ref: "#/components/schemas/TestResource"

    TestResource:
      type: object
      description: "Represents a test structured into the Resources format."
      properties:
        type:
          type: string
          description: "Represents the type of this resource. It should always be set as 'Test'."
          enum:
            - Test
        spec:
          $ref: "#/components/schemas/Test"

    Test:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        version:
          type: integer
          description: version number of the test
        createdAt:
          type: string
          format: date-time
        trigger:
          $ref: "./triggers.yaml#/components/schemas/Trigger"
        skipTraceCollection:
          type: boolean
          description: If true, the test will not collect a trace
        pollingProfile:
          type: string
          description: ID of the polling profile to be used for this test
        specs:
          type: array
          items:
            $ref: "#/components/schemas/TestSpec"
          description: specification of assertions that are going to be made
        outputs:
          description: define test outputs, in a key/value format. The value is processed as an expression
          type: array
          items:
            $ref: "#/components/schemas/TestOutput"
          example:
            - name: USER_ID
              selector: span[name="user_signup" result="success"]
              value: "attr:myapp.signup.user_id"
            - name: PROFILE_URL
              selector: span[tracetest.span.type="general" name="Tracetest trigger"]
              value: "${attr:tracetest.response.body | json_path '.user.profileUrl' }"
        summary:
          $ref: "#/components/schemas/TestSummary"
          description: summary of test data
          readOnly: true

    TestOutput:
      type: object
      properties:
        name:
          type: string
        selector:
          type: string
        selectorParsed:
          $ref: "#/components/schemas/Selector"
        value:
          type: string

    TestSummary:
      type: object
      properties:
        runs:
          type: integer
          readOnly: true
        lastRun:
          type: object
          readOnly: true
          properties:
            time:
              type: string
              format: date-time
              nullable: true
            passes:
              type: integer
              readOnly: true
            fails:
              type: integer
              readOnly: true
            analyzerScore:
              type: integer
              readOnly: true

    TestSpecs:
      type: object
      properties:
        specs:
          type: array
          items:
            $ref: "#/components/schemas/TestSpec"

      example:
        specs:
          - selector:
              query: span[tracetest.span.type="http"]
              structure:
                - filters:
                    - property: tracetest.span.type
                      operator: "="
                      value: http
            assertions:
              - attribute: tracetest.span.duration
                comparator: "<"
                expected: "2000"
              - attribute: http.status_code
                comparator: "="
                expected: "200"

    TestSpec:
      type: object
      properties:
        name:
          type: string
        selector:
          type: string
        selectorParsed:
          $ref: "#/components/schemas/Selector"
        assertions:
          type: array
          items:
            type: string

    TestRun:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        traceId:
          type: string
          readOnly: true
        spanId:
          type: string
          readOnly: true
        testVersion:
          type: integer
          description: Test version used when running this test run
        runGroupId:
          type: string
        state:
          type: string
          enum:
            [
              CREATED,
              EXECUTING,
              AWAITING_TRACE,
              AWAITING_TEST_RESULTS,
              ANALYZING_TRACE,
              ANALYZING_ERROR,
              FINISHED,
              STOPPED,
              TRIGGER_FAILED,
              TRACE_FAILED,
              ASSERTION_FAILED,
            ]
          description: Current execution state
        lastErrorState:
          type: string
          description: Details of the cause for the last `FAILED` state
        executionTime:
          type: integer
          description: time in seconds it took for the test to complete, either success or fail. If the test is still running, it will show the time up to the time of the request
        triggerTime:
          type: integer
          description: time in milliseconds it took for the triggering testSuite to complete, either success or fail. If the test is still running, it will show the time up to the time of the request
        createdAt:
          type: string
          format: date-time
        serviceTriggeredAt:
          type: string
          format: date-time
        serviceTriggerCompletedAt:
          type: string
          format: date-time
        obtainedTraceAt:
          type: string
          format: date-time
        completedAt:
          type: string
          format: date-time
        variableSet:
          $ref: "./variableSets.yaml#/components/schemas/VariableSet"
        resolvedTrigger:
          $ref: "./triggers.yaml#/components/schemas/Trigger"
        triggerResult:
          $ref: "./triggers.yaml#/components/schemas/TriggerResult"
        trace:
          $ref: "./trace.yaml#/components/schemas/Trace"
        result:
          $ref: "#/components/schemas/AssertionResults"
        linter:
          $ref: "linters.yaml#/components/schemas/LinterResult"
        outputs:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              spanId:
                type: string
              value:
                type: string
              error:
                type: string
        requiredGatesResult:
          $ref: "./testRunner.yaml#/components/schemas/RequiredGatesResult"

        metadata:
          type: object
          additionalProperties:
            type: string
        testSuiteId:
          type: string
        testSuiteRunId:
          type: integer

    RunInformation:
      type: object
      properties:
        metadata:
          type: object
          nullable: true
          additionalProperties:
            type: string
        variableSetId:
          type: string
        runGroupId:
          type: string
        variables:
          type: array
          items:
            $ref: "./variableSets.yaml#/components/schemas/VariableSetValue"
        requiredGates:
          type: array
          nullable: true
          items:
            $ref: "./testRunner.yaml#/components/schemas/SupportedGates"

    AssertionResults:
      type: object
      properties:
        allPassed:
          type: boolean
        results:
          type: array
          items:
            type: object
            properties:
              selector:
                $ref: "#/components/schemas/Selector"
              results:
                type: array
                items:
                  $ref: "#/components/schemas/AssertionResult"
      example:
        allPassed: true
        results:
          - selector:
              query: span[tracetest.span.type="http"]
              structure:
                - filters:
                    - property: tracetest.span.type
                      operator: "="
                      value: http
            results:
              - assertion:
                  attribute: http.status_code
                  comparator: "="
                  expected: "200"
                allPassed: true
                spanResults:
                  - spanId: "123"
                    observedValue: "test"
                    passed: true
              - assertion:
                  attribute: http.status_code
                  comparator: "="
                  expected: "200"
                allPassed: true
                spanResults:
                  - spanId: "123"
                    observedValue: "test"
                    passed: true

    AssertionResult:
      type: object
      properties:
        assertion:
          type: string
        allPassed:
          type: boolean
        spanResults:
          type: array
          items:
            $ref: "#/components/schemas/AssertionSpanResult"

    AssertionSpanResult:
      type: object
      properties:
        spanId:
          type: string
        observedValue:
          type: string
        passed:
          type: boolean
        error:
          type: string

    DefinitionFile:
      type: object
      properties:
        content:
          type: string

    SelectedSpansResult:
      type: object
      properties:
        selector:
          $ref: "#/components/schemas/Selector"
        spanIds:
          type: array
          items:
            type: string

    SearchSpansResult:
      type: object
      properties:
        spansIds:
          type: array
          items:
            type: string

    Selector:
      type: object
      properties:
        query:
          type: string
        structure:
          type: array
          items:
            $ref: "#/components/schemas/SpanSelector"

    SpanSelector:
      type: object
      nullable: true
      required:
        - filters
      properties:
        filters:
          type: array
          items:
            $ref: "#/components/schemas/SelectorFilter"
        pseudoClass:
          $ref: "#/components/schemas/SelectorPseudoClass"
        childSelector:
          $ref: "#/components/schemas/SpanSelector"

    SelectorFilter:
      type: object
      required:
        - property
        - operator
        - value
      properties:
        property:
          type: string
        operator:
          type: string
        value:
          type: string

    SelectorPseudoClass:
      type: object
      nullable: true
      required:
        - name
      properties:
        name:
          type: string
        argument:
          type: integer

    ExportedTestInformation:
      type: object
      required:
        - test
        - run
      properties:
        test:
          $ref: "#/components/schemas/Test"
        run:
          $ref: "#/components/schemas/TestRun"
